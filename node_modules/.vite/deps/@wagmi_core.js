import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  BaseError,
  ChainNotConfiguredError,
  ConnectorAccountNotFoundError,
  ConnectorAlreadyConnectedError,
  ConnectorChainMismatchError,
  ConnectorNotConnectedError,
  ConnectorNotFoundError,
  ConnectorUnavailableReconnectingError,
  ProviderNotFoundError,
  SwitchChainNotSupportedError,
  call,
  connect,
  cookieStorage,
  cookieToInitialState,
  createConfig,
  createConnector,
  createStorage,
  deepEqual,
  deployContract,
  deserialize,
  disconnect,
  estimateFeesPerGas,
  estimateGas,
  estimateMaxPriorityFeePerGas,
  extractRpcUrls,
  fallback,
  getAccount,
  getBalance,
  getBlock,
  getBlockNumber,
  getBlockTransactionCount,
  getBytecode,
  getChainId,
  getChains,
  getClient,
  getConnections,
  getConnectorClient,
  getConnectors,
  getEnsAddress,
  getEnsAvatar,
  getEnsName,
  getEnsResolver,
  getEnsText,
  getFeeHistory,
  getGasPrice,
  getProof,
  getPublicClient,
  getStorageAt,
  getToken,
  getTransaction,
  getTransactionConfirmations,
  getTransactionCount,
  getTransactionReceipt,
  getWalletClient,
  hydrate,
  injected,
  mock,
  multicall,
  noopStorage,
  normalizeChainId,
  parseCookie,
  prepareTransactionRequest,
  readContract,
  readContracts,
  reconnect,
  sendTransaction,
  serialize,
  signMessage,
  signTypedData,
  simulateContract,
  switchAccount,
  switchChain,
  unstable_connector,
  verifyMessage,
  verifyTypedData,
  version,
  waitForTransactionReceipt,
  watchAccount,
  watchAsset,
  watchBlockNumber,
  watchBlocks,
  watchChainId,
  watchClient,
  watchConnections,
  watchConnectors,
  watchContractEvent,
  watchPendingTransactions,
  watchPublicClient,
  writeContract
} from "./chunk-GWXI3H37.js";
import {
  custom,
  http,
  webSocket
} from "./chunk-3UTW6DC5.js";
import "./chunk-NPU3YFN2.js";
import "./chunk-T7OT6S6N.js";
import "./chunk-PJDWXBDF.js";
import "./chunk-ENXZNCLL.js";
import "./chunk-JJT42YBK.js";
import "./chunk-QARPLP5R.js";
import "./chunk-6JOU4BTQ.js";
import "./chunk-4OCLWQ76.js";
import "./chunk-4PX2YOL6.js";
import "./chunk-7VCKL3WS.js";
export {
  BaseError,
  ChainNotConfiguredError,
  ConnectorAccountNotFoundError,
  ConnectorAlreadyConnectedError,
  ConnectorChainMismatchError,
  ConnectorNotConnectedError,
  ConnectorNotFoundError,
  ConnectorUnavailableReconnectingError,
  ProviderNotFoundError,
  SwitchChainNotSupportedError,
  call,
  connect,
  cookieStorage,
  cookieToInitialState,
  createConfig,
  createConnector,
  createStorage,
  custom,
  deepEqual,
  deployContract,
  deserialize,
  disconnect,
  estimateFeesPerGas,
  estimateGas,
  estimateMaxPriorityFeePerGas,
  extractRpcUrls,
  fallback,
  getBalance as fetchBalance,
  getBlockNumber as fetchBlockNumber,
  getEnsAddress as fetchEnsAddress,
  getEnsAvatar as fetchEnsAvatar,
  getEnsName as fetchEnsName,
  getEnsResolver as fetchEnsResolver,
  getToken as fetchToken,
  getTransaction as fetchTransaction,
  getAccount,
  getBalance,
  getBlock,
  getBlockNumber,
  getBlockTransactionCount,
  getBytecode,
  getChainId,
  getChains,
  getClient,
  getConnections,
  getConnectorClient,
  getConnectors,
  getEnsAddress,
  getEnsAvatar,
  getEnsName,
  getEnsResolver,
  getEnsText,
  getFeeHistory,
  getGasPrice,
  getProof,
  getPublicClient,
  getStorageAt,
  getToken,
  getTransaction,
  getTransactionConfirmations,
  getTransactionCount,
  getTransactionReceipt,
  getWalletClient,
  http,
  hydrate,
  injected,
  mock,
  multicall,
  noopStorage,
  normalizeChainId,
  parseCookie,
  prepareTransactionRequest,
  readContract,
  readContracts,
  reconnect,
  sendTransaction,
  serialize,
  signMessage,
  signTypedData,
  simulateContract,
  switchAccount,
  switchChain,
  switchChain as switchNetwork,
  unstable_connector,
  verifyMessage,
  verifyTypedData,
  version,
  waitForTransactionReceipt as waitForTransaction,
  waitForTransactionReceipt,
  watchAccount,
  watchAsset,
  watchBlockNumber,
  watchBlocks,
  watchChainId,
  watchClient,
  watchConnections,
  watchConnectors,
  watchContractEvent,
  watchPendingTransactions,
  watchPublicClient,
  webSocket,
  writeContract
};
//# sourceMappingURL=@wagmi_core.js.map
