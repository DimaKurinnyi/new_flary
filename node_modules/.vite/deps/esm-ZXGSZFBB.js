import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  require_isarray
} from "./chunk-O32CGQNP.js";
import {
  A,
  C,
  E,
  IEvents,
  concat,
  decodeJWT,
  encodeIss,
  esm_exports,
  f,
  formatJsonRpcError,
  formatJsonRpcRequest,
  formatJsonRpcResult,
  fromString,
  generateKeyPair,
  getBigIntRpcId,
  h,
  i,
  import_pino,
  isJsonRpcError,
  isJsonRpcRequest,
  isJsonRpcResponse,
  isJsonRpcResult,
  k,
  o,
  payloadId,
  r,
  require_chacha20poly1305,
  require_cjs,
  require_hkdf,
  require_lodash,
  require_query_string,
  require_random,
  require_sha256,
  require_x25519,
  signJWT,
  toString,
  y
} from "./chunk-KANLD75S.js";
import {
  require_brorand,
  require_hash,
  require_hmac_drbg,
  require_minimalistic_assert,
  require_utils
} from "./chunk-RN6PM646.js";
import "./chunk-BKVKMYOI.js";
import {
  require_inherits_browser
} from "./chunk-2QTGKRGI.js";
import {
  require_events
} from "./chunk-YTDWD7U5.js";
import {
  PublicKey,
  Transaction,
  init_index_browser_esm
} from "./chunk-N6G24IR2.js";
import {
  require_bn
} from "./chunk-NJXCTEN5.js";
import {
  dist_exports,
  init_dist
} from "./chunk-C2PEMXPS.js";
import {
  require_dijkstra
} from "./chunk-SGARANC2.js";
import "./chunk-O4SVBZ74.js";
import "./chunk-ENXZNCLL.js";
import "./chunk-JJT42YBK.js";
import "./chunk-QARPLP5R.js";
import "./chunk-6JOU4BTQ.js";
import "./chunk-4OCLWQ76.js";
import "./chunk-4PX2YOL6.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-7VCKL3WS.js";

// node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow3(name) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
        res = window[name];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow3;
    function getFromWindowOrThrow3(name) {
      const res = getFromWindow3(name);
      if (!res) {
        throw new Error(`${name} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow3;
    function getDocumentOrThrow3() {
      return getFromWindowOrThrow3("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow3;
    function getDocument3() {
      return getFromWindow3("document");
    }
    exports.getDocument = getDocument3;
    function getNavigatorOrThrow3() {
      return getFromWindowOrThrow3("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow3;
    function getNavigator3() {
      return getFromWindow3("navigator");
    }
    exports.getNavigator = getNavigator3;
    function getLocationOrThrow3() {
      return getFromWindowOrThrow3("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow3;
    function getLocation3() {
      return getFromWindow3("location");
    }
    exports.getLocation = getLocation3;
    function getCryptoOrThrow3() {
      return getFromWindowOrThrow3("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow3;
    function getCrypto3() {
      return getFromWindow3("crypto");
    }
    exports.getCrypto = getCrypto3;
    function getLocalStorageOrThrow3() {
      return getFromWindowOrThrow3("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow3;
    function getLocalStorage3() {
      return getFromWindow3("localStorage");
    }
    exports.getLocalStorage = getLocalStorage3;
  }
});

// node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata2() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e3) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i6 = 0; i6 < links.length; i6++) {
          const link = links[i6];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i6 = 0; i6 < metaTags.length; i6++) {
          const tag = metaTags[i6];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name2 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name2) {
          name2 = doc.title;
        }
        return name2;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata2;
  }
});

// node_modules/detect-browser/es/index.js
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua) {
  return ua !== "" && userAgentRules.reduce(function(matched, _a) {
    var browser = _a[0], regex = _a[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua) {
  var matchedRule = matchUserAgent(ua);
  if (!matchedRule) {
    return null;
  }
  var name = matchedRule[0], match = matchedRule[1];
  if (name === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
    }
  } else {
    versionParts = [];
  }
  var version11 = versionParts.join(".");
  var os = detectOS(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name, version11, os, searchBotMatch[1]);
  }
  return new BrowserInfo(name, version11, os);
}
function detectOS(ua) {
  for (var ii2 = 0, count = operatingSystemRules.length; ii2 < count; ii2++) {
    var _a = operatingSystemRules[ii2], os = _a[0], regex = _a[1];
    var match = regex.exec(ua);
    if (match) {
      return os;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii2 = 0; ii2 < count; ii2++) {
    output.push("0");
  }
  return output;
}
var import_dist, import_dist2, import_dist3, __spreadArrays, BrowserInfo, NodeInfo, SearchBotDeviceInfo, BotInfo, ReactNativeInfo, SEARCHBOX_UA_REGEX, SEARCHBOT_OS_REGEX, REQUIRED_VERSION_PARTS, userAgentRules, operatingSystemRules;
var init_es = __esm({
  "node_modules/detect-browser/es/index.js"() {
    import_dist = __toESM(require_dist());
    import_dist2 = __toESM(require_dist2());
    import_dist3 = __toESM(require_dist3());
    __spreadArrays = function() {
      for (var s3 = 0, i6 = 0, il = arguments.length; i6 < il; i6++) s3 += arguments[i6].length;
      for (var r5 = Array(s3), k5 = 0, i6 = 0; i6 < il; i6++)
        for (var a4 = arguments[i6], j3 = 0, jl = a4.length; j3 < jl; j3++, k5++)
          r5[k5] = a4[j3];
      return r5;
    };
    BrowserInfo = /** @class */
    /* @__PURE__ */ function() {
      function BrowserInfo3(name, version11, os) {
        this.name = name;
        this.version = version11;
        this.os = os;
        this.type = "browser";
      }
      return BrowserInfo3;
    }();
    NodeInfo = /** @class */
    /* @__PURE__ */ function() {
      function NodeInfo3(version11) {
        this.version = version11;
        this.type = "node";
        this.name = "node";
        this.os = process.platform;
      }
      return NodeInfo3;
    }();
    SearchBotDeviceInfo = /** @class */
    /* @__PURE__ */ function() {
      function SearchBotDeviceInfo3(name, version11, os, bot) {
        this.name = name;
        this.version = version11;
        this.os = os;
        this.bot = bot;
        this.type = "bot-device";
      }
      return SearchBotDeviceInfo3;
    }();
    BotInfo = /** @class */
    /* @__PURE__ */ function() {
      function BotInfo3() {
        this.type = "bot";
        this.bot = true;
        this.name = "bot";
        this.version = null;
        this.os = null;
      }
      return BotInfo3;
    }();
    ReactNativeInfo = /** @class */
    /* @__PURE__ */ function() {
      function ReactNativeInfo3() {
        this.type = "react-native";
        this.name = "react-native";
        this.version = null;
        this.os = null;
      }
      return ReactNativeInfo3;
    }();
    SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
    SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
    REQUIRED_VERSION_PARTS = 3;
    userAgentRules = [
      ["aol", /AOLShield\/([0-9\._]+)/],
      ["edge", /Edge\/([0-9\._]+)/],
      ["edge-ios", /EdgiOS\/([0-9\._]+)/],
      ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
      ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
      ["samsung", /SamsungBrowser\/([0-9\.]+)/],
      ["silk", /\bSilk\/([0-9._-]+)\b/],
      ["miui", /MiuiBrowser\/([0-9\.]+)$/],
      ["beaker", /BeakerBrowser\/([0-9\.]+)/],
      ["edge-chromium", /EdgA?\/([0-9\.]+)/],
      [
        "chromium-webview",
        /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
      ],
      ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
      ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
      ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
      ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
      ["fxios", /FxiOS\/([0-9\.]+)/],
      ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
      ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
      ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
      ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
      ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
      ["ie", /MSIE\s(7\.0)/],
      ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
      ["android", /Android\s([0-9\.]+)/],
      ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
      ["safari", /Version\/([0-9\._]+).*Safari/],
      ["facebook", /FBAV\/([0-9\.]+)/],
      ["instagram", /Instagram\s([0-9\.]+)/],
      ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
      ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
      ["searchbot", SEARCHBOX_UA_REGEX]
    ];
    operatingSystemRules = [
      ["iOS", /iP(hone|od|ad)/],
      ["Android OS", /Android/],
      ["BlackBerry OS", /BlackBerry|BB10/],
      ["Windows Mobile", /IEMobile/],
      ["Amazon OS", /Kindle/],
      ["Windows 3.11", /Win16/],
      ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
      ["Windows 98", /(Windows 98)|(Win98)/],
      ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
      ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
      ["Windows Server 2003", /(Windows NT 5.2)/],
      ["Windows Vista", /(Windows NT 6.0)/],
      ["Windows 7", /(Windows NT 6.1)/],
      ["Windows 8", /(Windows NT 6.2)/],
      ["Windows 8.1", /(Windows NT 6.3)/],
      ["Windows 10", /(Windows NT 10.0)/],
      ["Windows ME", /Windows ME/],
      ["Open BSD", /OpenBSD/],
      ["Sun OS", /SunOS/],
      ["Chrome OS", /CrOS/],
      ["Linux", /(Linux)|(X11)/],
      ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
      ["QNX", /QNX/],
      ["BeOS", /BeOS/],
      ["OS/2", /OS\/2/]
    ];
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/browser.js
function detectEnv(userAgent) {
  return detect(userAgent);
}
function detectOS2() {
  const env = detectEnv();
  return env && env.os ? env.os : void 0;
}
function isAndroid() {
  const os = detectOS2();
  return os ? os.toLowerCase().includes("android") : false;
}
function isIOS() {
  const os = detectOS2();
  return os ? os.toLowerCase().includes("ios") || os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 : false;
}
function isMobile() {
  const os = detectOS2();
  return os ? isAndroid() || isIOS() : false;
}
function isNode() {
  const env = detectEnv();
  const result = env && env.name ? env.name.toLowerCase() === "node" : false;
  return result;
}
function isBrowser() {
  const result = !isNode() && !!getNavigator2();
  return result;
}
function getClientMeta() {
  return windowMetadata.getWindowMetadata();
}
var import_dist4, import_dist5, import_dist6, windowMetadata, windowGetters, getFromWindow2, getFromWindowOrThrow2, getDocumentOrThrow2, getDocument2, getNavigatorOrThrow2, getNavigator2, getLocationOrThrow2, getLocation2, getCryptoOrThrow2, getCrypto2, getLocalStorageOrThrow2, getLocalStorage2;
var init_browser = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/browser.js"() {
    import_dist4 = __toESM(require_dist());
    import_dist5 = __toESM(require_dist2());
    import_dist6 = __toESM(require_dist3());
    windowMetadata = __toESM(require_cjs3());
    windowGetters = __toESM(require_cjs2());
    init_es();
    getFromWindow2 = windowGetters.getFromWindow;
    getFromWindowOrThrow2 = windowGetters.getFromWindowOrThrow;
    getDocumentOrThrow2 = windowGetters.getDocumentOrThrow;
    getDocument2 = windowGetters.getDocument;
    getNavigatorOrThrow2 = windowGetters.getNavigatorOrThrow;
    getNavigator2 = windowGetters.getNavigator;
    getLocationOrThrow2 = windowGetters.getLocationOrThrow;
    getLocation2 = windowGetters.getLocation;
    getCryptoOrThrow2 = windowGetters.getCryptoOrThrow;
    getCrypto2 = windowGetters.getCrypto;
    getLocalStorageOrThrow2 = windowGetters.getLocalStorageOrThrow;
    getLocalStorage2 = windowGetters.getLocalStorage;
  }
});

// node_modules/@walletconnect/safe-json/dist/esm/index.js
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSON.parse(value);
  } catch (_a) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSON.stringify(value);
}
var import_dist7, import_dist8, import_dist9;
var init_esm = __esm({
  "node_modules/@walletconnect/safe-json/dist/esm/index.js"() {
    import_dist7 = __toESM(require_dist());
    import_dist8 = __toESM(require_dist2());
    import_dist9 = __toESM(require_dist3());
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/json.js
var import_dist10, import_dist11, import_dist12, safeJsonParse2, safeJsonStringify2;
var init_json = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/json.js"() {
    import_dist10 = __toESM(require_dist());
    import_dist11 = __toESM(require_dist2());
    import_dist12 = __toESM(require_dist3());
    init_esm();
    safeJsonParse2 = safeJsonParse;
    safeJsonStringify2 = safeJsonStringify;
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/local.js
function setLocal(key2, data) {
  const raw = safeJsonStringify2(data);
  const local = getLocalStorage2();
  if (local) {
    local.setItem(key2, raw);
  }
}
function getLocal(key2) {
  let data = null;
  let raw = null;
  const local = getLocalStorage2();
  if (local) {
    raw = local.getItem(key2);
  }
  data = raw ? safeJsonParse2(raw) : raw;
  return data;
}
function removeLocal(key2) {
  const local = getLocalStorage2();
  if (local) {
    local.removeItem(key2);
  }
}
var import_dist13, import_dist14, import_dist15;
var init_local = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/local.js"() {
    import_dist13 = __toESM(require_dist());
    import_dist14 = __toESM(require_dist2());
    import_dist15 = __toESM(require_dist3());
    init_json();
    init_browser();
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/mobile.js
function formatIOSMobile(uri, entry) {
  const encodedUri = encodeURIComponent(uri);
  return entry.universalLink ? `${entry.universalLink}/wc?uri=${encodedUri}` : entry.deepLink ? `${entry.deepLink}${entry.deepLink.endsWith(":") ? "//" : "/"}wc?uri=${encodedUri}` : "";
}
function saveMobileLinkInfo(data) {
  const focusUri = data.href.split("?")[0];
  setLocal(mobileLinkChoiceKey, Object.assign(Object.assign({}, data), { href: focusUri }));
}
function getMobileRegistryEntry(registry, name) {
  return registry.filter((entry) => entry.name.toLowerCase().includes(name.toLowerCase()))[0];
}
function getMobileLinkRegistry(registry, whitelist) {
  let links = registry;
  if (whitelist) {
    links = whitelist.map((name) => getMobileRegistryEntry(registry, name)).filter(Boolean);
  }
  return links;
}
var import_dist16, import_dist17, import_dist18, mobileLinkChoiceKey;
var init_mobile = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/mobile.js"() {
    import_dist16 = __toESM(require_dist());
    import_dist17 = __toESM(require_dist2());
    import_dist18 = __toESM(require_dist3());
    init_local();
    mobileLinkChoiceKey = "WALLETCONNECT_DEEPLINK_CHOICE";
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/registry.js
function getWalletRegistryUrl() {
  return API_URL + "/api/v2/wallets";
}
function getDappRegistryUrl() {
  return API_URL + "/api/v2/dapps";
}
function formatMobileRegistryEntry(entry, platform = "mobile") {
  var _a;
  return {
    name: entry.name || "",
    shortName: entry.metadata.shortName || "",
    color: entry.metadata.colors.primary || "",
    logo: (_a = entry.image_url.sm) !== null && _a !== void 0 ? _a : "",
    universalLink: entry[platform].universal || "",
    deepLink: entry[platform].native || ""
  };
}
function formatMobileRegistry(registry, platform = "mobile") {
  return Object.values(registry).filter((entry) => !!entry[platform].universal || !!entry[platform].native).map((entry) => formatMobileRegistryEntry(entry, platform));
}
var import_dist19, import_dist20, import_dist21, API_URL;
var init_registry = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/registry.js"() {
    import_dist19 = __toESM(require_dist());
    import_dist20 = __toESM(require_dist2());
    import_dist21 = __toESM(require_dist3());
    API_URL = "https://registry.walletconnect.com";
  }
});

// node_modules/@walletconnect/browser-utils/dist/esm/index.js
var esm_exports3 = {};
__export(esm_exports3, {
  detectEnv: () => detectEnv,
  detectOS: () => detectOS2,
  formatIOSMobile: () => formatIOSMobile,
  formatMobileRegistry: () => formatMobileRegistry,
  formatMobileRegistryEntry: () => formatMobileRegistryEntry,
  getClientMeta: () => getClientMeta,
  getCrypto: () => getCrypto2,
  getCryptoOrThrow: () => getCryptoOrThrow2,
  getDappRegistryUrl: () => getDappRegistryUrl,
  getDocument: () => getDocument2,
  getDocumentOrThrow: () => getDocumentOrThrow2,
  getFromWindow: () => getFromWindow2,
  getFromWindowOrThrow: () => getFromWindowOrThrow2,
  getLocal: () => getLocal,
  getLocalStorage: () => getLocalStorage2,
  getLocalStorageOrThrow: () => getLocalStorageOrThrow2,
  getLocation: () => getLocation2,
  getLocationOrThrow: () => getLocationOrThrow2,
  getMobileLinkRegistry: () => getMobileLinkRegistry,
  getMobileRegistryEntry: () => getMobileRegistryEntry,
  getNavigator: () => getNavigator2,
  getNavigatorOrThrow: () => getNavigatorOrThrow2,
  getWalletRegistryUrl: () => getWalletRegistryUrl,
  isAndroid: () => isAndroid,
  isBrowser: () => isBrowser,
  isIOS: () => isIOS,
  isMobile: () => isMobile,
  isNode: () => isNode,
  mobileLinkChoiceKey: () => mobileLinkChoiceKey,
  removeLocal: () => removeLocal,
  safeJsonParse: () => safeJsonParse2,
  safeJsonStringify: () => safeJsonStringify2,
  saveMobileLinkInfo: () => saveMobileLinkInfo,
  setLocal: () => setLocal
});
var import_dist22, import_dist23, import_dist24;
var init_esm2 = __esm({
  "node_modules/@walletconnect/browser-utils/dist/esm/index.js"() {
    import_dist22 = __toESM(require_dist());
    import_dist23 = __toESM(require_dist2());
    import_dist24 = __toESM(require_dist3());
    init_browser();
    init_json();
    init_local();
    init_mobile();
    init_registry();
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/can-promise.js
var require_can_promise = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/can-promise.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    module.exports = function() {
      return typeof Promise === "function" && Promise.prototype && Promise.prototype.then;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/utils/typedarray-buffer.js
var require_typedarray_buffer = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/utils/typedarray-buffer.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var isArray = require_isarray();
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
          return 42;
        } };
        return arr.foo() === 42;
      } catch (e3) {
        return false;
      }
    }
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    var K_MAX_LENGTH = Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
    function Buffer2(arg, offset, length) {
      if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
        return new Buffer2(arg, offset, length);
      }
      if (typeof arg === "number") {
        return allocUnsafe(this, arg);
      }
      return from(this, arg, offset, length);
    }
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      Buffer2.prototype.__proto__ = Uint8Array.prototype;
      Buffer2.__proto__ = Uint8Array;
      if (typeof Symbol !== "undefined" && Symbol.species && Buffer2[Symbol.species] === Buffer2) {
        Object.defineProperty(Buffer2, Symbol.species, {
          value: null,
          configurable: true,
          enumerable: false,
          writable: false
        });
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function isnan(val) {
      return val !== val;
    }
    function createBuffer(that, length) {
      var buf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        buf = new Uint8Array(length);
        buf.__proto__ = Buffer2.prototype;
      } else {
        buf = that;
        if (buf === null) {
          buf = new Buffer2(length);
        }
        buf.length = length;
      }
      return buf;
    }
    function allocUnsafe(that, size) {
      var buf = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer2.TYPED_ARRAY_SUPPORT) {
        for (var i6 = 0; i6 < size; ++i6) {
          buf[i6] = 0;
        }
      }
      return buf;
    }
    function fromString2(that, string) {
      var length = byteLength(string) | 0;
      var buf = createBuffer(that, length);
      var actual = buf.write(string);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(that, length);
      for (var i6 = 0; i6 < length; i6 += 1) {
        buf[i6] = array[i6] & 255;
      }
      return buf;
    }
    function fromArrayBuffer(that, array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError("'offset' is out of bounds");
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError("'length' is out of bounds");
      }
      var buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        buf.__proto__ = Buffer2.prototype;
      } else {
        buf = fromArrayLike(that, buf);
      }
      return buf;
    }
    function fromObject(that, obj) {
      if (Buffer2.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(that, len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
          if (typeof obj.length !== "number" || isnan(obj.length)) {
            return createBuffer(that, 0);
          }
          return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(that, obj.data);
        }
      }
      throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i6 = 0; i6 < length; ++i6) {
        codePoint = string.charCodeAt(i6);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            } else if (i6 + 1 === length) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0) break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0) break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0) break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function byteLength(string) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        string = "" + string;
      }
      var len = string.length;
      if (len === 0) return 0;
      return utf8ToBytes(string).length;
    }
    function blitBuffer(src, dst, offset, length) {
      for (var i6 = 0; i6 < length; ++i6) {
        if (i6 + offset >= dst.length || i6 >= src.length) break;
        dst[i6 + offset] = src[i6];
      }
      return i6;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function from(that, value, offset, length) {
      if (typeof value === "number") {
        throw new TypeError('"value" argument must not be a number');
      }
      if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, offset, length);
      }
      if (typeof value === "string") {
        return fromString2(that, value, offset);
      }
      return fromObject(that, value);
    }
    Buffer2.prototype.write = function write(string, offset, length) {
      if (offset === void 0) {
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
        } else {
          length = void 0;
        }
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      return utf8Write(this, string, offset, length);
    };
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start) end = start;
      var newBuf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer2.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer2(sliceLen, void 0);
        for (var i6 = 0; i6 < sliceLen; ++i6) {
          newBuf[i6] = this[i6 + start];
        }
      }
      return newBuf;
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      var i6;
      if (this === target && start < targetStart && targetStart < end) {
        for (i6 = len - 1; i6 >= 0; --i6) {
          target[i6 + targetStart] = this[i6 + start];
        }
      } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
        for (i6 = 0; i6 < len; ++i6) {
          target[i6 + targetStart] = this[i6 + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      var i6;
      if (typeof val === "number") {
        for (i6 = start; i6 < end; ++i6) {
          this[i6] = val;
        }
      } else {
        var bytes = Buffer2.isBuffer(val) ? val : new Buffer2(val);
        var len = bytes.length;
        for (i6 = 0; i6 < end - start; ++i6) {
          this[i6 + start] = bytes[i6 % len];
        }
      }
      return this;
    };
    Buffer2.concat = function concat3(list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return createBuffer(null, 0);
      }
      var i6;
      if (length === void 0) {
        length = 0;
        for (i6 = 0; i6 < list.length; ++i6) {
          length += list[i6].length;
        }
      }
      var buffer = allocUnsafe(null, length);
      var pos = 0;
      for (i6 = 0; i6 < list.length; ++i6) {
        var buf = list[i6];
        if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer;
    };
    Buffer2.byteLength = byteLength;
    Buffer2.prototype._isBuffer = true;
    Buffer2.isBuffer = function isBuffer(b4) {
      return !!(b4 != null && b4._isBuffer);
    };
    module.exports.alloc = function(size) {
      var buffer = new Buffer2(size);
      buffer.fill(0);
      return buffer;
    };
    module.exports.from = function(data) {
      return new Buffer2(data);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/utils.js
var require_utils2 = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/utils.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var toSJISFunction;
    var CODEWORDS_COUNT = [
      0,
      // Not used
      26,
      44,
      70,
      100,
      134,
      172,
      196,
      242,
      292,
      346,
      404,
      466,
      532,
      581,
      655,
      733,
      815,
      901,
      991,
      1085,
      1156,
      1258,
      1364,
      1474,
      1588,
      1706,
      1828,
      1921,
      2051,
      2185,
      2323,
      2465,
      2611,
      2761,
      2876,
      3034,
      3196,
      3362,
      3532,
      3706
    ];
    exports.getSymbolSize = function getSymbolSize(version11) {
      if (!version11) throw new Error('"version" cannot be null or undefined');
      if (version11 < 1 || version11 > 40) throw new Error('"version" should be in range from 1 to 40');
      return version11 * 4 + 17;
    };
    exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version11) {
      return CODEWORDS_COUNT[version11];
    };
    exports.getBCHDigit = function(data) {
      var digit = 0;
      while (data !== 0) {
        digit++;
        data >>>= 1;
      }
      return digit;
    };
    exports.setToSJISFunction = function setToSJISFunction(f5) {
      if (typeof f5 !== "function") {
        throw new Error('"toSJISFunc" is not a valid function.');
      }
      toSJISFunction = f5;
    };
    exports.isKanjiModeEnabled = function() {
      return typeof toSJISFunction !== "undefined";
    };
    exports.toSJIS = function toSJIS(kanji) {
      return toSJISFunction(kanji);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/error-correction-level.js
var require_error_correction_level = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/error-correction-level.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    exports.L = { bit: 1 };
    exports.M = { bit: 0 };
    exports.Q = { bit: 3 };
    exports.H = { bit: 2 };
    function fromString2(string) {
      if (typeof string !== "string") {
        throw new Error("Param is not a string");
      }
      var lcStr = string.toLowerCase();
      switch (lcStr) {
        case "l":
        case "low":
          return exports.L;
        case "m":
        case "medium":
          return exports.M;
        case "q":
        case "quartile":
          return exports.Q;
        case "h":
        case "high":
          return exports.H;
        default:
          throw new Error("Unknown EC Level: " + string);
      }
    }
    exports.isValid = function isValid(level) {
      return level && typeof level.bit !== "undefined" && level.bit >= 0 && level.bit < 4;
    };
    exports.from = function from(value, defaultValue) {
      if (exports.isValid(value)) {
        return value;
      }
      try {
        return fromString2(value);
      } catch (e3) {
        return defaultValue;
      }
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/bit-buffer.js
var require_bit_buffer = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/bit-buffer.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    function BitBuffer() {
      this.buffer = [];
      this.length = 0;
    }
    BitBuffer.prototype = {
      get: function(index) {
        var bufIndex = Math.floor(index / 8);
        return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
      },
      put: function(num, length) {
        for (var i6 = 0; i6 < length; i6++) {
          this.putBit((num >>> length - i6 - 1 & 1) === 1);
        }
      },
      getLengthInBits: function() {
        return this.length;
      },
      putBit: function(bit) {
        var bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0);
        }
        if (bit) {
          this.buffer[bufIndex] |= 128 >>> this.length % 8;
        }
        this.length++;
      }
    };
    module.exports = BitBuffer;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/bit-matrix.js
var require_bit_matrix = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/bit-matrix.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BufferUtil = require_typedarray_buffer();
    function BitMatrix(size) {
      if (!size || size < 1) {
        throw new Error("BitMatrix size must be defined and greater than 0");
      }
      this.size = size;
      this.data = BufferUtil.alloc(size * size);
      this.reservedBit = BufferUtil.alloc(size * size);
    }
    BitMatrix.prototype.set = function(row, col, value, reserved) {
      var index = row * this.size + col;
      this.data[index] = value;
      if (reserved) this.reservedBit[index] = true;
    };
    BitMatrix.prototype.get = function(row, col) {
      return this.data[row * this.size + col];
    };
    BitMatrix.prototype.xor = function(row, col, value) {
      this.data[row * this.size + col] ^= value;
    };
    BitMatrix.prototype.isReserved = function(row, col) {
      return this.reservedBit[row * this.size + col];
    };
    module.exports = BitMatrix;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/alignment-pattern.js
var require_alignment_pattern = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/alignment-pattern.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var getSymbolSize = require_utils2().getSymbolSize;
    exports.getRowColCoords = function getRowColCoords(version11) {
      if (version11 === 1) return [];
      var posCount = Math.floor(version11 / 7) + 2;
      var size = getSymbolSize(version11);
      var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
      var positions = [size - 7];
      for (var i6 = 1; i6 < posCount - 1; i6++) {
        positions[i6] = positions[i6 - 1] - intervals;
      }
      positions.push(6);
      return positions.reverse();
    };
    exports.getPositions = function getPositions(version11) {
      var coords = [];
      var pos = exports.getRowColCoords(version11);
      var posLength = pos.length;
      for (var i6 = 0; i6 < posLength; i6++) {
        for (var j3 = 0; j3 < posLength; j3++) {
          if (i6 === 0 && j3 === 0 || // top-left
          i6 === 0 && j3 === posLength - 1 || // bottom-left
          i6 === posLength - 1 && j3 === 0) {
            continue;
          }
          coords.push([pos[i6], pos[j3]]);
        }
      }
      return coords;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/finder-pattern.js
var require_finder_pattern = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/finder-pattern.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var getSymbolSize = require_utils2().getSymbolSize;
    var FINDER_PATTERN_SIZE = 7;
    exports.getPositions = function getPositions(version11) {
      var size = getSymbolSize(version11);
      return [
        // top-left
        [0, 0],
        // top-right
        [size - FINDER_PATTERN_SIZE, 0],
        // bottom-left
        [0, size - FINDER_PATTERN_SIZE]
      ];
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/mask-pattern.js
var require_mask_pattern = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/mask-pattern.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    exports.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var PenaltyScores = {
      N1: 3,
      N2: 3,
      N3: 40,
      N4: 10
    };
    exports.isValid = function isValid(mask) {
      return mask != null && mask !== "" && !isNaN(mask) && mask >= 0 && mask <= 7;
    };
    exports.from = function from(value) {
      return exports.isValid(value) ? parseInt(value, 10) : void 0;
    };
    exports.getPenaltyN1 = function getPenaltyN1(data) {
      var size = data.size;
      var points = 0;
      var sameCountCol = 0;
      var sameCountRow = 0;
      var lastCol = null;
      var lastRow = null;
      for (var row = 0; row < size; row++) {
        sameCountCol = sameCountRow = 0;
        lastCol = lastRow = null;
        for (var col = 0; col < size; col++) {
          var module2 = data.get(row, col);
          if (module2 === lastCol) {
            sameCountCol++;
          } else {
            if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
            lastCol = module2;
            sameCountCol = 1;
          }
          module2 = data.get(col, row);
          if (module2 === lastRow) {
            sameCountRow++;
          } else {
            if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
            lastRow = module2;
            sameCountRow = 1;
          }
        }
        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
      }
      return points;
    };
    exports.getPenaltyN2 = function getPenaltyN2(data) {
      var size = data.size;
      var points = 0;
      for (var row = 0; row < size - 1; row++) {
        for (var col = 0; col < size - 1; col++) {
          var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
          if (last === 4 || last === 0) points++;
        }
      }
      return points * PenaltyScores.N2;
    };
    exports.getPenaltyN3 = function getPenaltyN3(data) {
      var size = data.size;
      var points = 0;
      var bitsCol = 0;
      var bitsRow = 0;
      for (var row = 0; row < size; row++) {
        bitsCol = bitsRow = 0;
        for (var col = 0; col < size; col++) {
          bitsCol = bitsCol << 1 & 2047 | data.get(row, col);
          if (col >= 10 && (bitsCol === 1488 || bitsCol === 93)) points++;
          bitsRow = bitsRow << 1 & 2047 | data.get(col, row);
          if (col >= 10 && (bitsRow === 1488 || bitsRow === 93)) points++;
        }
      }
      return points * PenaltyScores.N3;
    };
    exports.getPenaltyN4 = function getPenaltyN4(data) {
      var darkCount = 0;
      var modulesCount = data.data.length;
      for (var i6 = 0; i6 < modulesCount; i6++) darkCount += data.data[i6];
      var k5 = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
      return k5 * PenaltyScores.N4;
    };
    function getMaskAt(maskPattern, i6, j3) {
      switch (maskPattern) {
        case exports.Patterns.PATTERN000:
          return (i6 + j3) % 2 === 0;
        case exports.Patterns.PATTERN001:
          return i6 % 2 === 0;
        case exports.Patterns.PATTERN010:
          return j3 % 3 === 0;
        case exports.Patterns.PATTERN011:
          return (i6 + j3) % 3 === 0;
        case exports.Patterns.PATTERN100:
          return (Math.floor(i6 / 2) + Math.floor(j3 / 3)) % 2 === 0;
        case exports.Patterns.PATTERN101:
          return i6 * j3 % 2 + i6 * j3 % 3 === 0;
        case exports.Patterns.PATTERN110:
          return (i6 * j3 % 2 + i6 * j3 % 3) % 2 === 0;
        case exports.Patterns.PATTERN111:
          return (i6 * j3 % 3 + (i6 + j3) % 2) % 2 === 0;
        default:
          throw new Error("bad maskPattern:" + maskPattern);
      }
    }
    exports.applyMask = function applyMask(pattern, data) {
      var size = data.size;
      for (var col = 0; col < size; col++) {
        for (var row = 0; row < size; row++) {
          if (data.isReserved(row, col)) continue;
          data.xor(row, col, getMaskAt(pattern, row, col));
        }
      }
    };
    exports.getBestMask = function getBestMask(data, setupFormatFunc) {
      var numPatterns = Object.keys(exports.Patterns).length;
      var bestPattern = 0;
      var lowerPenalty = Infinity;
      for (var p4 = 0; p4 < numPatterns; p4++) {
        setupFormatFunc(p4);
        exports.applyMask(p4, data);
        var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);
        exports.applyMask(p4, data);
        if (penalty < lowerPenalty) {
          lowerPenalty = penalty;
          bestPattern = p4;
        }
      }
      return bestPattern;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/error-correction-code.js
var require_error_correction_code = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/error-correction-code.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var ECLevel = require_error_correction_level();
    var EC_BLOCKS_TABLE = [
      // L  M  Q  H
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      1,
      2,
      2,
      4,
      1,
      2,
      4,
      4,
      2,
      4,
      4,
      4,
      2,
      4,
      6,
      5,
      2,
      4,
      6,
      6,
      2,
      5,
      8,
      8,
      4,
      5,
      8,
      8,
      4,
      5,
      8,
      11,
      4,
      8,
      10,
      11,
      4,
      9,
      12,
      16,
      4,
      9,
      16,
      16,
      6,
      10,
      12,
      18,
      6,
      10,
      17,
      16,
      6,
      11,
      16,
      19,
      6,
      13,
      18,
      21,
      7,
      14,
      21,
      25,
      8,
      16,
      20,
      25,
      8,
      17,
      23,
      25,
      9,
      17,
      23,
      34,
      9,
      18,
      25,
      30,
      10,
      20,
      27,
      32,
      12,
      21,
      29,
      35,
      12,
      23,
      34,
      37,
      12,
      25,
      34,
      40,
      13,
      26,
      35,
      42,
      14,
      28,
      38,
      45,
      15,
      29,
      40,
      48,
      16,
      31,
      43,
      51,
      17,
      33,
      45,
      54,
      18,
      35,
      48,
      57,
      19,
      37,
      51,
      60,
      19,
      38,
      53,
      63,
      20,
      40,
      56,
      66,
      21,
      43,
      59,
      70,
      22,
      45,
      62,
      74,
      24,
      47,
      65,
      77,
      25,
      49,
      68,
      81
    ];
    var EC_CODEWORDS_TABLE = [
      // L  M  Q  H
      7,
      10,
      13,
      17,
      10,
      16,
      22,
      28,
      15,
      26,
      36,
      44,
      20,
      36,
      52,
      64,
      26,
      48,
      72,
      88,
      36,
      64,
      96,
      112,
      40,
      72,
      108,
      130,
      48,
      88,
      132,
      156,
      60,
      110,
      160,
      192,
      72,
      130,
      192,
      224,
      80,
      150,
      224,
      264,
      96,
      176,
      260,
      308,
      104,
      198,
      288,
      352,
      120,
      216,
      320,
      384,
      132,
      240,
      360,
      432,
      144,
      280,
      408,
      480,
      168,
      308,
      448,
      532,
      180,
      338,
      504,
      588,
      196,
      364,
      546,
      650,
      224,
      416,
      600,
      700,
      224,
      442,
      644,
      750,
      252,
      476,
      690,
      816,
      270,
      504,
      750,
      900,
      300,
      560,
      810,
      960,
      312,
      588,
      870,
      1050,
      336,
      644,
      952,
      1110,
      360,
      700,
      1020,
      1200,
      390,
      728,
      1050,
      1260,
      420,
      784,
      1140,
      1350,
      450,
      812,
      1200,
      1440,
      480,
      868,
      1290,
      1530,
      510,
      924,
      1350,
      1620,
      540,
      980,
      1440,
      1710,
      570,
      1036,
      1530,
      1800,
      570,
      1064,
      1590,
      1890,
      600,
      1120,
      1680,
      1980,
      630,
      1204,
      1770,
      2100,
      660,
      1260,
      1860,
      2220,
      720,
      1316,
      1950,
      2310,
      750,
      1372,
      2040,
      2430
    ];
    exports.getBlocksCount = function getBlocksCount(version11, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_BLOCKS_TABLE[(version11 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_BLOCKS_TABLE[(version11 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_BLOCKS_TABLE[(version11 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_BLOCKS_TABLE[(version11 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
    exports.getTotalCodewordsCount = function getTotalCodewordsCount(version11, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_CODEWORDS_TABLE[(version11 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_CODEWORDS_TABLE[(version11 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_CODEWORDS_TABLE[(version11 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_CODEWORDS_TABLE[(version11 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/galois-field.js
var require_galois_field = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/galois-field.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BufferUtil = require_typedarray_buffer();
    var EXP_TABLE = BufferUtil.alloc(512);
    var LOG_TABLE = BufferUtil.alloc(256);
    (function initTables() {
      var x6 = 1;
      for (var i6 = 0; i6 < 255; i6++) {
        EXP_TABLE[i6] = x6;
        LOG_TABLE[x6] = i6;
        x6 <<= 1;
        if (x6 & 256) {
          x6 ^= 285;
        }
      }
      for (i6 = 255; i6 < 512; i6++) {
        EXP_TABLE[i6] = EXP_TABLE[i6 - 255];
      }
    })();
    exports.log = function log(n3) {
      if (n3 < 1) throw new Error("log(" + n3 + ")");
      return LOG_TABLE[n3];
    };
    exports.exp = function exp(n3) {
      return EXP_TABLE[n3];
    };
    exports.mul = function mul3(x6, y6) {
      if (x6 === 0 || y6 === 0) return 0;
      return EXP_TABLE[LOG_TABLE[x6] + LOG_TABLE[y6]];
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/polynomial.js
var require_polynomial = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/polynomial.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BufferUtil = require_typedarray_buffer();
    var GF = require_galois_field();
    exports.mul = function mul3(p1, p22) {
      var coeff = BufferUtil.alloc(p1.length + p22.length - 1);
      for (var i6 = 0; i6 < p1.length; i6++) {
        for (var j3 = 0; j3 < p22.length; j3++) {
          coeff[i6 + j3] ^= GF.mul(p1[i6], p22[j3]);
        }
      }
      return coeff;
    };
    exports.mod = function mod(divident, divisor) {
      var result = BufferUtil.from(divident);
      while (result.length - divisor.length >= 0) {
        var coeff = result[0];
        for (var i6 = 0; i6 < divisor.length; i6++) {
          result[i6] ^= GF.mul(divisor[i6], coeff);
        }
        var offset = 0;
        while (offset < result.length && result[offset] === 0) offset++;
        result = result.slice(offset);
      }
      return result;
    };
    exports.generateECPolynomial = function generateECPolynomial(degree) {
      var poly = BufferUtil.from([1]);
      for (var i6 = 0; i6 < degree; i6++) {
        poly = exports.mul(poly, [1, GF.exp(i6)]);
      }
      return poly;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/reed-solomon-encoder.js
var require_reed_solomon_encoder = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/reed-solomon-encoder.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BufferUtil = require_typedarray_buffer();
    var Polynomial = require_polynomial();
    var Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
    function ReedSolomonEncoder(degree) {
      this.genPoly = void 0;
      this.degree = degree;
      if (this.degree) this.initialize(this.degree);
    }
    ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
      this.degree = degree;
      this.genPoly = Polynomial.generateECPolynomial(this.degree);
    };
    ReedSolomonEncoder.prototype.encode = function encode4(data) {
      if (!this.genPoly) {
        throw new Error("Encoder not initialized");
      }
      var pad = BufferUtil.alloc(this.degree);
      var paddedData = Buffer2.concat([data, pad], data.length + this.degree);
      var remainder = Polynomial.mod(paddedData, this.genPoly);
      var start = this.degree - remainder.length;
      if (start > 0) {
        var buff = BufferUtil.alloc(this.degree);
        remainder.copy(buff, start);
        return buff;
      }
      return remainder;
    };
    module.exports = ReedSolomonEncoder;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/version-check.js
var require_version_check = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/version-check.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    exports.isValid = function isValid(version11) {
      return !isNaN(version11) && version11 >= 1 && version11 <= 40;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/regex.js
var require_regex = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/regex.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var numeric = "[0-9]+";
    var alphanumeric = "[A-Z $%*+\\-./:]+";
    var kanji = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
    kanji = kanji.replace(/u/g, "\\u");
    var byte = "(?:(?![A-Z0-9 $%*+\\-./:]|" + kanji + ")(?:.|[\r\n]))+";
    exports.KANJI = new RegExp(kanji, "g");
    exports.BYTE_KANJI = new RegExp("[^A-Z0-9 $%*+\\-./:]+", "g");
    exports.BYTE = new RegExp(byte, "g");
    exports.NUMERIC = new RegExp(numeric, "g");
    exports.ALPHANUMERIC = new RegExp(alphanumeric, "g");
    var TEST_KANJI = new RegExp("^" + kanji + "$");
    var TEST_NUMERIC = new RegExp("^" + numeric + "$");
    var TEST_ALPHANUMERIC = new RegExp("^[A-Z0-9 $%*+\\-./:]+$");
    exports.testKanji = function testKanji(str) {
      return TEST_KANJI.test(str);
    };
    exports.testNumeric = function testNumeric(str) {
      return TEST_NUMERIC.test(str);
    };
    exports.testAlphanumeric = function testAlphanumeric(str) {
      return TEST_ALPHANUMERIC.test(str);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/mode.js
var require_mode = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/mode.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var VersionCheck = require_version_check();
    var Regex = require_regex();
    exports.NUMERIC = {
      id: "Numeric",
      bit: 1 << 0,
      ccBits: [10, 12, 14]
    };
    exports.ALPHANUMERIC = {
      id: "Alphanumeric",
      bit: 1 << 1,
      ccBits: [9, 11, 13]
    };
    exports.BYTE = {
      id: "Byte",
      bit: 1 << 2,
      ccBits: [8, 16, 16]
    };
    exports.KANJI = {
      id: "Kanji",
      bit: 1 << 3,
      ccBits: [8, 10, 12]
    };
    exports.MIXED = {
      bit: -1
    };
    exports.getCharCountIndicator = function getCharCountIndicator(mode, version11) {
      if (!mode.ccBits) throw new Error("Invalid mode: " + mode);
      if (!VersionCheck.isValid(version11)) {
        throw new Error("Invalid version: " + version11);
      }
      if (version11 >= 1 && version11 < 10) return mode.ccBits[0];
      else if (version11 < 27) return mode.ccBits[1];
      return mode.ccBits[2];
    };
    exports.getBestModeForData = function getBestModeForData(dataStr) {
      if (Regex.testNumeric(dataStr)) return exports.NUMERIC;
      else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;
      else if (Regex.testKanji(dataStr)) return exports.KANJI;
      else return exports.BYTE;
    };
    exports.toString = function toString2(mode) {
      if (mode && mode.id) return mode.id;
      throw new Error("Invalid mode");
    };
    exports.isValid = function isValid(mode) {
      return mode && mode.bit && mode.ccBits;
    };
    function fromString2(string) {
      if (typeof string !== "string") {
        throw new Error("Param is not a string");
      }
      var lcStr = string.toLowerCase();
      switch (lcStr) {
        case "numeric":
          return exports.NUMERIC;
        case "alphanumeric":
          return exports.ALPHANUMERIC;
        case "kanji":
          return exports.KANJI;
        case "byte":
          return exports.BYTE;
        default:
          throw new Error("Unknown mode: " + string);
      }
    }
    exports.from = function from(value, defaultValue) {
      if (exports.isValid(value)) {
        return value;
      }
      try {
        return fromString2(value);
      } catch (e3) {
        return defaultValue;
      }
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/version.js
var require_version = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/version.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var Utils = require_utils2();
    var ECCode = require_error_correction_code();
    var ECLevel = require_error_correction_level();
    var Mode = require_mode();
    var VersionCheck = require_version_check();
    var isArray = require_isarray();
    var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
    var G18_BCH = Utils.getBCHDigit(G18);
    function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
      for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    function getReservedBitsCount(mode, version11) {
      return Mode.getCharCountIndicator(mode, version11) + 4;
    }
    function getTotalBitsFromDataArray(segments, version11) {
      var totalBits = 0;
      segments.forEach(function(data) {
        var reservedBits = getReservedBitsCount(data.mode, version11);
        totalBits += reservedBits + data.getBitsLength();
      });
      return totalBits;
    }
    function getBestVersionForMixedData(segments, errorCorrectionLevel) {
      for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
        var length = getTotalBitsFromDataArray(segments, currentVersion);
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    exports.from = function from(value, defaultValue) {
      if (VersionCheck.isValid(value)) {
        return parseInt(value, 10);
      }
      return defaultValue;
    };
    exports.getCapacity = function getCapacity(version11, errorCorrectionLevel, mode) {
      if (!VersionCheck.isValid(version11)) {
        throw new Error("Invalid QR Code version");
      }
      if (typeof mode === "undefined") mode = Mode.BYTE;
      var totalCodewords = Utils.getSymbolTotalCodewords(version11);
      var ecTotalCodewords = ECCode.getTotalCodewordsCount(version11, errorCorrectionLevel);
      var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (mode === Mode.MIXED) return dataTotalCodewordsBits;
      var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version11);
      switch (mode) {
        case Mode.NUMERIC:
          return Math.floor(usableBits / 10 * 3);
        case Mode.ALPHANUMERIC:
          return Math.floor(usableBits / 11 * 2);
        case Mode.KANJI:
          return Math.floor(usableBits / 13);
        case Mode.BYTE:
        default:
          return Math.floor(usableBits / 8);
      }
    };
    exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
      var seg;
      var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);
      if (isArray(data)) {
        if (data.length > 1) {
          return getBestVersionForMixedData(data, ecl);
        }
        if (data.length === 0) {
          return 1;
        }
        seg = data[0];
      } else {
        seg = data;
      }
      return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
    };
    exports.getEncodedBits = function getEncodedBits(version11) {
      if (!VersionCheck.isValid(version11) || version11 < 7) {
        throw new Error("Invalid QR Code version");
      }
      var d4 = version11 << 12;
      while (Utils.getBCHDigit(d4) - G18_BCH >= 0) {
        d4 ^= G18 << Utils.getBCHDigit(d4) - G18_BCH;
      }
      return version11 << 12 | d4;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/format-info.js
var require_format_info = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/format-info.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var Utils = require_utils2();
    var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
    var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
    var G15_BCH = Utils.getBCHDigit(G15);
    exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
      var data = errorCorrectionLevel.bit << 3 | mask;
      var d4 = data << 10;
      while (Utils.getBCHDigit(d4) - G15_BCH >= 0) {
        d4 ^= G15 << Utils.getBCHDigit(d4) - G15_BCH;
      }
      return (data << 10 | d4) ^ G15_MASK;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/numeric-data.js
var require_numeric_data = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/numeric-data.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var Mode = require_mode();
    function NumericData(data) {
      this.mode = Mode.NUMERIC;
      this.data = data.toString();
    }
    NumericData.getBitsLength = function getBitsLength(length) {
      return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);
    };
    NumericData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    NumericData.prototype.getBitsLength = function getBitsLength() {
      return NumericData.getBitsLength(this.data.length);
    };
    NumericData.prototype.write = function write(bitBuffer) {
      var i6, group, value;
      for (i6 = 0; i6 + 3 <= this.data.length; i6 += 3) {
        group = this.data.substr(i6, 3);
        value = parseInt(group, 10);
        bitBuffer.put(value, 10);
      }
      var remainingNum = this.data.length - i6;
      if (remainingNum > 0) {
        group = this.data.substr(i6);
        value = parseInt(group, 10);
        bitBuffer.put(value, remainingNum * 3 + 1);
      }
    };
    module.exports = NumericData;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/alphanumeric-data.js
var require_alphanumeric_data = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/alphanumeric-data.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var Mode = require_mode();
    var ALPHA_NUM_CHARS = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      " ",
      "$",
      "%",
      "*",
      "+",
      "-",
      ".",
      "/",
      ":"
    ];
    function AlphanumericData(data) {
      this.mode = Mode.ALPHANUMERIC;
      this.data = data;
    }
    AlphanumericData.getBitsLength = function getBitsLength(length) {
      return 11 * Math.floor(length / 2) + 6 * (length % 2);
    };
    AlphanumericData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    AlphanumericData.prototype.getBitsLength = function getBitsLength() {
      return AlphanumericData.getBitsLength(this.data.length);
    };
    AlphanumericData.prototype.write = function write(bitBuffer) {
      var i6;
      for (i6 = 0; i6 + 2 <= this.data.length; i6 += 2) {
        var value = ALPHA_NUM_CHARS.indexOf(this.data[i6]) * 45;
        value += ALPHA_NUM_CHARS.indexOf(this.data[i6 + 1]);
        bitBuffer.put(value, 11);
      }
      if (this.data.length % 2) {
        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i6]), 6);
      }
    };
    module.exports = AlphanumericData;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/byte-data.js
var require_byte_data = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/byte-data.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BufferUtil = require_typedarray_buffer();
    var Mode = require_mode();
    function ByteData(data) {
      this.mode = Mode.BYTE;
      this.data = BufferUtil.from(data);
    }
    ByteData.getBitsLength = function getBitsLength(length) {
      return length * 8;
    };
    ByteData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    ByteData.prototype.getBitsLength = function getBitsLength() {
      return ByteData.getBitsLength(this.data.length);
    };
    ByteData.prototype.write = function(bitBuffer) {
      for (var i6 = 0, l3 = this.data.length; i6 < l3; i6++) {
        bitBuffer.put(this.data[i6], 8);
      }
    };
    module.exports = ByteData;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/kanji-data.js
var require_kanji_data = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/kanji-data.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var Mode = require_mode();
    var Utils = require_utils2();
    function KanjiData(data) {
      this.mode = Mode.KANJI;
      this.data = data;
    }
    KanjiData.getBitsLength = function getBitsLength(length) {
      return length * 13;
    };
    KanjiData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    KanjiData.prototype.getBitsLength = function getBitsLength() {
      return KanjiData.getBitsLength(this.data.length);
    };
    KanjiData.prototype.write = function(bitBuffer) {
      var i6;
      for (i6 = 0; i6 < this.data.length; i6++) {
        var value = Utils.toSJIS(this.data[i6]);
        if (value >= 33088 && value <= 40956) {
          value -= 33088;
        } else if (value >= 57408 && value <= 60351) {
          value -= 49472;
        } else {
          throw new Error(
            "Invalid SJIS character: " + this.data[i6] + "\nMake sure your charset is UTF-8"
          );
        }
        value = (value >>> 8 & 255) * 192 + (value & 255);
        bitBuffer.put(value, 13);
      }
    };
    module.exports = KanjiData;
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/segments.js
var require_segments = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/segments.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var Mode = require_mode();
    var NumericData = require_numeric_data();
    var AlphanumericData = require_alphanumeric_data();
    var ByteData = require_byte_data();
    var KanjiData = require_kanji_data();
    var Regex = require_regex();
    var Utils = require_utils2();
    var dijkstra = require_dijkstra();
    function getStringByteLength(str) {
      return unescape(encodeURIComponent(str)).length;
    }
    function getSegments(regex, mode, str) {
      var segments = [];
      var result;
      while ((result = regex.exec(str)) !== null) {
        segments.push({
          data: result[0],
          index: result.index,
          mode,
          length: result[0].length
        });
      }
      return segments;
    }
    function getSegmentsFromString(dataStr) {
      var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
      var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
      var byteSegs;
      var kanjiSegs;
      if (Utils.isKanjiModeEnabled()) {
        byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
        kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
      } else {
        byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
        kanjiSegs = [];
      }
      var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
      return segs.sort(function(s1, s22) {
        return s1.index - s22.index;
      }).map(function(obj) {
        return {
          data: obj.data,
          mode: obj.mode,
          length: obj.length
        };
      });
    }
    function getSegmentBitsLength(length, mode) {
      switch (mode) {
        case Mode.NUMERIC:
          return NumericData.getBitsLength(length);
        case Mode.ALPHANUMERIC:
          return AlphanumericData.getBitsLength(length);
        case Mode.KANJI:
          return KanjiData.getBitsLength(length);
        case Mode.BYTE:
          return ByteData.getBitsLength(length);
      }
    }
    function mergeSegments(segs) {
      return segs.reduce(function(acc, curr) {
        var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
        if (prevSeg && prevSeg.mode === curr.mode) {
          acc[acc.length - 1].data += curr.data;
          return acc;
        }
        acc.push(curr);
        return acc;
      }, []);
    }
    function buildNodes(segs) {
      var nodes = [];
      for (var i6 = 0; i6 < segs.length; i6++) {
        var seg = segs[i6];
        switch (seg.mode) {
          case Mode.NUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.ALPHANUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.KANJI:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
            break;
          case Mode.BYTE:
            nodes.push([
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
        }
      }
      return nodes;
    }
    function buildGraph(nodes, version11) {
      var table = {};
      var graph = { "start": {} };
      var prevNodeIds = ["start"];
      for (var i6 = 0; i6 < nodes.length; i6++) {
        var nodeGroup = nodes[i6];
        var currentNodeIds = [];
        for (var j3 = 0; j3 < nodeGroup.length; j3++) {
          var node = nodeGroup[j3];
          var key2 = "" + i6 + j3;
          currentNodeIds.push(key2);
          table[key2] = { node, lastCount: 0 };
          graph[key2] = {};
          for (var n3 = 0; n3 < prevNodeIds.length; n3++) {
            var prevNodeId = prevNodeIds[n3];
            if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
              graph[prevNodeId][key2] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);
              table[prevNodeId].lastCount += node.length;
            } else {
              if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;
              graph[prevNodeId][key2] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version11);
            }
          }
        }
        prevNodeIds = currentNodeIds;
      }
      for (n3 = 0; n3 < prevNodeIds.length; n3++) {
        graph[prevNodeIds[n3]]["end"] = 0;
      }
      return { map: graph, table };
    }
    function buildSingleSegment(data, modesHint) {
      var mode;
      var bestMode = Mode.getBestModeForData(data);
      mode = Mode.from(modesHint, bestMode);
      if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
        throw new Error('"' + data + '" cannot be encoded with mode ' + Mode.toString(mode) + ".\n Suggested mode is: " + Mode.toString(bestMode));
      }
      if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
        mode = Mode.BYTE;
      }
      switch (mode) {
        case Mode.NUMERIC:
          return new NumericData(data);
        case Mode.ALPHANUMERIC:
          return new AlphanumericData(data);
        case Mode.KANJI:
          return new KanjiData(data);
        case Mode.BYTE:
          return new ByteData(data);
      }
    }
    exports.fromArray = function fromArray(array) {
      return array.reduce(function(acc, seg) {
        if (typeof seg === "string") {
          acc.push(buildSingleSegment(seg, null));
        } else if (seg.data) {
          acc.push(buildSingleSegment(seg.data, seg.mode));
        }
        return acc;
      }, []);
    };
    exports.fromString = function fromString2(data, version11) {
      var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());
      var nodes = buildNodes(segs);
      var graph = buildGraph(nodes, version11);
      var path = dijkstra.find_path(graph.map, "start", "end");
      var optimizedSegs = [];
      for (var i6 = 1; i6 < path.length - 1; i6++) {
        optimizedSegs.push(graph.table[path[i6]].node);
      }
      return exports.fromArray(mergeSegments(optimizedSegs));
    };
    exports.rawSplit = function rawSplit(data) {
      return exports.fromArray(
        getSegmentsFromString(data, Utils.isKanjiModeEnabled())
      );
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/qrcode.js
var require_qrcode = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/core/qrcode.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BufferUtil = require_typedarray_buffer();
    var Utils = require_utils2();
    var ECLevel = require_error_correction_level();
    var BitBuffer = require_bit_buffer();
    var BitMatrix = require_bit_matrix();
    var AlignmentPattern = require_alignment_pattern();
    var FinderPattern = require_finder_pattern();
    var MaskPattern = require_mask_pattern();
    var ECCode = require_error_correction_code();
    var ReedSolomonEncoder = require_reed_solomon_encoder();
    var Version = require_version();
    var FormatInfo = require_format_info();
    var Mode = require_mode();
    var Segments = require_segments();
    var isArray = require_isarray();
    function setupFinderPattern(matrix, version11) {
      var size = matrix.size;
      var pos = FinderPattern.getPositions(version11);
      for (var i6 = 0; i6 < pos.length; i6++) {
        var row = pos[i6][0];
        var col = pos[i6][1];
        for (var r5 = -1; r5 <= 7; r5++) {
          if (row + r5 <= -1 || size <= row + r5) continue;
          for (var c5 = -1; c5 <= 7; c5++) {
            if (col + c5 <= -1 || size <= col + c5) continue;
            if (r5 >= 0 && r5 <= 6 && (c5 === 0 || c5 === 6) || c5 >= 0 && c5 <= 6 && (r5 === 0 || r5 === 6) || r5 >= 2 && r5 <= 4 && c5 >= 2 && c5 <= 4) {
              matrix.set(row + r5, col + c5, true, true);
            } else {
              matrix.set(row + r5, col + c5, false, true);
            }
          }
        }
      }
    }
    function setupTimingPattern(matrix) {
      var size = matrix.size;
      for (var r5 = 8; r5 < size - 8; r5++) {
        var value = r5 % 2 === 0;
        matrix.set(r5, 6, value, true);
        matrix.set(6, r5, value, true);
      }
    }
    function setupAlignmentPattern(matrix, version11) {
      var pos = AlignmentPattern.getPositions(version11);
      for (var i6 = 0; i6 < pos.length; i6++) {
        var row = pos[i6][0];
        var col = pos[i6][1];
        for (var r5 = -2; r5 <= 2; r5++) {
          for (var c5 = -2; c5 <= 2; c5++) {
            if (r5 === -2 || r5 === 2 || c5 === -2 || c5 === 2 || r5 === 0 && c5 === 0) {
              matrix.set(row + r5, col + c5, true, true);
            } else {
              matrix.set(row + r5, col + c5, false, true);
            }
          }
        }
      }
    }
    function setupVersionInfo(matrix, version11) {
      var size = matrix.size;
      var bits = Version.getEncodedBits(version11);
      var row, col, mod;
      for (var i6 = 0; i6 < 18; i6++) {
        row = Math.floor(i6 / 3);
        col = i6 % 3 + size - 8 - 3;
        mod = (bits >> i6 & 1) === 1;
        matrix.set(row, col, mod, true);
        matrix.set(col, row, mod, true);
      }
    }
    function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
      var size = matrix.size;
      var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
      var i6, mod;
      for (i6 = 0; i6 < 15; i6++) {
        mod = (bits >> i6 & 1) === 1;
        if (i6 < 6) {
          matrix.set(i6, 8, mod, true);
        } else if (i6 < 8) {
          matrix.set(i6 + 1, 8, mod, true);
        } else {
          matrix.set(size - 15 + i6, 8, mod, true);
        }
        if (i6 < 8) {
          matrix.set(8, size - i6 - 1, mod, true);
        } else if (i6 < 9) {
          matrix.set(8, 15 - i6 - 1 + 1, mod, true);
        } else {
          matrix.set(8, 15 - i6 - 1, mod, true);
        }
      }
      matrix.set(size - 8, 8, 1, true);
    }
    function setupData(matrix, data) {
      var size = matrix.size;
      var inc = -1;
      var row = size - 1;
      var bitIndex = 7;
      var byteIndex = 0;
      for (var col = size - 1; col > 0; col -= 2) {
        if (col === 6) col--;
        while (true) {
          for (var c5 = 0; c5 < 2; c5++) {
            if (!matrix.isReserved(row, col - c5)) {
              var dark = false;
              if (byteIndex < data.length) {
                dark = (data[byteIndex] >>> bitIndex & 1) === 1;
              }
              matrix.set(row, col - c5, dark);
              bitIndex--;
              if (bitIndex === -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }
          row += inc;
          if (row < 0 || size <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    }
    function createData(version11, errorCorrectionLevel, segments) {
      var buffer = new BitBuffer();
      segments.forEach(function(data) {
        buffer.put(data.mode.bit, 4);
        buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version11));
        data.write(buffer);
      });
      var totalCodewords = Utils.getSymbolTotalCodewords(version11);
      var ecTotalCodewords = ECCode.getTotalCodewordsCount(version11, errorCorrectionLevel);
      var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
        buffer.put(0, 4);
      }
      while (buffer.getLengthInBits() % 8 !== 0) {
        buffer.putBit(0);
      }
      var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
      for (var i6 = 0; i6 < remainingByte; i6++) {
        buffer.put(i6 % 2 ? 17 : 236, 8);
      }
      return createCodewords(buffer, version11, errorCorrectionLevel);
    }
    function createCodewords(bitBuffer, version11, errorCorrectionLevel) {
      var totalCodewords = Utils.getSymbolTotalCodewords(version11);
      var ecTotalCodewords = ECCode.getTotalCodewordsCount(version11, errorCorrectionLevel);
      var dataTotalCodewords = totalCodewords - ecTotalCodewords;
      var ecTotalBlocks = ECCode.getBlocksCount(version11, errorCorrectionLevel);
      var blocksInGroup2 = totalCodewords % ecTotalBlocks;
      var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
      var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
      var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
      var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;
      var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;
      var rs = new ReedSolomonEncoder(ecCount);
      var offset = 0;
      var dcData = new Array(ecTotalBlocks);
      var ecData = new Array(ecTotalBlocks);
      var maxDataSize = 0;
      var buffer = BufferUtil.from(bitBuffer.buffer);
      for (var b4 = 0; b4 < ecTotalBlocks; b4++) {
        var dataSize = b4 < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;
        dcData[b4] = buffer.slice(offset, offset + dataSize);
        ecData[b4] = rs.encode(dcData[b4]);
        offset += dataSize;
        maxDataSize = Math.max(maxDataSize, dataSize);
      }
      var data = BufferUtil.alloc(totalCodewords);
      var index = 0;
      var i6, r5;
      for (i6 = 0; i6 < maxDataSize; i6++) {
        for (r5 = 0; r5 < ecTotalBlocks; r5++) {
          if (i6 < dcData[r5].length) {
            data[index++] = dcData[r5][i6];
          }
        }
      }
      for (i6 = 0; i6 < ecCount; i6++) {
        for (r5 = 0; r5 < ecTotalBlocks; r5++) {
          data[index++] = ecData[r5][i6];
        }
      }
      return data;
    }
    function createSymbol(data, version11, errorCorrectionLevel, maskPattern) {
      var segments;
      if (isArray(data)) {
        segments = Segments.fromArray(data);
      } else if (typeof data === "string") {
        var estimatedVersion = version11;
        if (!estimatedVersion) {
          var rawSegments = Segments.rawSplit(data);
          estimatedVersion = Version.getBestVersionForData(
            rawSegments,
            errorCorrectionLevel
          );
        }
        segments = Segments.fromString(data, estimatedVersion || 40);
      } else {
        throw new Error("Invalid data");
      }
      var bestVersion = Version.getBestVersionForData(
        segments,
        errorCorrectionLevel
      );
      if (!bestVersion) {
        throw new Error("The amount of data is too big to be stored in a QR Code");
      }
      if (!version11) {
        version11 = bestVersion;
      } else if (version11 < bestVersion) {
        throw new Error(
          "\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " + bestVersion + ".\n"
        );
      }
      var dataBits = createData(version11, errorCorrectionLevel, segments);
      var moduleCount = Utils.getSymbolSize(version11);
      var modules = new BitMatrix(moduleCount);
      setupFinderPattern(modules, version11);
      setupTimingPattern(modules);
      setupAlignmentPattern(modules, version11);
      setupFormatInfo(modules, errorCorrectionLevel, 0);
      if (version11 >= 7) {
        setupVersionInfo(modules, version11);
      }
      setupData(modules, dataBits);
      if (isNaN(maskPattern)) {
        maskPattern = MaskPattern.getBestMask(
          modules,
          setupFormatInfo.bind(null, modules, errorCorrectionLevel)
        );
      }
      MaskPattern.applyMask(maskPattern, modules);
      setupFormatInfo(modules, errorCorrectionLevel, maskPattern);
      return {
        modules,
        version: version11,
        errorCorrectionLevel,
        maskPattern,
        segments
      };
    }
    exports.create = function create(data, options) {
      if (typeof data === "undefined" || data === "") {
        throw new Error("No input text");
      }
      var errorCorrectionLevel = ECLevel.M;
      var version11;
      var mask;
      if (typeof options !== "undefined") {
        errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
        version11 = Version.from(options.version);
        mask = MaskPattern.from(options.maskPattern);
        if (options.toSJISFunc) {
          Utils.setToSJISFunction(options.toSJISFunc);
        }
      }
      return createSymbol(data, version11, errorCorrectionLevel, mask);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/utils.js
var require_utils3 = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/utils.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    function hex2rgba(hex) {
      if (typeof hex === "number") {
        hex = hex.toString();
      }
      if (typeof hex !== "string") {
        throw new Error("Color should be defined as hex string");
      }
      var hexCode = hex.slice().replace("#", "").split("");
      if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
        throw new Error("Invalid hex color: " + hex);
      }
      if (hexCode.length === 3 || hexCode.length === 4) {
        hexCode = Array.prototype.concat.apply([], hexCode.map(function(c5) {
          return [c5, c5];
        }));
      }
      if (hexCode.length === 6) hexCode.push("F", "F");
      var hexValue = parseInt(hexCode.join(""), 16);
      return {
        r: hexValue >> 24 & 255,
        g: hexValue >> 16 & 255,
        b: hexValue >> 8 & 255,
        a: hexValue & 255,
        hex: "#" + hexCode.slice(0, 6).join("")
      };
    }
    exports.getOptions = function getOptions(options) {
      if (!options) options = {};
      if (!options.color) options.color = {};
      var margin = typeof options.margin === "undefined" || options.margin === null || options.margin < 0 ? 4 : options.margin;
      var width = options.width && options.width >= 21 ? options.width : void 0;
      var scale = options.scale || 4;
      return {
        width,
        scale: width ? 4 : scale,
        margin,
        color: {
          dark: hex2rgba(options.color.dark || "#000000ff"),
          light: hex2rgba(options.color.light || "#ffffffff")
        },
        type: options.type,
        rendererOpts: options.rendererOpts || {}
      };
    };
    exports.getScale = function getScale(qrSize, opts) {
      return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
    };
    exports.getImageWidth = function getImageWidth(qrSize, opts) {
      var scale = exports.getScale(qrSize, opts);
      return Math.floor((qrSize + opts.margin * 2) * scale);
    };
    exports.qrToImageData = function qrToImageData(imgData, qr2, opts) {
      var size = qr2.modules.size;
      var data = qr2.modules.data;
      var scale = exports.getScale(size, opts);
      var symbolSize = Math.floor((size + opts.margin * 2) * scale);
      var scaledMargin = opts.margin * scale;
      var palette = [opts.color.light, opts.color.dark];
      for (var i6 = 0; i6 < symbolSize; i6++) {
        for (var j3 = 0; j3 < symbolSize; j3++) {
          var posDst = (i6 * symbolSize + j3) * 4;
          var pxColor = opts.color.light;
          if (i6 >= scaledMargin && j3 >= scaledMargin && i6 < symbolSize - scaledMargin && j3 < symbolSize - scaledMargin) {
            var iSrc = Math.floor((i6 - scaledMargin) / scale);
            var jSrc = Math.floor((j3 - scaledMargin) / scale);
            pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
          }
          imgData[posDst++] = pxColor.r;
          imgData[posDst++] = pxColor.g;
          imgData[posDst++] = pxColor.b;
          imgData[posDst] = pxColor.a;
        }
      }
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/canvas.js
var require_canvas = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/canvas.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var Utils = require_utils3();
    function clearCanvas(ctx, canvas, size) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (!canvas.style) canvas.style = {};
      canvas.height = size;
      canvas.width = size;
      canvas.style.height = size + "px";
      canvas.style.width = size + "px";
    }
    function getCanvasElement() {
      try {
        return document.createElement("canvas");
      } catch (e3) {
        throw new Error("You need to specify a canvas element");
      }
    }
    exports.render = function render(qrData, canvas, options) {
      var opts = options;
      var canvasEl = canvas;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!canvas) {
        canvasEl = getCanvasElement();
      }
      opts = Utils.getOptions(opts);
      var size = Utils.getImageWidth(qrData.modules.size, opts);
      var ctx = canvasEl.getContext("2d");
      var image = ctx.createImageData(size, size);
      Utils.qrToImageData(image.data, qrData, opts);
      clearCanvas(ctx, canvasEl, size);
      ctx.putImageData(image, 0, 0);
      return canvasEl;
    };
    exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
      var opts = options;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!opts) opts = {};
      var canvasEl = exports.render(qrData, canvas, opts);
      var type = opts.type || "image/png";
      var rendererOpts = opts.rendererOpts || {};
      return canvasEl.toDataURL(type, rendererOpts.quality);
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/svg-tag.js
var require_svg_tag = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/renderer/svg-tag.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var Utils = require_utils3();
    function getColorAttrib(color, attrib) {
      var alpha = color.a / 255;
      var str = attrib + '="' + color.hex + '"';
      return alpha < 1 ? str + " " + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
    }
    function svgCmd(cmd, x6, y6) {
      var str = cmd + x6;
      if (typeof y6 !== "undefined") str += " " + y6;
      return str;
    }
    function qrToPath(data, size, margin) {
      var path = "";
      var moveBy = 0;
      var newRow = false;
      var lineLength = 0;
      for (var i6 = 0; i6 < data.length; i6++) {
        var col = Math.floor(i6 % size);
        var row = Math.floor(i6 / size);
        if (!col && !newRow) newRow = true;
        if (data[i6]) {
          lineLength++;
          if (!(i6 > 0 && col > 0 && data[i6 - 1])) {
            path += newRow ? svgCmd("M", col + margin, 0.5 + row + margin) : svgCmd("m", moveBy, 0);
            moveBy = 0;
            newRow = false;
          }
          if (!(col + 1 < size && data[i6 + 1])) {
            path += svgCmd("h", lineLength);
            lineLength = 0;
          }
        } else {
          moveBy++;
        }
      }
      return path;
    }
    exports.render = function render(qrData, options, cb) {
      var opts = Utils.getOptions(options);
      var size = qrData.modules.size;
      var data = qrData.modules.data;
      var qrcodesize = size + opts.margin * 2;
      var bg = !opts.color.light.a ? "" : "<path " + getColorAttrib(opts.color.light, "fill") + ' d="M0 0h' + qrcodesize + "v" + qrcodesize + 'H0z"/>';
      var path = "<path " + getColorAttrib(opts.color.dark, "stroke") + ' d="' + qrToPath(data, size, opts.margin) + '"/>';
      var viewBox = 'viewBox="0 0 ' + qrcodesize + " " + qrcodesize + '"';
      var width = !opts.width ? "" : 'width="' + opts.width + '" height="' + opts.width + '" ';
      var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + "</svg>\n";
      if (typeof cb === "function") {
        cb(null, svgTag);
      }
      return svgTag;
    };
  }
});

// node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/browser.js
var require_browser = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/node_modules/qrcode/lib/browser.js"(exports) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var canPromise = require_can_promise();
    var QRCode = require_qrcode();
    var CanvasRenderer = require_canvas();
    var SvgRenderer = require_svg_tag();
    function renderCanvas(renderFunc, canvas, text, opts, cb) {
      var args = [].slice.call(arguments, 1);
      var argsNum = args.length;
      var isLastArgCb = typeof args[argsNum - 1] === "function";
      if (!isLastArgCb && !canPromise()) {
        throw new Error("Callback required as last argument");
      }
      if (isLastArgCb) {
        if (argsNum < 2) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 2) {
          cb = text;
          text = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 3) {
          if (canvas.getContext && typeof cb === "undefined") {
            cb = opts;
            opts = void 0;
          } else {
            cb = opts;
            opts = text;
            text = canvas;
            canvas = void 0;
          }
        }
      } else {
        if (argsNum < 1) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 1) {
          text = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 2 && !canvas.getContext) {
          opts = text;
          text = canvas;
          canvas = void 0;
        }
        return new Promise(function(resolve, reject) {
          try {
            var data2 = QRCode.create(text, opts);
            resolve(renderFunc(data2, canvas, opts));
          } catch (e3) {
            reject(e3);
          }
        });
      }
      try {
        var data = QRCode.create(text, opts);
        cb(null, renderFunc(data, canvas, opts));
      } catch (e3) {
        cb(e3);
      }
    }
    exports.create = QRCode.create;
    exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
    exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);
    exports.toString = renderCanvas.bind(null, function(data, _5, opts) {
      return SvgRenderer.render(data, opts);
    });
  }
});

// node_modules/toggle-selection/index.js
var require_toggle_selection = __commonJS({
  "node_modules/toggle-selection/index.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    module.exports = function() {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function() {
        };
      }
      var active = document.activeElement;
      var ranges = [];
      for (var i6 = 0; i6 < selection.rangeCount; i6++) {
        ranges.push(selection.getRangeAt(i6));
      }
      switch (active.tagName.toUpperCase()) {
        case "INPUT":
        case "TEXTAREA":
          active.blur();
          break;
        default:
          active = null;
          break;
      }
      selection.removeAllRanges();
      return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) {
          ranges.forEach(function(range) {
            selection.addRange(range);
          });
        }
        active && active.focus();
      };
    };
  }
});

// node_modules/copy-to-clipboard/index.js
var require_copy_to_clipboard = __commonJS({
  "node_modules/copy-to-clipboard/index.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var deselectCurrent = require_toggle_selection();
    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };
    var defaultMessage = "Copy to clipboard: #{key}, Enter";
    function format(message) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
      return message.replace(/#{\s*key\s*}/g, copyKey);
    }
    function copy(text, options) {
      var debug, message, reselectPrevious, range, selection, mark, success = false;
      if (!options) {
        options = {};
      }
      debug = options.debug || false;
      try {
        reselectPrevious = deselectCurrent();
        range = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text;
        mark.ariaHidden = "true";
        mark.style.all = "unset";
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        mark.style.whiteSpace = "pre";
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e3) {
          e3.stopPropagation();
          if (options.format) {
            e3.preventDefault();
            if (typeof e3.clipboardData === "undefined") {
              debug && console.warn("unable to use e.clipboardData");
              debug && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format2 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format2, text);
            } else {
              e3.clipboardData.clearData();
              e3.clipboardData.setData(options.format, text);
            }
          }
          if (options.onCopy) {
            e3.preventDefault();
            options.onCopy(e3.clipboardData);
          }
        });
        document.body.appendChild(mark);
        range.selectNodeContents(mark);
        selection.addRange(range);
        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options.format || "text", text);
          options.onCopy && options.onCopy(window.clipboardData);
          success = true;
        } catch (err2) {
          debug && console.error("unable to copy using clipboardData: ", err2);
          debug && console.error("falling back to prompt");
          message = format("message" in options ? options.message : defaultMessage);
          window.prompt(message, text);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range);
          } else {
            selection.removeAllRanges();
          }
        }
        if (mark) {
          document.body.removeChild(mark);
        }
        reselectPrevious();
      }
      return success;
    }
    module.exports = copy;
  }
});

// node_modules/preact/dist/preact.module.js
function a(n3, l3) {
  for (var u4 in l3) n3[u4] = l3[u4];
  return n3;
}
function v(n3) {
  var l3 = n3.parentNode;
  l3 && l3.removeChild(n3);
}
function h2(n3, l3, u4) {
  var i6, t3 = arguments, r5 = {};
  for (i6 in l3) "key" !== i6 && "ref" !== i6 && (r5[i6] = l3[i6]);
  if (arguments.length > 3) for (u4 = [u4], i6 = 3; i6 < arguments.length; i6++) u4.push(t3[i6]);
  if (null != u4 && (r5.children = u4), "function" == typeof n3 && null != n3.defaultProps) for (i6 in n3.defaultProps) void 0 === r5[i6] && (r5[i6] = n3.defaultProps[i6]);
  return p(n3, r5, l3 && l3.key, l3 && l3.ref, null);
}
function p(l3, u4, i6, t3, r5) {
  var o4 = { type: l3, props: u4, key: i6, ref: t3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: r5 };
  return null == r5 && (o4.__v = o4), n.vnode && n.vnode(o4), o4;
}
function y2() {
  return {};
}
function d(n3) {
  return n3.children;
}
function m(n3, l3) {
  this.props = n3, this.context = l3;
}
function w(n3, l3) {
  if (null == l3) return n3.__ ? w(n3.__, n3.__.__k.indexOf(n3) + 1) : null;
  for (var u4; l3 < n3.__k.length; l3++) if (null != (u4 = n3.__k[l3]) && null != u4.__e) return u4.__e;
  return "function" == typeof n3.type ? w(n3) : null;
}
function k2(n3) {
  var l3, u4;
  if (null != (n3 = n3.__) && null != n3.__c) {
    for (n3.__e = n3.__c.base = null, l3 = 0; l3 < n3.__k.length; l3++) if (null != (u4 = n3.__k[l3]) && null != u4.__e) {
      n3.__e = n3.__c.base = u4.__e;
      break;
    }
    return k2(n3);
  }
}
function g(l3) {
  (!l3.__d && (l3.__d = true) && u.push(l3) && !i2++ || r2 !== n.debounceRendering) && ((r2 = n.debounceRendering) || t)(_);
}
function _() {
  for (var n3; i2 = u.length; ) n3 = u.sort(function(n4, l3) {
    return n4.__v.__b - l3.__v.__b;
  }), u = [], n3.some(function(n4) {
    var l3, u4, i6, t3, r5, o4, f5;
    n4.__d && (o4 = (r5 = (l3 = n4).__v).__e, (f5 = l3.__P) && (u4 = [], (i6 = a({}, r5)).__v = i6, t3 = A2(f5, r5, i6, l3.__n, void 0 !== f5.ownerSVGElement, null, u4, null == o4 ? w(r5) : o4), T(u4, r5), t3 != o4 && k2(r5)));
  });
}
function b(n3, l3, u4, i6, t3, r5, o4, f5, s3) {
  var a4, h5, p4, y6, d4, m3, k5, g5 = u4 && u4.__k || c, _5 = g5.length;
  if (f5 == e && (f5 = null != r5 ? r5[0] : _5 ? w(u4, 0) : null), a4 = 0, l3.__k = x(l3.__k, function(u5) {
    if (null != u5) {
      if (u5.__ = l3, u5.__b = l3.__b + 1, null === (p4 = g5[a4]) || p4 && u5.key == p4.key && u5.type === p4.type) g5[a4] = void 0;
      else for (h5 = 0; h5 < _5; h5++) {
        if ((p4 = g5[h5]) && u5.key == p4.key && u5.type === p4.type) {
          g5[h5] = void 0;
          break;
        }
        p4 = null;
      }
      if (y6 = A2(n3, u5, p4 = p4 || e, i6, t3, r5, o4, f5, s3), (h5 = u5.ref) && p4.ref != h5 && (k5 || (k5 = []), p4.ref && k5.push(p4.ref, null, u5), k5.push(h5, u5.__c || y6, u5)), null != y6) {
        var c5;
        if (null == m3 && (m3 = y6), void 0 !== u5.__d) c5 = u5.__d, u5.__d = void 0;
        else if (r5 == p4 || y6 != f5 || null == y6.parentNode) {
          n: if (null == f5 || f5.parentNode !== n3) n3.appendChild(y6), c5 = null;
          else {
            for (d4 = f5, h5 = 0; (d4 = d4.nextSibling) && h5 < _5; h5 += 2) if (d4 == y6) break n;
            n3.insertBefore(y6, f5), c5 = f5;
          }
          "option" == l3.type && (n3.value = "");
        }
        f5 = void 0 !== c5 ? c5 : y6.nextSibling, "function" == typeof l3.type && (l3.__d = f5);
      } else f5 && p4.__e == f5 && f5.parentNode != n3 && (f5 = w(p4));
    }
    return a4++, u5;
  }), l3.__e = m3, null != r5 && "function" != typeof l3.type) for (a4 = r5.length; a4--; ) null != r5[a4] && v(r5[a4]);
  for (a4 = _5; a4--; ) null != g5[a4] && D(g5[a4], g5[a4]);
  if (k5) for (a4 = 0; a4 < k5.length; a4++) j(k5[a4], k5[++a4], k5[++a4]);
}
function x(n3, l3, u4) {
  if (null == u4 && (u4 = []), null == n3 || "boolean" == typeof n3) l3 && u4.push(l3(null));
  else if (Array.isArray(n3)) for (var i6 = 0; i6 < n3.length; i6++) x(n3[i6], l3, u4);
  else u4.push(l3 ? l3("string" == typeof n3 || "number" == typeof n3 ? p(null, n3, null, null, n3) : null != n3.__e || null != n3.__c ? p(n3.type, n3.props, n3.key, null, n3.__v) : n3) : n3);
  return u4;
}
function P(n3, l3, u4, i6, t3) {
  var r5;
  for (r5 in u4) "children" === r5 || "key" === r5 || r5 in l3 || N(n3, r5, null, u4[r5], i6);
  for (r5 in l3) t3 && "function" != typeof l3[r5] || "children" === r5 || "key" === r5 || "value" === r5 || "checked" === r5 || u4[r5] === l3[r5] || N(n3, r5, l3[r5], u4[r5], i6);
}
function C2(n3, l3, u4) {
  "-" === l3[0] ? n3.setProperty(l3, u4) : n3[l3] = "number" == typeof u4 && false === s.test(l3) ? u4 + "px" : null == u4 ? "" : u4;
}
function N(n3, l3, u4, i6, t3) {
  var r5, o4, f5, e3, c5;
  if (t3 ? "className" === l3 && (l3 = "class") : "class" === l3 && (l3 = "className"), "style" === l3) if (r5 = n3.style, "string" == typeof u4) r5.cssText = u4;
  else {
    if ("string" == typeof i6 && (r5.cssText = "", i6 = null), i6) for (e3 in i6) u4 && e3 in u4 || C2(r5, e3, "");
    if (u4) for (c5 in u4) i6 && u4[c5] === i6[c5] || C2(r5, c5, u4[c5]);
  }
  else "o" === l3[0] && "n" === l3[1] ? (o4 = l3 !== (l3 = l3.replace(/Capture$/, "")), f5 = l3.toLowerCase(), l3 = (f5 in n3 ? f5 : l3).slice(2), u4 ? (i6 || n3.addEventListener(l3, z, o4), (n3.l || (n3.l = {}))[l3] = u4) : n3.removeEventListener(l3, z, o4)) : "list" !== l3 && "tagName" !== l3 && "form" !== l3 && "type" !== l3 && "size" !== l3 && !t3 && l3 in n3 ? n3[l3] = null == u4 ? "" : u4 : "function" != typeof u4 && "dangerouslySetInnerHTML" !== l3 && (l3 !== (l3 = l3.replace(/^xlink:?/, "")) ? null == u4 || false === u4 ? n3.removeAttributeNS("http://www.w3.org/1999/xlink", l3.toLowerCase()) : n3.setAttributeNS("http://www.w3.org/1999/xlink", l3.toLowerCase(), u4) : null == u4 || false === u4 && !/^ar/.test(l3) ? n3.removeAttribute(l3) : n3.setAttribute(l3, u4));
}
function z(l3) {
  this.l[l3.type](n.event ? n.event(l3) : l3);
}
function A2(l3, u4, i6, t3, r5, o4, f5, e3, c5) {
  var s3, v6, h5, p4, y6, w5, k5, g5, _5, x6, P5 = u4.type;
  if (void 0 !== u4.constructor) return null;
  (s3 = n.__b) && s3(u4);
  try {
    n: if ("function" == typeof P5) {
      if (g5 = u4.props, _5 = (s3 = P5.contextType) && t3[s3.__c], x6 = s3 ? _5 ? _5.props.value : s3.__ : t3, i6.__c ? k5 = (v6 = u4.__c = i6.__c).__ = v6.__E : ("prototype" in P5 && P5.prototype.render ? u4.__c = v6 = new P5(g5, x6) : (u4.__c = v6 = new m(g5, x6), v6.constructor = P5, v6.render = E2), _5 && _5.sub(v6), v6.props = g5, v6.state || (v6.state = {}), v6.context = x6, v6.__n = t3, h5 = v6.__d = true, v6.__h = []), null == v6.__s && (v6.__s = v6.state), null != P5.getDerivedStateFromProps && (v6.__s == v6.state && (v6.__s = a({}, v6.__s)), a(v6.__s, P5.getDerivedStateFromProps(g5, v6.__s))), p4 = v6.props, y6 = v6.state, h5) null == P5.getDerivedStateFromProps && null != v6.componentWillMount && v6.componentWillMount(), null != v6.componentDidMount && v6.__h.push(v6.componentDidMount);
      else {
        if (null == P5.getDerivedStateFromProps && g5 !== p4 && null != v6.componentWillReceiveProps && v6.componentWillReceiveProps(g5, x6), !v6.__e && null != v6.shouldComponentUpdate && false === v6.shouldComponentUpdate(g5, v6.__s, x6) || u4.__v === i6.__v && !v6.__) {
          for (v6.props = g5, v6.state = v6.__s, u4.__v !== i6.__v && (v6.__d = false), v6.__v = u4, u4.__e = i6.__e, u4.__k = i6.__k, v6.__h.length && f5.push(v6), s3 = 0; s3 < u4.__k.length; s3++) u4.__k[s3] && (u4.__k[s3].__ = u4);
          break n;
        }
        null != v6.componentWillUpdate && v6.componentWillUpdate(g5, v6.__s, x6), null != v6.componentDidUpdate && v6.__h.push(function() {
          v6.componentDidUpdate(p4, y6, w5);
        });
      }
      v6.context = x6, v6.props = g5, v6.state = v6.__s, (s3 = n.__r) && s3(u4), v6.__d = false, v6.__v = u4, v6.__P = l3, s3 = v6.render(v6.props, v6.state, v6.context), u4.__k = null != s3 && s3.type == d && null == s3.key ? s3.props.children : Array.isArray(s3) ? s3 : [s3], null != v6.getChildContext && (t3 = a(a({}, t3), v6.getChildContext())), h5 || null == v6.getSnapshotBeforeUpdate || (w5 = v6.getSnapshotBeforeUpdate(p4, y6)), b(l3, u4, i6, t3, r5, o4, f5, e3, c5), v6.base = u4.__e, v6.__h.length && f5.push(v6), k5 && (v6.__E = v6.__ = null), v6.__e = false;
    } else null == o4 && u4.__v === i6.__v ? (u4.__k = i6.__k, u4.__e = i6.__e) : u4.__e = $(i6.__e, u4, i6, t3, r5, o4, f5, c5);
    (s3 = n.diffed) && s3(u4);
  } catch (l4) {
    u4.__v = null, n.__e(l4, u4, i6);
  }
  return u4.__e;
}
function T(l3, u4) {
  n.__c && n.__c(u4, l3), l3.some(function(u5) {
    try {
      l3 = u5.__h, u5.__h = [], l3.some(function(n3) {
        n3.call(u5);
      });
    } catch (l4) {
      n.__e(l4, u5.__v);
    }
  });
}
function $(n3, l3, u4, i6, t3, r5, o4, f5) {
  var s3, a4, v6, h5, p4, y6 = u4.props, d4 = l3.props;
  if (t3 = "svg" === l3.type || t3, null != r5) {
    for (s3 = 0; s3 < r5.length; s3++) if (null != (a4 = r5[s3]) && ((null === l3.type ? 3 === a4.nodeType : a4.localName === l3.type) || n3 == a4)) {
      n3 = a4, r5[s3] = null;
      break;
    }
  }
  if (null == n3) {
    if (null === l3.type) return document.createTextNode(d4);
    n3 = t3 ? document.createElementNS("http://www.w3.org/2000/svg", l3.type) : document.createElement(l3.type, d4.is && { is: d4.is }), r5 = null, f5 = false;
  }
  if (null === l3.type) y6 !== d4 && n3.data != d4 && (n3.data = d4);
  else {
    if (null != r5 && (r5 = c.slice.call(n3.childNodes)), v6 = (y6 = u4.props || e).dangerouslySetInnerHTML, h5 = d4.dangerouslySetInnerHTML, !f5) {
      if (y6 === e) for (y6 = {}, p4 = 0; p4 < n3.attributes.length; p4++) y6[n3.attributes[p4].name] = n3.attributes[p4].value;
      (h5 || v6) && (h5 && v6 && h5.__html == v6.__html || (n3.innerHTML = h5 && h5.__html || ""));
    }
    P(n3, d4, y6, t3, f5), h5 ? l3.__k = [] : (l3.__k = l3.props.children, b(n3, l3, u4, i6, "foreignObject" !== l3.type && t3, r5, o4, e, f5)), f5 || ("value" in d4 && void 0 !== (s3 = d4.value) && s3 !== n3.value && N(n3, "value", s3, y6.value, false), "checked" in d4 && void 0 !== (s3 = d4.checked) && s3 !== n3.checked && N(n3, "checked", s3, y6.checked, false));
  }
  return n3;
}
function j(l3, u4, i6) {
  try {
    "function" == typeof l3 ? l3(u4) : l3.current = u4;
  } catch (l4) {
    n.__e(l4, i6);
  }
}
function D(l3, u4, i6) {
  var t3, r5, o4;
  if (n.unmount && n.unmount(l3), (t3 = l3.ref) && (t3.current && t3.current !== l3.__e || j(t3, null, u4)), i6 || "function" == typeof l3.type || (i6 = null != (r5 = l3.__e)), l3.__e = l3.__d = void 0, null != (t3 = l3.__c)) {
    if (t3.componentWillUnmount) try {
      t3.componentWillUnmount();
    } catch (l4) {
      n.__e(l4, u4);
    }
    t3.base = t3.__P = null;
  }
  if (t3 = l3.__k) for (o4 = 0; o4 < t3.length; o4++) t3[o4] && D(t3[o4], u4, i6);
  null != r5 && v(r5);
}
function E2(n3, l3, u4) {
  return this.constructor(n3, u4);
}
function H(l3, u4, i6) {
  var t3, r5, f5;
  n.__ && n.__(l3, u4), r5 = (t3 = i6 === o2) ? null : i6 && i6.__k || u4.__k, l3 = h2(d, null, [l3]), f5 = [], A2(u4, (t3 ? u4 : i6 || u4).__k = l3, r5 || e, e, void 0 !== u4.ownerSVGElement, i6 && !t3 ? [i6] : r5 ? null : c.slice.call(u4.childNodes), f5, i6 || e, t3), T(f5, l3);
}
function I(n3, l3) {
  H(n3, l3, o2);
}
function L(n3, l3) {
  var u4, i6;
  for (i6 in l3 = a(a({}, n3.props), l3), arguments.length > 2 && (l3.children = c.slice.call(arguments, 2)), u4 = {}, l3) "key" !== i6 && "ref" !== i6 && (u4[i6] = l3[i6]);
  return p(n3.type, u4, l3.key || n3.key, l3.ref || n3.ref, null);
}
function M(n3) {
  var l3 = {}, u4 = { __c: "__cC" + f2++, __: n3, Consumer: function(n4, l4) {
    return n4.children(l4);
  }, Provider: function(n4) {
    var i6, t3 = this;
    return this.getChildContext || (i6 = [], this.getChildContext = function() {
      return l3[u4.__c] = t3, l3;
    }, this.shouldComponentUpdate = function(n5) {
      t3.props.value !== n5.value && i6.some(function(l4) {
        l4.context = n5.value, g(l4);
      });
    }, this.sub = function(n5) {
      i6.push(n5);
      var l4 = n5.componentWillUnmount;
      n5.componentWillUnmount = function() {
        i6.splice(i6.indexOf(n5), 1), l4 && l4.call(n5);
      };
    }), n4.children;
  } };
  return u4.Consumer.contextType = u4, u4.Provider.__ = u4, u4;
}
var import_dist25, import_dist26, import_dist27, n, l, u, i2, t, r2, o2, f2, e, c, s;
var init_preact_module = __esm({
  "node_modules/preact/dist/preact.module.js"() {
    import_dist25 = __toESM(require_dist());
    import_dist26 = __toESM(require_dist2());
    import_dist27 = __toESM(require_dist3());
    e = {};
    c = [];
    s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
    n = { __e: function(n3, l3) {
      for (var u4, i6; l3 = l3.__; ) if ((u4 = l3.__c) && !u4.__) try {
        if (u4.constructor && null != u4.constructor.getDerivedStateFromError && (i6 = true, u4.setState(u4.constructor.getDerivedStateFromError(n3))), null != u4.componentDidCatch && (i6 = true, u4.componentDidCatch(n3)), i6) return g(u4.__E = u4);
      } catch (l4) {
        n3 = l4;
      }
      throw n3;
    } }, l = function(n3) {
      return null != n3 && void 0 === n3.constructor;
    }, m.prototype.setState = function(n3, l3) {
      var u4;
      u4 = this.__s !== this.state ? this.__s : this.__s = a({}, this.state), "function" == typeof n3 && (n3 = n3(u4, this.props)), n3 && a(u4, n3), null != n3 && this.__v && (l3 && this.__h.push(l3), g(this));
    }, m.prototype.forceUpdate = function(n3) {
      this.__v && (this.__e = true, n3 && this.__h.push(n3), g(this));
    }, m.prototype.render = d, u = [], i2 = 0, t = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, o2 = e, f2 = 0;
  }
});

// node_modules/preact/hooks/dist/hooks.module.js
function v2(t3, r5) {
  n.__h && n.__h(u2, t3, i3 || r5), i3 = 0;
  var o4 = u2.__H || (u2.__H = { __: [], __h: [] });
  return t3 >= o4.__.length && o4.__.push({}), o4.__[t3];
}
function m2(n3) {
  return i3 = 1, p2(E3, n3);
}
function p2(n3, r5, i6) {
  var o4 = v2(t2++, 2);
  return o4.__c || (o4.__c = u2, o4.__ = [i6 ? i6(r5) : E3(void 0, r5), function(t3) {
    var u4 = n3(o4.__[0], t3);
    o4.__[0] !== u4 && (o4.__[0] = u4, o4.__c.setState({}));
  }]), o4.__;
}
function l2(r5, i6) {
  var o4 = v2(t2++, 3);
  !n.__s && x2(o4.__H, i6) && (o4.__ = r5, o4.__H = i6, u2.__H.__h.push(o4));
}
function y3(r5, i6) {
  var o4 = v2(t2++, 4);
  !n.__s && x2(o4.__H, i6) && (o4.__ = r5, o4.__H = i6, u2.__h.push(o4));
}
function d2(n3) {
  return i3 = 5, h3(function() {
    return { current: n3 };
  }, []);
}
function s2(n3, t3, u4) {
  i3 = 6, y3(function() {
    "function" == typeof n3 ? n3(t3()) : n3 && (n3.current = t3());
  }, null == u4 ? u4 : u4.concat(n3));
}
function h3(n3, u4) {
  var r5 = v2(t2++, 7);
  return x2(r5.__H, u4) ? (r5.__H = u4, r5.__h = n3, r5.__ = n3()) : r5.__;
}
function T2(n3, t3) {
  return i3 = 8, h3(function() {
    return n3;
  }, t3);
}
function w2(n3) {
  var r5 = u2.context[n3.__c], i6 = v2(t2++, 9);
  return i6.__c = n3, r5 ? (null == i6.__ && (i6.__ = true, r5.sub(u2)), r5.props.value) : n3.__;
}
function A3(t3, u4) {
  n.useDebugValue && n.useDebugValue(u4 ? u4(t3) : t3);
}
function F(n3) {
  var r5 = v2(t2++, 10), i6 = m2();
  return r5.__ = n3, u2.componentDidCatch || (u2.componentDidCatch = function(n4) {
    r5.__ && r5.__(n4), i6[1](n4);
  }), [i6[0], function() {
    i6[1](void 0);
  }];
}
function _2() {
  o3.some(function(t3) {
    if (t3.__P) try {
      t3.__H.__h.forEach(g2), t3.__H.__h.forEach(q), t3.__H.__h = [];
    } catch (u4) {
      return t3.__H.__h = [], n.__e(u4, t3.__v), true;
    }
  }), o3 = [];
}
function g2(n3) {
  n3.t && n3.t();
}
function q(n3) {
  var t3 = n3.__();
  "function" == typeof t3 && (n3.t = t3);
}
function x2(n3, t3) {
  return !n3 || t3.some(function(t4, u4) {
    return t4 !== n3[u4];
  });
}
function E3(n3, t3) {
  return "function" == typeof t3 ? t3(n3) : t3;
}
var import_dist28, import_dist29, import_dist30, t2, u2, r3, i3, o3, c2, f3, e2, a2;
var init_hooks_module = __esm({
  "node_modules/preact/hooks/dist/hooks.module.js"() {
    import_dist28 = __toESM(require_dist());
    import_dist29 = __toESM(require_dist2());
    import_dist30 = __toESM(require_dist3());
    init_preact_module();
    i3 = 0;
    o3 = [];
    c2 = n.__r;
    f3 = n.diffed;
    e2 = n.__c;
    a2 = n.unmount;
    n.__r = function(n3) {
      c2 && c2(n3), t2 = 0, (u2 = n3.__c).__H && (u2.__H.__h.forEach(g2), u2.__H.__h.forEach(q), u2.__H.__h = []);
    }, n.diffed = function(t3) {
      f3 && f3(t3);
      var u4 = t3.__c;
      if (u4) {
        var i6 = u4.__H;
        i6 && i6.__h.length && (1 !== o3.push(u4) && r3 === n.requestAnimationFrame || ((r3 = n.requestAnimationFrame) || function(n3) {
          var t4, u5 = function() {
            clearTimeout(r5), cancelAnimationFrame(t4), setTimeout(n3);
          }, r5 = setTimeout(u5, 100);
          "undefined" != typeof window && (t4 = requestAnimationFrame(u5));
        })(_2));
      }
    }, n.__c = function(t3, u4) {
      u4.some(function(t4) {
        try {
          t4.__h.forEach(g2), t4.__h = t4.__h.filter(function(n3) {
            return !n3.__ || q(n3);
          });
        } catch (r5) {
          u4.some(function(n3) {
            n3.__h && (n3.__h = []);
          }), u4 = [], n.__e(r5, t4.__v);
        }
      }), e2 && e2(t3, u4);
    }, n.unmount = function(t3) {
      a2 && a2(t3);
      var u4 = t3.__c;
      if (u4) {
        var r5 = u4.__H;
        if (r5) try {
          r5.__.forEach(function(n3) {
            return n3.t && n3.t();
          });
        } catch (t4) {
          n.__e(t4, u4.__v);
        }
      }
    };
  }
});

// node_modules/preact/compat/dist/compat.module.js
var compat_module_exports = {};
__export(compat_module_exports, {
  Children: () => R,
  Component: () => m,
  Fragment: () => d,
  PureComponent: () => C3,
  Suspense: () => U,
  SuspenseList: () => O,
  cloneElement: () => K,
  createContext: () => M,
  createElement: () => h2,
  createFactory: () => G,
  createPortal: () => z2,
  createRef: () => y2,
  default: () => compat_module_default,
  findDOMNode: () => X,
  forwardRef: () => S,
  hydrate: () => V,
  isValidElement: () => J,
  lazy: () => L2,
  memo: () => _3,
  render: () => T3,
  unmountComponentAtNode: () => Q,
  unstable_batchedUpdates: () => Y,
  useCallback: () => T2,
  useContext: () => w2,
  useDebugValue: () => A3,
  useEffect: () => l2,
  useErrorBoundary: () => F,
  useImperativeHandle: () => s2,
  useLayoutEffect: () => y3,
  useMemo: () => h3,
  useReducer: () => p2,
  useRef: () => d2,
  useState: () => m2,
  version: () => B
});
function E4(n3, t3) {
  for (var e3 in t3) n3[e3] = t3[e3];
  return n3;
}
function w3(n3, t3) {
  for (var e3 in n3) if ("__source" !== e3 && !(e3 in t3)) return true;
  for (var r5 in t3) if ("__source" !== r5 && n3[r5] !== t3[r5]) return true;
  return false;
}
function _3(n3, t3) {
  function e3(n4) {
    var e4 = this.props.ref, r6 = e4 == n4.ref;
    return !r6 && e4 && (e4.call ? e4(null) : e4.current = null), t3 ? !t3(this.props, n4) || !r6 : w3(this.props, n4);
  }
  function r5(t4) {
    return this.shouldComponentUpdate = e3, h2(n3, E4({}, t4));
  }
  return r5.prototype.isReactComponent = true, r5.displayName = "Memo(" + (n3.displayName || n3.name) + ")", r5.t = true, r5;
}
function S(n3) {
  function t3(t4) {
    var e3 = E4({}, t4);
    return delete e3.ref, n3(e3, t4.ref);
  }
  return t3.prototype.isReactComponent = t3.t = true, t3.displayName = "ForwardRef(" + (n3.displayName || n3.name) + ")", t3;
}
function N2(n3) {
  return n3 && ((n3 = E4({}, n3)).__c = null, n3.__k = n3.__k && n3.__k.map(N2)), n3;
}
function U() {
  this.__u = 0, this.o = null, this.__b = null;
}
function M2(n3) {
  var t3 = n3.__.__c;
  return t3 && t3.u && t3.u(n3);
}
function L2(n3) {
  var t3, e3, r5;
  function o4(o5) {
    if (t3 || (t3 = n3()).then(function(n4) {
      e3 = n4.default || n4;
    }, function(n4) {
      r5 = n4;
    }), r5) throw r5;
    if (!e3) throw t3;
    return h2(e3, o5);
  }
  return o4.displayName = "Lazy", o4.t = true, o4;
}
function O() {
  this.i = null, this.l = null;
}
function j2(n3) {
  var t3 = this, e3 = n3.container, r5 = h2(W, { context: t3.context }, n3.vnode);
  return t3.s && t3.s !== e3 && (t3.v.parentNode && t3.s.removeChild(t3.v), D(t3.h), t3.p = false), n3.vnode ? t3.p ? (e3.__k = t3.__k, H(r5, e3), t3.__k = e3.__k) : (t3.v = document.createTextNode(""), I("", e3), e3.appendChild(t3.v), t3.p = true, t3.s = e3, H(r5, e3, t3.v), t3.__k = t3.v.__k) : t3.p && (t3.v.parentNode && t3.s.removeChild(t3.v), D(t3.h)), t3.h = r5, t3.componentWillUnmount = function() {
    t3.v.parentNode && t3.s.removeChild(t3.v), D(t3.h);
  }, null;
}
function z2(n3, t3) {
  return h2(j2, { vnode: n3, container: t3 });
}
function T3(n3, t3, e3) {
  if (null == t3.__k) for (; t3.firstChild; ) t3.removeChild(t3.firstChild);
  return H(n3, t3), "function" == typeof e3 && e3(), n3 ? n3.__c : null;
}
function V(n3, t3, e3) {
  return I(n3, t3), "function" == typeof e3 && e3(), n3 ? n3.__c : null;
}
function I2(n3, t3) {
  n3["UNSAFE_" + t3] && !n3[t3] && Object.defineProperty(n3, t3, { configurable: false, get: function() {
    return this["UNSAFE_" + t3];
  }, set: function(n4) {
    this["UNSAFE_" + t3] = n4;
  } });
}
function G(n3) {
  return h2.bind(null, n3);
}
function J(n3) {
  return !!n3 && n3.$$typeof === H2;
}
function K(n3) {
  return J(n3) ? L.apply(null, arguments) : n3;
}
function Q(n3) {
  return !!n3.__k && (H(null, n3), true);
}
function X(n3) {
  return n3 && (n3.base || 1 === n3.nodeType && n3) || null;
}
var import_dist31, import_dist32, import_dist33, C3, A4, k3, R, F2, P2, W, D2, H2, Z, $2, q2, B, Y, compat_module_default;
var init_compat_module = __esm({
  "node_modules/preact/compat/dist/compat.module.js"() {
    import_dist31 = __toESM(require_dist());
    import_dist32 = __toESM(require_dist2());
    import_dist33 = __toESM(require_dist3());
    init_hooks_module();
    init_hooks_module();
    init_preact_module();
    init_preact_module();
    C3 = function(n3) {
      var t3, e3;
      function r5(t4) {
        var e4;
        return (e4 = n3.call(this, t4) || this).isPureReactComponent = true, e4;
      }
      return e3 = n3, (t3 = r5).prototype = Object.create(e3.prototype), t3.prototype.constructor = t3, t3.__proto__ = e3, r5.prototype.shouldComponentUpdate = function(n4, t4) {
        return w3(this.props, n4) || w3(this.state, t4);
      }, r5;
    }(m);
    A4 = n.__b;
    n.__b = function(n3) {
      n3.type && n3.type.t && n3.ref && (n3.props.ref = n3.ref, n3.ref = null), A4 && A4(n3);
    };
    k3 = function(n3, t3) {
      return n3 ? x(n3).reduce(function(n4, e3, r5) {
        return n4.concat(t3(e3, r5));
      }, []) : null;
    };
    R = { map: k3, forEach: k3, count: function(n3) {
      return n3 ? x(n3).length : 0;
    }, only: function(n3) {
      if (1 !== (n3 = x(n3)).length) throw new Error("Children.only() expects only one child.");
      return n3[0];
    }, toArray: x };
    F2 = n.__e;
    n.__e = function(n3, t3, e3) {
      if (n3.then) {
        for (var r5, o4 = t3; o4 = o4.__; ) if ((r5 = o4.__c) && r5.__c) return r5.__c(n3, t3.__c);
      }
      F2(n3, t3, e3);
    }, (U.prototype = new m()).__c = function(n3, t3) {
      var e3 = this;
      null == e3.o && (e3.o = []), e3.o.push(t3);
      var r5 = M2(e3.__v), o4 = false, u4 = function() {
        o4 || (o4 = true, r5 ? r5(i6) : i6());
      };
      t3.__c = t3.componentWillUnmount, t3.componentWillUnmount = function() {
        u4(), t3.__c && t3.__c();
      };
      var i6 = function() {
        var n4;
        if (!--e3.__u) for (e3.__v.__k[0] = e3.state.u, e3.setState({ u: e3.__b = null }); n4 = e3.o.pop(); ) n4.forceUpdate();
      };
      e3.__u++ || e3.setState({ u: e3.__b = e3.__v.__k[0] }), n3.then(u4, u4);
    }, U.prototype.render = function(n3, t3) {
      return this.__b && (this.__v.__k[0] = N2(this.__b), this.__b = null), [h2(m, null, t3.u ? null : n3.children), t3.u && n3.fallback];
    };
    P2 = function(n3, t3, e3) {
      if (++e3[1] === e3[0] && n3.l.delete(t3), n3.props.revealOrder && ("t" !== n3.props.revealOrder[0] || !n3.l.size)) for (e3 = n3.i; e3; ) {
        for (; e3.length > 3; ) e3.pop()();
        if (e3[1] < e3[0]) break;
        n3.i = e3 = e3[2];
      }
    };
    (O.prototype = new m()).u = function(n3) {
      var t3 = this, e3 = M2(t3.__v), r5 = t3.l.get(n3);
      return r5[0]++, function(o4) {
        var u4 = function() {
          t3.props.revealOrder ? (r5.push(o4), P2(t3, n3, r5)) : o4();
        };
        e3 ? e3(u4) : u4();
      };
    }, O.prototype.render = function(n3) {
      this.i = null, this.l = /* @__PURE__ */ new Map();
      var t3 = x(n3.children);
      n3.revealOrder && "b" === n3.revealOrder[0] && t3.reverse();
      for (var e3 = t3.length; e3--; ) this.l.set(t3[e3], this.i = [1, 0, this.i]);
      return n3.children;
    }, O.prototype.componentDidUpdate = O.prototype.componentDidMount = function() {
      var n3 = this;
      n3.l.forEach(function(t3, e3) {
        P2(n3, e3, t3);
      });
    };
    W = function() {
      function n3() {
      }
      var t3 = n3.prototype;
      return t3.getChildContext = function() {
        return this.props.context;
      }, t3.render = function(n4) {
        return n4.children;
      }, n3;
    }();
    D2 = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
    m.prototype.isReactComponent = {};
    H2 = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
    Z = n.event;
    n.event = function(n3) {
      Z && (n3 = Z(n3)), n3.persist = function() {
      };
      var t3 = false, e3 = false, r5 = n3.stopPropagation;
      n3.stopPropagation = function() {
        r5.call(n3), t3 = true;
      };
      var o4 = n3.preventDefault;
      return n3.preventDefault = function() {
        o4.call(n3), e3 = true;
      }, n3.isPropagationStopped = function() {
        return t3;
      }, n3.isDefaultPrevented = function() {
        return e3;
      }, n3.nativeEvent = n3;
    };
    $2 = { configurable: true, get: function() {
      return this.class;
    } };
    q2 = n.vnode;
    n.vnode = function(n3) {
      n3.$$typeof = H2;
      var t3 = n3.type, e3 = n3.props;
      if (t3) {
        if (e3.class != e3.className && ($2.enumerable = "className" in e3, null != e3.className && (e3.class = e3.className), Object.defineProperty(e3, "className", $2)), "function" != typeof t3) {
          var r5, o4, u4;
          for (u4 in e3.defaultValue && void 0 !== e3.value && (e3.value || 0 === e3.value || (e3.value = e3.defaultValue), delete e3.defaultValue), Array.isArray(e3.value) && e3.multiple && "select" === t3 && (x(e3.children).forEach(function(n4) {
            -1 != e3.value.indexOf(n4.props.value) && (n4.props.selected = true);
          }), delete e3.value), e3) if (r5 = D2.test(u4)) break;
          if (r5) for (u4 in o4 = n3.props = {}, e3) o4[D2.test(u4) ? u4.replace(/[A-Z0-9]/, "-$&").toLowerCase() : u4] = e3[u4];
        }
        !function(t4) {
          var e4 = n3.type, r6 = n3.props;
          if (r6 && "string" == typeof e4) {
            var o5 = {};
            for (var u5 in r6) /^on(Ani|Tra|Tou)/.test(u5) && (r6[u5.toLowerCase()] = r6[u5], delete r6[u5]), o5[u5.toLowerCase()] = u5;
            if (o5.ondoubleclick && (r6.ondblclick = r6[o5.ondoubleclick], delete r6[o5.ondoubleclick]), o5.onbeforeinput && (r6.onbeforeinput = r6[o5.onbeforeinput], delete r6[o5.onbeforeinput]), o5.onchange && ("textarea" === e4 || "input" === e4.toLowerCase() && !/^fil|che|ra/i.test(r6.type))) {
              var i6 = o5.oninput || "oninput";
              r6[i6] || (r6[i6] = r6[o5.onchange], delete r6[o5.onchange]);
            }
          }
        }(), "function" == typeof t3 && !t3.m && t3.prototype && (I2(t3.prototype, "componentWillMount"), I2(t3.prototype, "componentWillReceiveProps"), I2(t3.prototype, "componentWillUpdate"), t3.m = true);
      }
      q2 && q2(n3);
    };
    B = "16.8.0";
    Y = function(n3, t3) {
      return n3(t3);
    };
    compat_module_default = { useState: m2, useReducer: p2, useEffect: l2, useLayoutEffect: y3, useRef: d2, useImperativeHandle: s2, useMemo: h3, useCallback: T2, useContext: w2, useDebugValue: A3, version: "16.8.0", Children: R, render: T3, hydrate: T3, unmountComponentAtNode: Q, createPortal: z2, createElement: h2, createContext: M, createFactory: G, cloneElement: K, createRef: y2, Fragment: d, isValidElement: J, findDOMNode: X, Component: m, PureComponent: C3, memo: _3, forwardRef: S, unstable_batchedUpdates: Y, Suspense: U, SuspenseList: O, lazy: L2 };
  }
});

// node_modules/@walletconnect/qrcode-modal/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/dist/cjs/index.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var browserUtils = (init_esm2(), __toCommonJS(esm_exports3));
    var QRCode = _interopDefault(require_browser());
    var copy = _interopDefault(require_copy_to_clipboard());
    var React = (init_compat_module(), __toCommonJS(compat_module_exports));
    function open(uri) {
      QRCode.toString(uri, {
        type: "terminal"
      }).then(console.log);
    }
    var WALLETCONNECT_STYLE_SHEET = ':root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, "SF Pro Rounded", "SF Pro Text", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,\n    "Open Sans", "Helvetica Neue", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url("images/wc-logo.svg") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n';
    var _iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator";
    var _asyncIteratorSymbol = typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")) : "@@asyncIterator";
    function _catch(body, recover) {
      try {
        var result = body();
      } catch (e3) {
        return recover(e3);
      }
      if (result && result.then) {
        return result.then(void 0, recover);
      }
      return result;
    }
    var WALLETCONNECT_LOGO_SVG_URL = "data:image/svg+xml,%3Csvg height='185' viewBox='0 0 300 185' width='300' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m61.4385429 36.2562612c48.9112241-47.8881663 128.2119871-47.8881663 177.1232091 0l5.886545 5.7634174c2.445561 2.3944081 2.445561 6.2765112 0 8.6709204l-20.136695 19.715503c-1.222781 1.1972051-3.2053 1.1972051-4.428081 0l-8.100584-7.9311479c-34.121692-33.4079817-89.443886-33.4079817-123.5655788 0l-8.6750562 8.4936051c-1.2227816 1.1972041-3.205301 1.1972041-4.4280806 0l-20.1366949-19.7155031c-2.4455612-2.3944092-2.4455612-6.2765122 0-8.6709204zm218.7677961 40.7737449 17.921697 17.546897c2.445549 2.3943969 2.445563 6.2764769.000031 8.6708899l-80.810171 79.121134c-2.445544 2.394426-6.410582 2.394453-8.85616.000062-.00001-.00001-.000022-.000022-.000032-.000032l-57.354143-56.154572c-.61139-.598602-1.60265-.598602-2.21404 0-.000004.000004-.000007.000008-.000011.000011l-57.3529212 56.154531c-2.4455368 2.394432-6.4105755 2.394472-8.8561612.000087-.0000143-.000014-.0000296-.000028-.0000449-.000044l-80.81241943-79.122185c-2.44556021-2.394408-2.44556021-6.2765115 0-8.6709197l17.92172963-17.5468673c2.4455602-2.3944082 6.4105989-2.3944082 8.8561602 0l57.3549775 56.155357c.6113908.598602 1.602649.598602 2.2140398 0 .0000092-.000009.0000174-.000017.0000265-.000024l57.3521031-56.155333c2.445505-2.3944633 6.410544-2.3945531 8.856161-.0002.000034.0000336.000068.0000673.000101.000101l57.354902 56.155432c.61139.598601 1.60265.598601 2.21404 0l57.353975-56.1543249c2.445561-2.3944092 6.410599-2.3944092 8.85616 0z' fill='%233b99fc'/%3E%3C/svg%3E";
    var WALLETCONNECT_HEADER_TEXT = "WalletConnect";
    var ANIMATION_DURATION = 300;
    var DEFAULT_BUTTON_COLOR = "rgb(64, 153, 255)";
    var WALLETCONNECT_WRAPPER_ID = "walletconnect-wrapper";
    var WALLETCONNECT_STYLE_ID = "walletconnect-style-sheet";
    var WALLETCONNECT_MODAL_ID = "walletconnect-qrcode-modal";
    var WALLETCONNECT_CLOSE_BUTTON_ID = "walletconnect-qrcode-close";
    var WALLETCONNECT_CTA_TEXT_ID = "walletconnect-qrcode-text";
    var WALLETCONNECT_CONNECT_BUTTON_ID = "walletconnect-connect-button";
    function Header(props) {
      return React.createElement("div", {
        className: "walletconnect-modal__header"
      }, React.createElement("img", {
        src: WALLETCONNECT_LOGO_SVG_URL,
        className: "walletconnect-modal__headerLogo"
      }), React.createElement("p", null, WALLETCONNECT_HEADER_TEXT), React.createElement("div", {
        className: "walletconnect-modal__close__wrapper",
        onClick: props.onClose
      }, React.createElement("div", {
        id: WALLETCONNECT_CLOSE_BUTTON_ID,
        className: "walletconnect-modal__close__icon"
      }, React.createElement("div", {
        className: "walletconnect-modal__close__line1"
      }), React.createElement("div", {
        className: "walletconnect-modal__close__line2"
      }))));
    }
    function ConnectButton(props) {
      return React.createElement("a", {
        className: "walletconnect-connect__button",
        href: props.href,
        id: WALLETCONNECT_CONNECT_BUTTON_ID + "-" + props.name,
        onClick: props.onClick,
        rel: "noopener noreferrer",
        style: {
          backgroundColor: props.color
        },
        target: "_blank"
      }, props.name);
    }
    var CARET_SVG_URL = "data:image/svg+xml,%3Csvg fill='none' height='18' viewBox='0 0 8 18' width='8' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath clip-rule='evenodd' d='m.586301.213898c-.435947.33907-.5144813.967342-.175411 1.403292l4.87831 6.27212c.28087.36111.28087.86677 0 1.22788l-4.878311 6.27211c-.33907.436-.260536 1.0642.175412 1.4033.435949.3391 1.064219.2605 1.403289-.1754l4.87832-6.2721c.84259-1.08336.84259-2.60034 0-3.68367l-4.87832-6.27212c-.33907-.4359474-.96734-.514482-1.403289-.175412z' fill='%233c4252' fill-rule='evenodd'/%3E%3C/svg%3E";
    function WalletButton(props) {
      var color = props.color;
      var href = props.href;
      var name = props.name;
      var logo = props.logo;
      var onClick = props.onClick;
      return React.createElement("a", {
        className: "walletconnect-modal__base__row",
        href,
        onClick,
        rel: "noopener noreferrer",
        target: "_blank"
      }, React.createElement("h3", {
        className: "walletconnect-modal__base__row__h3"
      }, name), React.createElement("div", {
        className: "walletconnect-modal__base__row__right"
      }, React.createElement("div", {
        className: "walletconnect-modal__base__row__right__app-icon",
        style: {
          background: "url('" + logo + "') " + color,
          backgroundSize: "100%"
        }
      }), React.createElement("img", {
        src: CARET_SVG_URL,
        className: "walletconnect-modal__base__row__right__caret"
      })));
    }
    function WalletIcon(props) {
      var color = props.color;
      var href = props.href;
      var name = props.name;
      var logo = props.logo;
      var onClick = props.onClick;
      var fontSize = window.innerWidth < 768 ? (name.length > 8 ? 2.5 : 2.7) + "vw" : "inherit";
      return React.createElement("a", {
        className: "walletconnect-connect__button__icon_anchor",
        href,
        onClick,
        rel: "noopener noreferrer",
        target: "_blank"
      }, React.createElement("div", {
        className: "walletconnect-connect__button__icon",
        style: {
          background: "url('" + logo + "') " + color,
          backgroundSize: "100%"
        }
      }), React.createElement("div", {
        style: {
          fontSize
        },
        className: "walletconnect-connect__button__text"
      }, name));
    }
    var GRID_MIN_COUNT = 5;
    var LINKS_PER_PAGE = 12;
    function LinkDisplay(props) {
      var android = browserUtils.isAndroid();
      var ref = React.useState("");
      var input = ref[0];
      var setInput = ref[1];
      var ref$1 = React.useState("");
      var filter = ref$1[0];
      var setFilter = ref$1[1];
      var ref$2 = React.useState(1);
      var page = ref$2[0];
      var setPage = ref$2[1];
      var links = filter ? props.links.filter(function(link) {
        return link.name.toLowerCase().includes(filter.toLowerCase());
      }) : props.links;
      var errorMessage = props.errorMessage;
      var grid = filter || links.length > GRID_MIN_COUNT;
      var pages = Math.ceil(links.length / LINKS_PER_PAGE);
      var range = [(page - 1) * LINKS_PER_PAGE + 1, page * LINKS_PER_PAGE];
      var pageLinks = links.length ? links.filter(function(_5, index2) {
        return index2 + 1 >= range[0] && index2 + 1 <= range[1];
      }) : [];
      var hasPaging = !!(!android && pages > 1);
      var filterTimeout = void 0;
      function handleInput(e3) {
        setInput(e3.target.value);
        clearTimeout(filterTimeout);
        if (e3.target.value) {
          filterTimeout = setTimeout(function() {
            setFilter(e3.target.value);
            setPage(1);
          }, 1e3);
        } else {
          setInput("");
          setFilter("");
          setPage(1);
        }
      }
      return React.createElement("div", null, React.createElement("p", {
        id: WALLETCONNECT_CTA_TEXT_ID,
        className: "walletconnect-qrcode__text"
      }, android ? props.text.connect_mobile_wallet : props.text.choose_preferred_wallet), !android && React.createElement("input", {
        className: "walletconnect-search__input",
        placeholder: "Search",
        value: input,
        onChange: handleInput
      }), React.createElement("div", {
        className: "walletconnect-connect__buttons__wrapper" + (android ? "__android" : grid && links.length ? "__wrap" : "")
      }, !android ? pageLinks.length ? pageLinks.map(function(entry) {
        var color = entry.color;
        var name = entry.name;
        var shortName = entry.shortName;
        var logo = entry.logo;
        var href = browserUtils.formatIOSMobile(props.uri, entry);
        var handleClickIOS = React.useCallback(function() {
          browserUtils.saveMobileLinkInfo({
            name,
            href
          });
        }, [pageLinks]);
        return !grid ? React.createElement(WalletButton, {
          color,
          href,
          name,
          logo,
          onClick: handleClickIOS
        }) : React.createElement(WalletIcon, {
          color,
          href,
          name: shortName || name,
          logo,
          onClick: handleClickIOS
        });
      }) : React.createElement(React.Fragment, null, React.createElement("p", null, errorMessage.length ? props.errorMessage : !!props.links.length && !links.length ? props.text.no_wallets_found : props.text.loading)) : React.createElement(ConnectButton, {
        name: props.text.connect,
        color: DEFAULT_BUTTON_COLOR,
        href: props.uri,
        onClick: React.useCallback(function() {
          browserUtils.saveMobileLinkInfo({
            name: "Unknown",
            href: props.uri
          });
        }, [])
      })), hasPaging && React.createElement("div", {
        className: "walletconnect-modal__footer"
      }, Array(pages).fill(0).map(function(_5, index2) {
        var pageNumber = index2 + 1;
        var selected = page === pageNumber;
        return React.createElement("a", {
          style: {
            margin: "auto 10px",
            fontWeight: selected ? "bold" : "normal"
          },
          onClick: function() {
            return setPage(pageNumber);
          }
        }, pageNumber);
      })));
    }
    function Notification(props) {
      var show = !!props.message.trim();
      return React.createElement("div", {
        className: "walletconnect-qrcode__notification" + (show ? " notification__show" : "")
      }, props.message);
    }
    var formatQRCodeImage = function(data) {
      try {
        var result = "";
        return Promise.resolve(QRCode.toString(data, {
          margin: 0,
          type: "svg"
        })).then(function(dataString) {
          if (typeof dataString === "string") {
            result = dataString.replace("<svg", '<svg class="walletconnect-qrcode__image"');
          }
          return result;
        });
      } catch (e3) {
        return Promise.reject(e3);
      }
    };
    function QRCodeDisplay(props) {
      var ref = React.useState("");
      var notification = ref[0];
      var setNotification = ref[1];
      var ref$1 = React.useState("");
      var svg = ref$1[0];
      var setSvg = ref$1[1];
      React.useEffect(function() {
        try {
          return Promise.resolve(formatQRCodeImage(props.uri)).then(function(_formatQRCodeImage) {
            setSvg(_formatQRCodeImage);
          });
        } catch (e3) {
          Promise.reject(e3);
        }
      }, []);
      var copyToClipboard = function() {
        var success = copy(props.uri);
        if (success) {
          setNotification(props.text.copied_to_clipboard);
          setInterval(function() {
            return setNotification("");
          }, 1200);
        } else {
          setNotification("Error");
          setInterval(function() {
            return setNotification("");
          }, 1200);
        }
      };
      return React.createElement("div", null, React.createElement("p", {
        id: WALLETCONNECT_CTA_TEXT_ID,
        className: "walletconnect-qrcode__text"
      }, props.text.scan_qrcode_with_wallet), React.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: svg
        }
      }), React.createElement("div", {
        className: "walletconnect-modal__footer"
      }, React.createElement("a", {
        onClick: copyToClipboard
      }, props.text.copy_to_clipboard)), React.createElement(Notification, {
        message: notification
      }));
    }
    function Modal(props) {
      var android = browserUtils.isAndroid();
      var mobile = browserUtils.isMobile();
      var whitelist = mobile ? props.qrcodeModalOptions && props.qrcodeModalOptions.mobileLinks ? props.qrcodeModalOptions.mobileLinks : void 0 : props.qrcodeModalOptions && props.qrcodeModalOptions.desktopLinks ? props.qrcodeModalOptions.desktopLinks : void 0;
      var ref = React.useState(false);
      var loading = ref[0];
      var setLoading = ref[1];
      var ref$1 = React.useState(false);
      var fetched = ref$1[0];
      var setFetched = ref$1[1];
      var ref$2 = React.useState(!mobile);
      var displayQRCode = ref$2[0];
      var setDisplayQRCode = ref$2[1];
      var displayProps = {
        mobile,
        text: props.text,
        uri: props.uri,
        qrcodeModalOptions: props.qrcodeModalOptions
      };
      var ref$3 = React.useState("");
      var singleLinkHref = ref$3[0];
      var setSingleLinkHref = ref$3[1];
      var ref$4 = React.useState(false);
      var hasSingleLink = ref$4[0];
      var setHasSingleLink = ref$4[1];
      var ref$5 = React.useState([]);
      var links = ref$5[0];
      var setLinks = ref$5[1];
      var ref$6 = React.useState("");
      var errorMessage = ref$6[0];
      var setErrorMessage = ref$6[1];
      var getLinksIfNeeded = function() {
        if (fetched || loading || whitelist && !whitelist.length || links.length > 0) {
          return;
        }
        React.useEffect(function() {
          var initLinks = function() {
            try {
              if (android) {
                return Promise.resolve();
              }
              setLoading(true);
              var _temp = _catch(function() {
                var url = props.qrcodeModalOptions && props.qrcodeModalOptions.registryUrl ? props.qrcodeModalOptions.registryUrl : browserUtils.getWalletRegistryUrl();
                return Promise.resolve(fetch(url)).then(function(registryResponse) {
                  return Promise.resolve(registryResponse.json()).then(function(_registryResponse$jso) {
                    var registry = _registryResponse$jso.listings;
                    var platform = mobile ? "mobile" : "desktop";
                    var _links = browserUtils.getMobileLinkRegistry(browserUtils.formatMobileRegistry(registry, platform), whitelist);
                    setLoading(false);
                    setFetched(true);
                    setErrorMessage(!_links.length ? props.text.no_supported_wallets : "");
                    setLinks(_links);
                    var hasSingleLink2 = _links.length === 1;
                    if (hasSingleLink2) {
                      setSingleLinkHref(browserUtils.formatIOSMobile(props.uri, _links[0]));
                      setDisplayQRCode(true);
                    }
                    setHasSingleLink(hasSingleLink2);
                  });
                });
              }, function(e3) {
                setLoading(false);
                setFetched(true);
                setErrorMessage(props.text.something_went_wrong);
                console.error(e3);
              });
              return Promise.resolve(_temp && _temp.then ? _temp.then(function() {
              }) : void 0);
            } catch (e3) {
              return Promise.reject(e3);
            }
          };
          initLinks();
        });
      };
      getLinksIfNeeded();
      var rightSelected = mobile ? displayQRCode : !displayQRCode;
      return React.createElement("div", {
        id: WALLETCONNECT_MODAL_ID,
        className: "walletconnect-qrcode__base animated fadeIn"
      }, React.createElement("div", {
        className: "walletconnect-modal__base"
      }, React.createElement(Header, {
        onClose: props.onClose
      }), hasSingleLink && displayQRCode ? React.createElement("div", {
        className: "walletconnect-modal__single_wallet"
      }, React.createElement("a", {
        onClick: function() {
          return browserUtils.saveMobileLinkInfo({
            name: links[0].name,
            href: singleLinkHref
          });
        },
        href: singleLinkHref,
        rel: "noopener noreferrer",
        target: "_blank"
      }, props.text.connect_with + " " + (hasSingleLink ? links[0].name : "") + " ›")) : android || loading || !loading && links.length ? React.createElement("div", {
        className: "walletconnect-modal__mobile__toggle" + (rightSelected ? " right__selected" : "")
      }, React.createElement("div", {
        className: "walletconnect-modal__mobile__toggle_selector"
      }), mobile ? React.createElement(React.Fragment, null, React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(false), getLinksIfNeeded();
        }
      }, props.text.mobile), React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(true);
        }
      }, props.text.qrcode)) : React.createElement(React.Fragment, null, React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(true);
        }
      }, props.text.qrcode), React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(false), getLinksIfNeeded();
        }
      }, props.text.desktop))) : null, React.createElement("div", null, displayQRCode || !android && !loading && !links.length ? React.createElement(QRCodeDisplay, Object.assign({}, displayProps)) : React.createElement(LinkDisplay, Object.assign(
        {},
        displayProps,
        {
          links,
          errorMessage
        }
      )))));
    }
    var de2 = {
      choose_preferred_wallet: "Wähle bevorzugte Wallet",
      connect_mobile_wallet: "Verbinde mit Mobile Wallet",
      scan_qrcode_with_wallet: "Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",
      connect: "Verbinden",
      qrcode: "QR-Code",
      mobile: "Mobile",
      desktop: "Desktop",
      copy_to_clipboard: "In die Zwischenablage kopieren",
      copied_to_clipboard: "In die Zwischenablage kopiert!",
      connect_with: "Verbinden mit Hilfe von",
      loading: "Laden...",
      something_went_wrong: "Etwas ist schief gelaufen",
      no_supported_wallets: "Es gibt noch keine unterstützten Wallet",
      no_wallets_found: "keine Wallet gefunden"
    };
    var en3 = {
      choose_preferred_wallet: "Choose your preferred wallet",
      connect_mobile_wallet: "Connect to Mobile Wallet",
      scan_qrcode_with_wallet: "Scan QR code with a WalletConnect-compatible wallet",
      connect: "Connect",
      qrcode: "QR Code",
      mobile: "Mobile",
      desktop: "Desktop",
      copy_to_clipboard: "Copy to clipboard",
      copied_to_clipboard: "Copied to clipboard!",
      connect_with: "Connect with",
      loading: "Loading...",
      something_went_wrong: "Something went wrong",
      no_supported_wallets: "There are no supported wallets yet",
      no_wallets_found: "No wallets found"
    };
    var es2 = {
      choose_preferred_wallet: "Elige tu billetera preferida",
      connect_mobile_wallet: "Conectar a billetera móvil",
      scan_qrcode_with_wallet: "Escanea el código QR con una billetera compatible con WalletConnect",
      connect: "Conectar",
      qrcode: "Código QR",
      mobile: "Móvil",
      desktop: "Desktop",
      copy_to_clipboard: "Copiar",
      copied_to_clipboard: "Copiado!",
      connect_with: "Conectar mediante",
      loading: "Cargando...",
      something_went_wrong: "Algo salió mal",
      no_supported_wallets: "Todavía no hay billeteras compatibles",
      no_wallets_found: "No se encontraron billeteras"
    };
    var fr3 = {
      choose_preferred_wallet: "Choisissez votre portefeuille préféré",
      connect_mobile_wallet: "Se connecter au portefeuille mobile",
      scan_qrcode_with_wallet: "Scannez le QR code avec un portefeuille compatible WalletConnect",
      connect: "Se connecter",
      qrcode: "QR Code",
      mobile: "Mobile",
      desktop: "Desktop",
      copy_to_clipboard: "Copier",
      copied_to_clipboard: "Copié!",
      connect_with: "Connectez-vous à l'aide de",
      loading: "Chargement...",
      something_went_wrong: "Quelque chose a mal tourné",
      no_supported_wallets: "Il n'y a pas encore de portefeuilles pris en charge",
      no_wallets_found: "Aucun portefeuille trouvé"
    };
    var ko = {
      choose_preferred_wallet: "원하는 지갑을 선택하세요",
      connect_mobile_wallet: "모바일 지갑과 연결",
      scan_qrcode_with_wallet: "WalletConnect 지원 지갑에서 QR코드를 스캔하세요",
      connect: "연결",
      qrcode: "QR 코드",
      mobile: "모바일",
      desktop: "데스크탑",
      copy_to_clipboard: "클립보드에 복사",
      copied_to_clipboard: "클립보드에 복사되었습니다!",
      connect_with: "와 연결하다",
      loading: "로드 중...",
      something_went_wrong: "문제가 발생했습니다.",
      no_supported_wallets: "아직 지원되는 지갑이 없습니다",
      no_wallets_found: "지갑을 찾을 수 없습니다"
    };
    var pt3 = {
      choose_preferred_wallet: "Escolha sua carteira preferida",
      connect_mobile_wallet: "Conectar-se à carteira móvel",
      scan_qrcode_with_wallet: "Ler o código QR com uma carteira compatível com WalletConnect",
      connect: "Conectar",
      qrcode: "Código QR",
      mobile: "Móvel",
      desktop: "Desktop",
      copy_to_clipboard: "Copiar",
      copied_to_clipboard: "Copiado!",
      connect_with: "Ligar por meio de",
      loading: "Carregamento...",
      something_went_wrong: "Algo correu mal",
      no_supported_wallets: "Ainda não há carteiras suportadas",
      no_wallets_found: "Nenhuma carteira encontrada"
    };
    var zh = {
      choose_preferred_wallet: "选择你的钱包",
      connect_mobile_wallet: "连接至移动端钱包",
      scan_qrcode_with_wallet: "使用兼容 WalletConnect 的钱包扫描二维码",
      connect: "连接",
      qrcode: "二维码",
      mobile: "移动",
      desktop: "桌面",
      copy_to_clipboard: "复制到剪贴板",
      copied_to_clipboard: "复制到剪贴板成功！",
      connect_with: "通过以下方式连接",
      loading: "正在加载...",
      something_went_wrong: "出了问题",
      no_supported_wallets: "目前还没有支持的钱包",
      no_wallets_found: "没有找到钱包"
    };
    var fa = {
      choose_preferred_wallet: "کیف پول مورد نظر خود را انتخاب کنید",
      connect_mobile_wallet: "به کیف پول موبایل وصل شوید",
      scan_qrcode_with_wallet: "کد QR را با یک کیف پول سازگار با WalletConnect اسکن کنید",
      connect: "اتصال",
      qrcode: "کد QR",
      mobile: "سیار",
      desktop: "دسکتاپ",
      copy_to_clipboard: "کپی به کلیپ بورد",
      copied_to_clipboard: "در کلیپ بورد کپی شد!",
      connect_with: "ارتباط با",
      loading: "...بارگذاری",
      something_went_wrong: "مشکلی پیش آمد",
      no_supported_wallets: "هنوز هیچ کیف پول پشتیبانی شده ای وجود ندارد",
      no_wallets_found: "هیچ کیف پولی پیدا نشد"
    };
    var languages = {
      de: de2,
      en: en3,
      es: es2,
      fr: fr3,
      ko,
      pt: pt3,
      zh,
      fa
    };
    function injectStyleSheet() {
      var doc = browserUtils.getDocumentOrThrow();
      var prev = doc.getElementById(WALLETCONNECT_STYLE_ID);
      if (prev) {
        doc.head.removeChild(prev);
      }
      var style = doc.createElement("style");
      style.setAttribute("id", WALLETCONNECT_STYLE_ID);
      style.innerText = WALLETCONNECT_STYLE_SHEET;
      doc.head.appendChild(style);
    }
    function renderWrapper() {
      var doc = browserUtils.getDocumentOrThrow();
      var wrapper = doc.createElement("div");
      wrapper.setAttribute("id", WALLETCONNECT_WRAPPER_ID);
      doc.body.appendChild(wrapper);
      return wrapper;
    }
    function triggerCloseAnimation() {
      var doc = browserUtils.getDocumentOrThrow();
      var modal = doc.getElementById(WALLETCONNECT_MODAL_ID);
      if (modal) {
        modal.className = modal.className.replace("fadeIn", "fadeOut");
        setTimeout(function() {
          var wrapper = doc.getElementById(WALLETCONNECT_WRAPPER_ID);
          if (wrapper) {
            doc.body.removeChild(wrapper);
          }
        }, ANIMATION_DURATION);
      }
    }
    function getWrappedCallback(cb) {
      return function() {
        triggerCloseAnimation();
        if (cb) {
          cb();
        }
      };
    }
    function getText() {
      var lang = browserUtils.getNavigatorOrThrow().language.split("-")[0] || "en";
      return languages[lang] || languages["en"];
    }
    function open$1(uri, cb, qrcodeModalOptions) {
      injectStyleSheet();
      var wrapper = renderWrapper();
      React.render(React.createElement(Modal, {
        text: getText(),
        uri,
        onClose: getWrappedCallback(cb),
        qrcodeModalOptions
      }), wrapper);
    }
    function close$1() {
      triggerCloseAnimation();
    }
    var isNode2 = function() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    };
    function open$2(uri, cb, qrcodeModalOptions) {
      console.log(uri);
      if (isNode2()) {
        open(uri);
      } else {
        open$1(uri, cb, qrcodeModalOptions);
      }
    }
    function close$2() {
      if (isNode2()) ;
      else {
        close$1();
      }
    }
    var index = {
      open: open$2,
      close: close$2
    };
    module.exports = index;
  }
});

// node_modules/@walletconnect/utils/node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs5 = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow3(name) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
        res = window[name];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow3;
    function getFromWindowOrThrow3(name) {
      const res = getFromWindow3(name);
      if (!res) {
        throw new Error(`${name} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow3;
    function getDocumentOrThrow3() {
      return getFromWindowOrThrow3("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow3;
    function getDocument3() {
      return getFromWindow3("document");
    }
    exports.getDocument = getDocument3;
    function getNavigatorOrThrow3() {
      return getFromWindowOrThrow3("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow3;
    function getNavigator3() {
      return getFromWindow3("navigator");
    }
    exports.getNavigator = getNavigator3;
    function getLocationOrThrow3() {
      return getFromWindowOrThrow3("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow3;
    function getLocation3() {
      return getFromWindow3("location");
    }
    exports.getLocation = getLocation3;
    function getCryptoOrThrow3() {
      return getFromWindowOrThrow3("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow3;
    function getCrypto3() {
      return getFromWindow3("crypto");
    }
    exports.getCrypto = getCrypto3;
    function getLocalStorageOrThrow3() {
      return getFromWindowOrThrow3("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow3;
    function getLocalStorage3() {
      return getFromWindow3("localStorage");
    }
    exports.getLocalStorage = getLocalStorage3;
  }
});

// node_modules/@walletconnect/utils/node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs6 = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs5();
    function getWindowMetadata2() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e3) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i6 = 0; i6 < links.length; i6++) {
          const link = links[i6];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i6 = 0; i6 < metaTags.length; i6++) {
          const tag = metaTags[i6];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name2 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name2) {
          name2 = doc.title;
        }
        return name2;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata2;
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits, n3, s3) {
          return methods["cshake" + bits2].update(message, outputBits, n3, s3)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding2, outputType) {
        return function(key2, message, outputBits, s3) {
          return methods["kmac" + bits2].update(key2, message, outputBits, s3)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding2) {
        for (var i7 = 0; i7 < OUTPUT_TYPES.length; ++i7) {
          var type = OUTPUT_TYPES[i7];
          method[type] = createMethod2(bits2, padding2, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding2);
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding2);
      };
      var createCshakeMethod = function(bits2, padding2) {
        var w5 = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits, n3, s3) {
          if (!n3 && !s3) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding2, outputBits).bytepad([n3, s3], w5);
          }
        };
        method.update = function(message, outputBits, n3, s3) {
          return method.create(outputBits, n3, s3).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding2);
      };
      var createKmacMethod = function(bits2, padding2) {
        var w5 = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding2, "hex");
        method.create = function(key2, outputBits, s3) {
          return new Kmac(bits2, padding2, outputBits).bytepad(["KMAC", s3], w5).bytepad([key2], w5);
        };
        method.update = function(key2, message, outputBits, s3) {
          return method.create(key2, outputBits, s3).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding2);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i6 = 0; i6 < algorithms.length; ++i6) {
        var algorithm = algorithms[i6];
        var bits = algorithm.bits;
        for (var j3 = 0; j3 < bits.length; ++j3) {
          var methodName = algorithm.name + "_" + bits[j3];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j3], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j3];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i7 = 0; i7 < 50; ++i7) {
          this.s[i7] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s3 = this.s, i7, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i7 = 1; i7 < blockCount + 1; ++i7) {
              blocks[i7] = 0;
            }
          }
          if (notString) {
            for (i7 = this.start; index < length && i7 < byteCount; ++index) {
              blocks[i7 >> 2] |= message[index] << SHIFT[i7++ & 3];
            }
          } else {
            for (i7 = this.start; index < length && i7 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i7 >> 2] |= code << SHIFT[i7++ & 3];
              } else if (code < 2048) {
                blocks[i7 >> 2] |= (192 | code >> 6) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code & 63) << SHIFT[i7++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i7 >> 2] |= (224 | code >> 12) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code & 63) << SHIFT[i7++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i7 >> 2] |= (240 | code >> 18) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i7++ & 3];
                blocks[i7 >> 2] |= (128 | code & 63) << SHIFT[i7++ & 3];
              }
            }
          }
          this.lastByteIndex = i7;
          if (i7 >= byteCount) {
            this.start = i7 - byteCount;
            this.block = blocks[blockCount];
            for (i7 = 0; i7 < blockCount; ++i7) {
              s3[i7] ^= blocks[i7];
            }
            f5(s3);
            this.reset = true;
          } else {
            this.start = i7;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x6, right) {
        var o4 = x6 & 255, n3 = 1;
        var bytes = [o4];
        x6 = x6 >> 8;
        o4 = x6 & 255;
        while (o4 > 0) {
          bytes.unshift(o4);
          x6 = x6 >> 8;
          o4 = x6 & 255;
          ++n3;
        }
        if (right) {
          bytes.push(n3);
        } else {
          bytes.unshift(n3);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i7 = 0; i7 < str.length; ++i7) {
            var code = str.charCodeAt(i7);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i7) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w5) {
        var bytes = this.encode(w5);
        for (var i7 = 0; i7 < strs.length; ++i7) {
          bytes += this.encodeString(strs[i7]);
        }
        var paddingBytes = w5 - bytes % w5;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i7 = this.lastByteIndex, blockCount = this.blockCount, s3 = this.s;
        blocks[i7 >> 2] |= this.padding[i7 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i7 = 1; i7 < blockCount + 1; ++i7) {
            blocks[i7] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i7 = 0; i7 < blockCount; ++i7) {
          s3[i7] ^= blocks[i7];
        }
        f5(s3);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s3 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i7 = 0, j4 = 0;
        var hex = "", block;
        while (j4 < outputBlocks) {
          for (i7 = 0; i7 < blockCount && j4 < outputBlocks; ++i7, ++j4) {
            block = s3[i7];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j4 % blockCount === 0) {
            f5(s3);
            i7 = 0;
          }
        }
        if (extraBytes) {
          block = s3[i7];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s3 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i7 = 0, j4 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j4 < outputBlocks) {
          for (i7 = 0; i7 < blockCount && j4 < outputBlocks; ++i7, ++j4) {
            array[j4] = s3[i7];
          }
          if (j4 % blockCount === 0) {
            f5(s3);
          }
        }
        if (extraBytes) {
          array[i7] = s3[i7];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s3 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i7 = 0, j4 = 0;
        var array = [], offset, block;
        while (j4 < outputBlocks) {
          for (i7 = 0; i7 < blockCount && j4 < outputBlocks; ++i7, ++j4) {
            offset = j4 << 2;
            block = s3[i7];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j4 % blockCount === 0) {
            f5(s3);
          }
        }
        if (extraBytes) {
          offset = j4 << 2;
          block = s3[i7];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding2, outputBits) {
        Keccak.call(this, bits2, padding2, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f5 = function(s3) {
        var h5, l3, n3, c0, c1, c22, c32, c42, c5, c6, c7, c8, c9, b0, b1, b22, b32, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b222, b23, b24, b25, b26, b27, b28, b29, b30, b31, b322, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n3 = 0; n3 < 48; n3 += 2) {
          c0 = s3[0] ^ s3[10] ^ s3[20] ^ s3[30] ^ s3[40];
          c1 = s3[1] ^ s3[11] ^ s3[21] ^ s3[31] ^ s3[41];
          c22 = s3[2] ^ s3[12] ^ s3[22] ^ s3[32] ^ s3[42];
          c32 = s3[3] ^ s3[13] ^ s3[23] ^ s3[33] ^ s3[43];
          c42 = s3[4] ^ s3[14] ^ s3[24] ^ s3[34] ^ s3[44];
          c5 = s3[5] ^ s3[15] ^ s3[25] ^ s3[35] ^ s3[45];
          c6 = s3[6] ^ s3[16] ^ s3[26] ^ s3[36] ^ s3[46];
          c7 = s3[7] ^ s3[17] ^ s3[27] ^ s3[37] ^ s3[47];
          c8 = s3[8] ^ s3[18] ^ s3[28] ^ s3[38] ^ s3[48];
          c9 = s3[9] ^ s3[19] ^ s3[29] ^ s3[39] ^ s3[49];
          h5 = c8 ^ (c22 << 1 | c32 >>> 31);
          l3 = c9 ^ (c32 << 1 | c22 >>> 31);
          s3[0] ^= h5;
          s3[1] ^= l3;
          s3[10] ^= h5;
          s3[11] ^= l3;
          s3[20] ^= h5;
          s3[21] ^= l3;
          s3[30] ^= h5;
          s3[31] ^= l3;
          s3[40] ^= h5;
          s3[41] ^= l3;
          h5 = c0 ^ (c42 << 1 | c5 >>> 31);
          l3 = c1 ^ (c5 << 1 | c42 >>> 31);
          s3[2] ^= h5;
          s3[3] ^= l3;
          s3[12] ^= h5;
          s3[13] ^= l3;
          s3[22] ^= h5;
          s3[23] ^= l3;
          s3[32] ^= h5;
          s3[33] ^= l3;
          s3[42] ^= h5;
          s3[43] ^= l3;
          h5 = c22 ^ (c6 << 1 | c7 >>> 31);
          l3 = c32 ^ (c7 << 1 | c6 >>> 31);
          s3[4] ^= h5;
          s3[5] ^= l3;
          s3[14] ^= h5;
          s3[15] ^= l3;
          s3[24] ^= h5;
          s3[25] ^= l3;
          s3[34] ^= h5;
          s3[35] ^= l3;
          s3[44] ^= h5;
          s3[45] ^= l3;
          h5 = c42 ^ (c8 << 1 | c9 >>> 31);
          l3 = c5 ^ (c9 << 1 | c8 >>> 31);
          s3[6] ^= h5;
          s3[7] ^= l3;
          s3[16] ^= h5;
          s3[17] ^= l3;
          s3[26] ^= h5;
          s3[27] ^= l3;
          s3[36] ^= h5;
          s3[37] ^= l3;
          s3[46] ^= h5;
          s3[47] ^= l3;
          h5 = c6 ^ (c0 << 1 | c1 >>> 31);
          l3 = c7 ^ (c1 << 1 | c0 >>> 31);
          s3[8] ^= h5;
          s3[9] ^= l3;
          s3[18] ^= h5;
          s3[19] ^= l3;
          s3[28] ^= h5;
          s3[29] ^= l3;
          s3[38] ^= h5;
          s3[39] ^= l3;
          s3[48] ^= h5;
          s3[49] ^= l3;
          b0 = s3[0];
          b1 = s3[1];
          b322 = s3[11] << 4 | s3[10] >>> 28;
          b33 = s3[10] << 4 | s3[11] >>> 28;
          b14 = s3[20] << 3 | s3[21] >>> 29;
          b15 = s3[21] << 3 | s3[20] >>> 29;
          b46 = s3[31] << 9 | s3[30] >>> 23;
          b47 = s3[30] << 9 | s3[31] >>> 23;
          b28 = s3[40] << 18 | s3[41] >>> 14;
          b29 = s3[41] << 18 | s3[40] >>> 14;
          b20 = s3[2] << 1 | s3[3] >>> 31;
          b21 = s3[3] << 1 | s3[2] >>> 31;
          b22 = s3[13] << 12 | s3[12] >>> 20;
          b32 = s3[12] << 12 | s3[13] >>> 20;
          b34 = s3[22] << 10 | s3[23] >>> 22;
          b35 = s3[23] << 10 | s3[22] >>> 22;
          b16 = s3[33] << 13 | s3[32] >>> 19;
          b17 = s3[32] << 13 | s3[33] >>> 19;
          b48 = s3[42] << 2 | s3[43] >>> 30;
          b49 = s3[43] << 2 | s3[42] >>> 30;
          b40 = s3[5] << 30 | s3[4] >>> 2;
          b41 = s3[4] << 30 | s3[5] >>> 2;
          b222 = s3[14] << 6 | s3[15] >>> 26;
          b23 = s3[15] << 6 | s3[14] >>> 26;
          b4 = s3[25] << 11 | s3[24] >>> 21;
          b5 = s3[24] << 11 | s3[25] >>> 21;
          b36 = s3[34] << 15 | s3[35] >>> 17;
          b37 = s3[35] << 15 | s3[34] >>> 17;
          b18 = s3[45] << 29 | s3[44] >>> 3;
          b19 = s3[44] << 29 | s3[45] >>> 3;
          b10 = s3[6] << 28 | s3[7] >>> 4;
          b11 = s3[7] << 28 | s3[6] >>> 4;
          b42 = s3[17] << 23 | s3[16] >>> 9;
          b43 = s3[16] << 23 | s3[17] >>> 9;
          b24 = s3[26] << 25 | s3[27] >>> 7;
          b25 = s3[27] << 25 | s3[26] >>> 7;
          b6 = s3[36] << 21 | s3[37] >>> 11;
          b7 = s3[37] << 21 | s3[36] >>> 11;
          b38 = s3[47] << 24 | s3[46] >>> 8;
          b39 = s3[46] << 24 | s3[47] >>> 8;
          b30 = s3[8] << 27 | s3[9] >>> 5;
          b31 = s3[9] << 27 | s3[8] >>> 5;
          b12 = s3[18] << 20 | s3[19] >>> 12;
          b13 = s3[19] << 20 | s3[18] >>> 12;
          b44 = s3[29] << 7 | s3[28] >>> 25;
          b45 = s3[28] << 7 | s3[29] >>> 25;
          b26 = s3[38] << 8 | s3[39] >>> 24;
          b27 = s3[39] << 8 | s3[38] >>> 24;
          b8 = s3[48] << 14 | s3[49] >>> 18;
          b9 = s3[49] << 14 | s3[48] >>> 18;
          s3[0] = b0 ^ ~b22 & b4;
          s3[1] = b1 ^ ~b32 & b5;
          s3[10] = b10 ^ ~b12 & b14;
          s3[11] = b11 ^ ~b13 & b15;
          s3[20] = b20 ^ ~b222 & b24;
          s3[21] = b21 ^ ~b23 & b25;
          s3[30] = b30 ^ ~b322 & b34;
          s3[31] = b31 ^ ~b33 & b35;
          s3[40] = b40 ^ ~b42 & b44;
          s3[41] = b41 ^ ~b43 & b45;
          s3[2] = b22 ^ ~b4 & b6;
          s3[3] = b32 ^ ~b5 & b7;
          s3[12] = b12 ^ ~b14 & b16;
          s3[13] = b13 ^ ~b15 & b17;
          s3[22] = b222 ^ ~b24 & b26;
          s3[23] = b23 ^ ~b25 & b27;
          s3[32] = b322 ^ ~b34 & b36;
          s3[33] = b33 ^ ~b35 & b37;
          s3[42] = b42 ^ ~b44 & b46;
          s3[43] = b43 ^ ~b45 & b47;
          s3[4] = b4 ^ ~b6 & b8;
          s3[5] = b5 ^ ~b7 & b9;
          s3[14] = b14 ^ ~b16 & b18;
          s3[15] = b15 ^ ~b17 & b19;
          s3[24] = b24 ^ ~b26 & b28;
          s3[25] = b25 ^ ~b27 & b29;
          s3[34] = b34 ^ ~b36 & b38;
          s3[35] = b35 ^ ~b37 & b39;
          s3[44] = b44 ^ ~b46 & b48;
          s3[45] = b45 ^ ~b47 & b49;
          s3[6] = b6 ^ ~b8 & b0;
          s3[7] = b7 ^ ~b9 & b1;
          s3[16] = b16 ^ ~b18 & b10;
          s3[17] = b17 ^ ~b19 & b11;
          s3[26] = b26 ^ ~b28 & b20;
          s3[27] = b27 ^ ~b29 & b21;
          s3[36] = b36 ^ ~b38 & b30;
          s3[37] = b37 ^ ~b39 & b31;
          s3[46] = b46 ^ ~b48 & b40;
          s3[47] = b47 ^ ~b49 & b41;
          s3[8] = b8 ^ ~b0 & b22;
          s3[9] = b9 ^ ~b1 & b32;
          s3[18] = b18 ^ ~b10 & b12;
          s3[19] = b19 ^ ~b11 & b13;
          s3[28] = b28 ^ ~b20 & b222;
          s3[29] = b29 ^ ~b21 & b23;
          s3[38] = b38 ^ ~b30 & b322;
          s3[39] = b39 ^ ~b31 & b33;
          s3[48] = b48 ^ ~b40 & b42;
          s3[49] = b49 ^ ~b41 & b43;
          s3[0] ^= RC[n3];
          s3[1] ^= RC[n3 + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i6 = 0; i6 < methodNames.length; ++i6) {
          root[methodNames[i6]] = methods[methodNames[i6]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/package.json
var require_package = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/package.json"(exports, module) {
    module.exports = {
      name: "elliptic",
      version: "6.6.0",
      description: "EC cryptography",
      main: "lib/elliptic.js",
      files: [
        "lib"
      ],
      scripts: {
        lint: "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        test: "npm run lint && npm run unit",
        version: "grunt dist && git add dist/"
      },
      repository: {
        type: "git",
        url: "git@github.com:indutny/elliptic"
      },
      keywords: [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      author: "Fedor Indutny <fedor@indutny.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      homepage: "https://github.com/indutny/elliptic",
      devDependencies: {
        brfs: "^2.0.2",
        coveralls: "^3.1.0",
        eslint: "^7.6.0",
        grunt: "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        istanbul: "^0.4.5",
        mocha: "^8.0.1"
      },
      dependencies: {
        "bn.js": "^4.11.9",
        brorand: "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        inherits: "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
  }
});

// node_modules/@walletconnect/utils/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/bn.js/lib/bn.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
        }
      } catch (e3) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          this.words[i6] = 0;
        }
        var j3, w5;
        var off = 0;
        if (endian === "be") {
          for (i6 = number.length - 1, j3 = 0; i6 >= 0; i6 -= 3) {
            w5 = number[i6] | number[i6 - 1] << 8 | number[i6 - 2] << 16;
            this.words[j3] |= w5 << off & 67108863;
            this.words[j3 + 1] = w5 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        } else if (endian === "le") {
          for (i6 = 0, j3 = 0; i6 < number.length; i6 += 3) {
            w5 = number[i6] | number[i6 + 1] << 8 | number[i6 + 2] << 16;
            this.words[j3] |= w5 << off & 67108863;
            this.words[j3 + 1] = w5 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c5 = string.charCodeAt(index);
        if (c5 >= 65 && c5 <= 70) {
          return c5 - 55;
        } else if (c5 >= 97 && c5 <= 102) {
          return c5 - 87;
        } else {
          return c5 - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r5 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r5 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r5;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          this.words[i6] = 0;
        }
        var off = 0;
        var j3 = 0;
        var w5;
        if (endian === "be") {
          for (i6 = number.length - 1; i6 >= start; i6 -= 2) {
            w5 = parseHexByte(number, start, i6) << off;
            this.words[j3] |= w5 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w5 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i6 = parseLength % 2 === 0 ? start + 1 : start; i6 < number.length; i6 += 2) {
            w5 = parseHexByte(number, start, i6) << off;
            this.words[j3] |= w5 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w5 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul3) {
        var r5 = 0;
        var len = Math.min(str.length, end);
        for (var i6 = start; i6 < len; i6++) {
          var c5 = str.charCodeAt(i6) - 48;
          r5 *= mul3;
          if (c5 >= 49) {
            r5 += c5 - 49 + 10;
          } else if (c5 >= 17) {
            r5 += c5 - 17 + 10;
          } else {
            r5 += c5;
          }
        }
        return r5;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i6 = start; i6 < end; i6 += limbLen) {
          word = parseBase(number, i6, i6 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i6, number.length, base2);
          for (i6 = 0; i6 < mod; i6++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          dest.words[i6] = this.words[i6];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r5 = new BN3(null);
        this.copy(r5);
        return r5;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString2(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i6 = 0; i6 < this.length; i6++) {
            var w5 = this.words[i6];
            var word = ((w5 << off | carry) & 16777215).toString(16);
            carry = w5 >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i6--;
            }
            if (carry !== 0 || i6 !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c5 = this.clone();
          c5.negative = 0;
          while (!c5.isZero()) {
            var r5 = c5.modn(groupBase).toString(base2);
            c5 = c5.idivn(groupBase);
            if (!c5.isZero()) {
              out = zeros2[groupSize - r5.length] + r5 + out;
            } else {
              out = r5 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b4, i6;
        var q5 = this.clone();
        if (!littleEndian) {
          for (i6 = 0; i6 < reqLength - byteLength; i6++) {
            res[i6] = 0;
          }
          for (i6 = 0; !q5.isZero(); i6++) {
            b4 = q5.andln(255);
            q5.iushrn(8);
            res[reqLength - i6 - 1] = b4;
          }
        } else {
          for (i6 = 0; !q5.isZero(); i6++) {
            b4 = q5.andln(255);
            q5.iushrn(8);
            res[i6] = b4;
          }
          for (; i6 < reqLength; i6++) {
            res[i6] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w5) {
          return 32 - Math.clz32(w5);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w5) {
          var t3 = w5;
          var r5 = 0;
          if (t3 >= 4096) {
            r5 += 13;
            t3 >>>= 13;
          }
          if (t3 >= 64) {
            r5 += 7;
            t3 >>>= 7;
          }
          if (t3 >= 8) {
            r5 += 4;
            t3 >>>= 4;
          }
          if (t3 >= 2) {
            r5 += 2;
            t3 >>>= 2;
          }
          return r5 + t3;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w5) {
        if (w5 === 0) return 26;
        var t3 = w5;
        var r5 = 0;
        if ((t3 & 8191) === 0) {
          r5 += 13;
          t3 >>>= 13;
        }
        if ((t3 & 127) === 0) {
          r5 += 7;
          t3 >>>= 7;
        }
        if ((t3 & 15) === 0) {
          r5 += 4;
          t3 >>>= 4;
        }
        if ((t3 & 3) === 0) {
          r5 += 2;
          t3 >>>= 2;
        }
        if ((t3 & 1) === 0) {
          r5++;
        }
        return r5;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w5 = this.words[this.length - 1];
        var hi2 = this._countBits(w5);
        return (this.length - 1) * 26 + hi2;
      };
      function toBitArray(num) {
        var w5 = new Array(num.bitLength());
        for (var bit = 0; bit < w5.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w5[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w5;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r5 = 0;
        for (var i6 = 0; i6 < this.length; i6++) {
          var b4 = this._zeroBits(this.words[i6]);
          r5 += b4;
          if (b4 !== 26) break;
        }
        return r5;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i6 = 0; i6 < num.length; i6++) {
          this.words[i6] = this.words[i6] | num.words[i6];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or2(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b4;
        if (this.length > num.length) {
          b4 = num;
        } else {
          b4 = this;
        }
        for (var i6 = 0; i6 < b4.length; i6++) {
          this.words[i6] = this.words[i6] & num.words[i6];
        }
        this.length = b4.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a4;
        var b4;
        if (this.length > num.length) {
          a4 = this;
          b4 = num;
        } else {
          a4 = num;
          b4 = this;
        }
        for (var i6 = 0; i6 < b4.length; i6++) {
          this.words[i6] = a4.words[i6] ^ b4.words[i6];
        }
        if (this !== a4) {
          for (; i6 < a4.length; i6++) {
            this.words[i6] = a4.words[i6];
          }
        }
        this.length = a4.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i6 = 0; i6 < bytesNeeded; i6++) {
          this.words[i6] = ~this.words[i6] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i6] = ~this.words[i6] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r5;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r5 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r5 = this.isub(num);
          num.negative = 1;
          return r5._normSign();
        }
        var a4, b4;
        if (this.length > num.length) {
          a4 = this;
          b4 = num;
        } else {
          a4 = num;
          b4 = this;
        }
        var carry = 0;
        for (var i6 = 0; i6 < b4.length; i6++) {
          r5 = (a4.words[i6] | 0) + (b4.words[i6] | 0) + carry;
          this.words[i6] = r5 & 67108863;
          carry = r5 >>> 26;
        }
        for (; carry !== 0 && i6 < a4.length; i6++) {
          r5 = (a4.words[i6] | 0) + carry;
          this.words[i6] = r5 & 67108863;
          carry = r5 >>> 26;
        }
        this.length = a4.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a4 !== this) {
          for (; i6 < a4.length; i6++) {
            this.words[i6] = a4.words[i6];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r5 = this.iadd(num);
          num.negative = 1;
          return r5._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a4, b4;
        if (cmp > 0) {
          a4 = this;
          b4 = num;
        } else {
          a4 = num;
          b4 = this;
        }
        var carry = 0;
        for (var i6 = 0; i6 < b4.length; i6++) {
          r5 = (a4.words[i6] | 0) - (b4.words[i6] | 0) + carry;
          carry = r5 >> 26;
          this.words[i6] = r5 & 67108863;
        }
        for (; carry !== 0 && i6 < a4.length; i6++) {
          r5 = (a4.words[i6] | 0) + carry;
          carry = r5 >> 26;
          this.words[i6] = r5 & 67108863;
        }
        if (carry === 0 && i6 < a4.length && a4 !== this) {
          for (; i6 < a4.length; i6++) {
            this.words[i6] = a4.words[i6];
          }
        }
        this.length = Math.max(this.length, i6);
        if (a4 !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a4 = self2.words[0] | 0;
        var b4 = num.words[0] | 0;
        var r5 = a4 * b4;
        var lo2 = r5 & 67108863;
        var carry = r5 / 67108864 | 0;
        out.words[0] = lo2;
        for (var k5 = 1; k5 < len; k5++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k5, num.length - 1);
          for (var j3 = Math.max(0, k5 - self2.length + 1); j3 <= maxJ; j3++) {
            var i6 = k5 - j3 | 0;
            a4 = self2.words[i6] | 0;
            b4 = num.words[j3] | 0;
            r5 = a4 * b4 + rword;
            ncarry += r5 / 67108864 | 0;
            rword = r5 & 67108863;
          }
          out.words[k5] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k5] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a4 = self2.words;
        var b4 = num.words;
        var o4 = out.words;
        var c5 = 0;
        var lo2;
        var mid;
        var hi2;
        var a0 = a4[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a4[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a4[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a32 = a4[3] | 0;
        var al3 = a32 & 8191;
        var ah3 = a32 >>> 13;
        var a42 = a4[4] | 0;
        var al4 = a42 & 8191;
        var ah4 = a42 >>> 13;
        var a5 = a4[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a4[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a4[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a4[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a4[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b4[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b4[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b4[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b32 = b4[3] | 0;
        var bl3 = b32 & 8191;
        var bh3 = b32 >>> 13;
        var b42 = b4[4] | 0;
        var bl4 = b42 & 8191;
        var bh4 = b42 >>> 13;
        var b5 = b4[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b4[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b4[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b4[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b4[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo2 = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi2 = Math.imul(ah0, bh0);
        var w0 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo2 = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi2 = Math.imul(ah1, bh0);
        lo2 = lo2 + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi2 = hi2 + Math.imul(ah0, bh1) | 0;
        var w1 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo2 = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi2 = Math.imul(ah2, bh0);
        lo2 = lo2 + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi2 = hi2 + Math.imul(ah1, bh1) | 0;
        lo2 = lo2 + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi2 = hi2 + Math.imul(ah0, bh2) | 0;
        var w22 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo2 = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi2 = Math.imul(ah3, bh0);
        lo2 = lo2 + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi2 = hi2 + Math.imul(ah2, bh1) | 0;
        lo2 = lo2 + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi2 = hi2 + Math.imul(ah1, bh2) | 0;
        lo2 = lo2 + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi2 = hi2 + Math.imul(ah0, bh3) | 0;
        var w32 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
        w32 &= 67108863;
        lo2 = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi2 = Math.imul(ah4, bh0);
        lo2 = lo2 + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi2 = hi2 + Math.imul(ah3, bh1) | 0;
        lo2 = lo2 + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi2 = hi2 + Math.imul(ah2, bh2) | 0;
        lo2 = lo2 + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi2 = hi2 + Math.imul(ah1, bh3) | 0;
        lo2 = lo2 + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi2 = hi2 + Math.imul(ah0, bh4) | 0;
        var w42 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w42 >>> 26) | 0;
        w42 &= 67108863;
        lo2 = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi2 = Math.imul(ah5, bh0);
        lo2 = lo2 + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi2 = hi2 + Math.imul(ah4, bh1) | 0;
        lo2 = lo2 + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi2 = hi2 + Math.imul(ah3, bh2) | 0;
        lo2 = lo2 + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi2 = hi2 + Math.imul(ah2, bh3) | 0;
        lo2 = lo2 + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi2 = hi2 + Math.imul(ah1, bh4) | 0;
        lo2 = lo2 + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi2 = hi2 + Math.imul(ah0, bh5) | 0;
        var w5 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo2 = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi2 = Math.imul(ah6, bh0);
        lo2 = lo2 + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi2 = hi2 + Math.imul(ah5, bh1) | 0;
        lo2 = lo2 + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi2 = hi2 + Math.imul(ah4, bh2) | 0;
        lo2 = lo2 + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi2 = hi2 + Math.imul(ah3, bh3) | 0;
        lo2 = lo2 + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi2 = hi2 + Math.imul(ah2, bh4) | 0;
        lo2 = lo2 + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi2 = hi2 + Math.imul(ah1, bh5) | 0;
        lo2 = lo2 + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi2 = hi2 + Math.imul(ah0, bh6) | 0;
        var w6 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo2 = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi2 = Math.imul(ah7, bh0);
        lo2 = lo2 + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi2 = hi2 + Math.imul(ah6, bh1) | 0;
        lo2 = lo2 + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi2 = hi2 + Math.imul(ah5, bh2) | 0;
        lo2 = lo2 + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi2 = hi2 + Math.imul(ah4, bh3) | 0;
        lo2 = lo2 + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi2 = hi2 + Math.imul(ah3, bh4) | 0;
        lo2 = lo2 + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi2 = hi2 + Math.imul(ah2, bh5) | 0;
        lo2 = lo2 + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi2 = hi2 + Math.imul(ah1, bh6) | 0;
        lo2 = lo2 + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi2 = hi2 + Math.imul(ah0, bh7) | 0;
        var w7 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo2 = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi2 = Math.imul(ah8, bh0);
        lo2 = lo2 + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi2 = hi2 + Math.imul(ah7, bh1) | 0;
        lo2 = lo2 + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi2 = hi2 + Math.imul(ah6, bh2) | 0;
        lo2 = lo2 + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi2 = hi2 + Math.imul(ah5, bh3) | 0;
        lo2 = lo2 + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi2 = hi2 + Math.imul(ah4, bh4) | 0;
        lo2 = lo2 + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi2 = hi2 + Math.imul(ah3, bh5) | 0;
        lo2 = lo2 + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi2 = hi2 + Math.imul(ah2, bh6) | 0;
        lo2 = lo2 + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi2 = hi2 + Math.imul(ah1, bh7) | 0;
        lo2 = lo2 + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi2 = hi2 + Math.imul(ah0, bh8) | 0;
        var w8 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo2 = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi2 = Math.imul(ah9, bh0);
        lo2 = lo2 + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi2 = hi2 + Math.imul(ah8, bh1) | 0;
        lo2 = lo2 + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi2 = hi2 + Math.imul(ah7, bh2) | 0;
        lo2 = lo2 + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi2 = hi2 + Math.imul(ah6, bh3) | 0;
        lo2 = lo2 + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi2 = hi2 + Math.imul(ah5, bh4) | 0;
        lo2 = lo2 + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi2 = hi2 + Math.imul(ah4, bh5) | 0;
        lo2 = lo2 + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi2 = hi2 + Math.imul(ah3, bh6) | 0;
        lo2 = lo2 + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi2 = hi2 + Math.imul(ah2, bh7) | 0;
        lo2 = lo2 + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi2 = hi2 + Math.imul(ah1, bh8) | 0;
        lo2 = lo2 + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi2 = hi2 + Math.imul(ah0, bh9) | 0;
        var w9 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo2 = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi2 = Math.imul(ah9, bh1);
        lo2 = lo2 + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi2 = hi2 + Math.imul(ah8, bh2) | 0;
        lo2 = lo2 + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi2 = hi2 + Math.imul(ah7, bh3) | 0;
        lo2 = lo2 + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi2 = hi2 + Math.imul(ah6, bh4) | 0;
        lo2 = lo2 + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi2 = hi2 + Math.imul(ah5, bh5) | 0;
        lo2 = lo2 + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi2 = hi2 + Math.imul(ah4, bh6) | 0;
        lo2 = lo2 + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi2 = hi2 + Math.imul(ah3, bh7) | 0;
        lo2 = lo2 + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi2 = hi2 + Math.imul(ah2, bh8) | 0;
        lo2 = lo2 + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi2 = hi2 + Math.imul(ah1, bh9) | 0;
        var w10 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo2 = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi2 = Math.imul(ah9, bh2);
        lo2 = lo2 + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi2 = hi2 + Math.imul(ah8, bh3) | 0;
        lo2 = lo2 + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi2 = hi2 + Math.imul(ah7, bh4) | 0;
        lo2 = lo2 + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi2 = hi2 + Math.imul(ah6, bh5) | 0;
        lo2 = lo2 + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi2 = hi2 + Math.imul(ah5, bh6) | 0;
        lo2 = lo2 + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi2 = hi2 + Math.imul(ah4, bh7) | 0;
        lo2 = lo2 + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi2 = hi2 + Math.imul(ah3, bh8) | 0;
        lo2 = lo2 + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi2 = hi2 + Math.imul(ah2, bh9) | 0;
        var w11 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo2 = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi2 = Math.imul(ah9, bh3);
        lo2 = lo2 + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi2 = hi2 + Math.imul(ah8, bh4) | 0;
        lo2 = lo2 + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi2 = hi2 + Math.imul(ah7, bh5) | 0;
        lo2 = lo2 + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi2 = hi2 + Math.imul(ah6, bh6) | 0;
        lo2 = lo2 + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi2 = hi2 + Math.imul(ah5, bh7) | 0;
        lo2 = lo2 + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi2 = hi2 + Math.imul(ah4, bh8) | 0;
        lo2 = lo2 + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi2 = hi2 + Math.imul(ah3, bh9) | 0;
        var w12 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo2 = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi2 = Math.imul(ah9, bh4);
        lo2 = lo2 + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi2 = hi2 + Math.imul(ah8, bh5) | 0;
        lo2 = lo2 + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi2 = hi2 + Math.imul(ah7, bh6) | 0;
        lo2 = lo2 + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi2 = hi2 + Math.imul(ah6, bh7) | 0;
        lo2 = lo2 + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi2 = hi2 + Math.imul(ah5, bh8) | 0;
        lo2 = lo2 + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi2 = hi2 + Math.imul(ah4, bh9) | 0;
        var w13 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo2 = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi2 = Math.imul(ah9, bh5);
        lo2 = lo2 + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi2 = hi2 + Math.imul(ah8, bh6) | 0;
        lo2 = lo2 + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi2 = hi2 + Math.imul(ah7, bh7) | 0;
        lo2 = lo2 + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi2 = hi2 + Math.imul(ah6, bh8) | 0;
        lo2 = lo2 + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi2 = hi2 + Math.imul(ah5, bh9) | 0;
        var w14 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo2 = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi2 = Math.imul(ah9, bh6);
        lo2 = lo2 + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi2 = hi2 + Math.imul(ah8, bh7) | 0;
        lo2 = lo2 + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi2 = hi2 + Math.imul(ah7, bh8) | 0;
        lo2 = lo2 + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi2 = hi2 + Math.imul(ah6, bh9) | 0;
        var w15 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo2 = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi2 = Math.imul(ah9, bh7);
        lo2 = lo2 + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi2 = hi2 + Math.imul(ah8, bh8) | 0;
        lo2 = lo2 + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi2 = hi2 + Math.imul(ah7, bh9) | 0;
        var w16 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo2 = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi2 = Math.imul(ah9, bh8);
        lo2 = lo2 + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi2 = hi2 + Math.imul(ah8, bh9) | 0;
        var w17 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo2 = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi2 = Math.imul(ah9, bh9);
        var w18 = (c5 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o4[0] = w0;
        o4[1] = w1;
        o4[2] = w22;
        o4[3] = w32;
        o4[4] = w42;
        o4[5] = w5;
        o4[6] = w6;
        o4[7] = w7;
        o4[8] = w8;
        o4[9] = w9;
        o4[10] = w10;
        o4[11] = w11;
        o4[12] = w12;
        o4[13] = w13;
        o4[14] = w14;
        o4[15] = w15;
        o4[16] = w16;
        o4[17] = w17;
        o4[18] = w18;
        if (c5 !== 0) {
          o4[19] = c5;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k5 = 0; k5 < out.length - 1; k5++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k5, num.length - 1);
          for (var j3 = Math.max(0, k5 - self2.length + 1); j3 <= maxJ; j3++) {
            var i6 = k5 - j3;
            var a4 = self2.words[i6] | 0;
            var b4 = num.words[j3] | 0;
            var r5 = a4 * b4;
            var lo2 = r5 & 67108863;
            ncarry = ncarry + (r5 / 67108864 | 0) | 0;
            lo2 = lo2 + rword | 0;
            rword = lo2 & 67108863;
            ncarry = ncarry + (lo2 >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k5] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k5] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x6, y6) {
        this.x = x6;
        this.y = y6;
      }
      FFTM.prototype.makeRBT = function makeRBT(N4) {
        var t3 = new Array(N4);
        var l3 = BN3.prototype._countBits(N4) - 1;
        for (var i6 = 0; i6 < N4; i6++) {
          t3[i6] = this.revBin(i6, l3, N4);
        }
        return t3;
      };
      FFTM.prototype.revBin = function revBin(x6, l3, N4) {
        if (x6 === 0 || x6 === N4 - 1) return x6;
        var rb = 0;
        for (var i6 = 0; i6 < l3; i6++) {
          rb |= (x6 & 1) << l3 - i6 - 1;
          x6 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
        for (var i6 = 0; i6 < N4; i6++) {
          rtws[i6] = rws[rbt[i6]];
          itws[i6] = iws[rbt[i6]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N4);
        for (var s3 = 1; s3 < N4; s3 <<= 1) {
          var l3 = s3 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l3);
          var itwdf = Math.sin(2 * Math.PI / l3);
          for (var p4 = 0; p4 < N4; p4 += l3) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j3 = 0; j3 < s3; j3++) {
              var re3 = rtws[p4 + j3];
              var ie2 = itws[p4 + j3];
              var ro2 = rtws[p4 + j3 + s3];
              var io2 = itws[p4 + j3 + s3];
              var rx = rtwdf_ * ro2 - itwdf_ * io2;
              io2 = rtwdf_ * io2 + itwdf_ * ro2;
              ro2 = rx;
              rtws[p4 + j3] = re3 + ro2;
              itws[p4 + j3] = ie2 + io2;
              rtws[p4 + j3 + s3] = re3 - ro2;
              itws[p4 + j3 + s3] = ie2 - io2;
              if (j3 !== l3) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n3, m3) {
        var N4 = Math.max(m3, n3) | 1;
        var odd = N4 & 1;
        var i6 = 0;
        for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
          i6++;
        }
        return 1 << i6 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
        if (N4 <= 1) return;
        for (var i6 = 0; i6 < N4 / 2; i6++) {
          var t3 = rws[i6];
          rws[i6] = rws[N4 - i6 - 1];
          rws[N4 - i6 - 1] = t3;
          t3 = iws[i6];
          iws[i6] = -iws[N4 - i6 - 1];
          iws[N4 - i6 - 1] = -t3;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws2, N4) {
        var carry = 0;
        for (var i6 = 0; i6 < N4 / 2; i6++) {
          var w5 = Math.round(ws2[2 * i6 + 1] / N4) * 8192 + Math.round(ws2[2 * i6] / N4) + carry;
          ws2[i6] = w5 & 67108863;
          if (w5 < 67108864) {
            carry = 0;
          } else {
            carry = w5 / 67108864 | 0;
          }
        }
        return ws2;
      };
      FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N4) {
        var carry = 0;
        for (var i6 = 0; i6 < len; i6++) {
          carry = carry + (ws2[i6] | 0);
          rws[2 * i6] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i6 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i6 = 2 * len; i6 < N4; ++i6) {
          rws[i6] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N4) {
        var ph = new Array(N4);
        for (var i6 = 0; i6 < N4; i6++) {
          ph[i6] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x6, y6, out) {
        var N4 = 2 * this.guessLen13b(x6.length, y6.length);
        var rbt = this.makeRBT(N4);
        var _5 = this.stub(N4);
        var rws = new Array(N4);
        var rwst = new Array(N4);
        var iwst = new Array(N4);
        var nrws = new Array(N4);
        var nrwst = new Array(N4);
        var niwst = new Array(N4);
        var rmws = out.words;
        rmws.length = N4;
        this.convert13b(x6.words, x6.length, rws, N4);
        this.convert13b(y6.words, y6.length, nrws, N4);
        this.transform(rws, _5, rwst, iwst, N4, rbt);
        this.transform(nrws, _5, nrwst, niwst, N4, rbt);
        for (var i6 = 0; i6 < N4; i6++) {
          var rx = rwst[i6] * nrwst[i6] - iwst[i6] * niwst[i6];
          iwst[i6] = rwst[i6] * niwst[i6] + iwst[i6] * nrwst[i6];
          rwst[i6] = rx;
        }
        this.conjugate(rwst, iwst, N4);
        this.transform(rwst, iwst, rmws, _5, N4, rbt);
        this.conjugate(rmws, _5, N4);
        this.normalize13b(rmws, N4);
        out.negative = x6.negative ^ y6.negative;
        out.length = x6.length + y6.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i6 = 0; i6 < this.length; i6++) {
          var w5 = (this.words[i6] | 0) * num;
          var lo2 = (w5 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w5 / 67108864 | 0;
          carry += lo2 >>> 26;
          this.words[i6] = lo2 & 67108863;
        }
        if (carry !== 0) {
          this.words[i6] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w5 = toBitArray(num);
        if (w5.length === 0) return new BN3(1);
        var res = this;
        for (var i6 = 0; i6 < w5.length; i6++, res = res.sqr()) {
          if (w5[i6] !== 0) break;
        }
        if (++i6 < w5.length) {
          for (var q5 = res.sqr(); i6 < w5.length; i6++, q5 = q5.sqr()) {
            if (w5[i6] === 0) continue;
            res = res.mul(q5);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r5 = bits % 26;
        var s3 = (bits - r5) / 26;
        var carryMask = 67108863 >>> 26 - r5 << 26 - r5;
        var i6;
        if (r5 !== 0) {
          var carry = 0;
          for (i6 = 0; i6 < this.length; i6++) {
            var newCarry = this.words[i6] & carryMask;
            var c5 = (this.words[i6] | 0) - newCarry << r5;
            this.words[i6] = c5 | carry;
            carry = newCarry >>> 26 - r5;
          }
          if (carry) {
            this.words[i6] = carry;
            this.length++;
          }
        }
        if (s3 !== 0) {
          for (i6 = this.length - 1; i6 >= 0; i6--) {
            this.words[i6 + s3] = this.words[i6];
          }
          for (i6 = 0; i6 < s3; i6++) {
            this.words[i6] = 0;
          }
          this.length += s3;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h5;
        if (hint) {
          h5 = (hint - hint % 26) / 26;
        } else {
          h5 = 0;
        }
        var r5 = bits % 26;
        var s3 = Math.min((bits - r5) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r5 << r5;
        var maskedWords = extended;
        h5 -= s3;
        h5 = Math.max(0, h5);
        if (maskedWords) {
          for (var i6 = 0; i6 < s3; i6++) {
            maskedWords.words[i6] = this.words[i6];
          }
          maskedWords.length = s3;
        }
        if (s3 === 0) {
        } else if (this.length > s3) {
          this.length -= s3;
          for (i6 = 0; i6 < this.length; i6++) {
            this.words[i6] = this.words[i6 + s3];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i6 = this.length - 1; i6 >= 0 && (carry !== 0 || i6 >= h5); i6--) {
          var word = this.words[i6] | 0;
          this.words[i6] = carry << 26 - r5 | word >>> r5;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r5 = bit % 26;
        var s3 = (bit - r5) / 26;
        var q5 = 1 << r5;
        if (this.length <= s3) return false;
        var w5 = this.words[s3];
        return !!(w5 & q5);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r5 = bits % 26;
        var s3 = (bits - r5) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s3) {
          return this;
        }
        if (r5 !== 0) {
          s3++;
        }
        this.length = Math.min(s3, this.length);
        if (r5 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r5 << r5;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i6 = 0; i6 < this.length && this.words[i6] >= 67108864; i6++) {
          this.words[i6] -= 67108864;
          if (i6 === this.length - 1) {
            this.words[i6 + 1] = 1;
          } else {
            this.words[i6 + 1]++;
          }
        }
        this.length = Math.max(this.length, i6 + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i6 = 0; i6 < this.length && this.words[i6] < 0; i6++) {
            this.words[i6] += 67108864;
            this.words[i6 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i6;
        this._expand(len);
        var w5;
        var carry = 0;
        for (i6 = 0; i6 < num.length; i6++) {
          w5 = (this.words[i6 + shift] | 0) + carry;
          var right = (num.words[i6] | 0) * mul3;
          w5 -= right & 67108863;
          carry = (w5 >> 26) - (right / 67108864 | 0);
          this.words[i6 + shift] = w5 & 67108863;
        }
        for (; i6 < this.length - shift; i6++) {
          w5 = (this.words[i6 + shift] | 0) + carry;
          carry = w5 >> 26;
          this.words[i6 + shift] = w5 & 67108863;
        }
        if (carry === 0) return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i6 = 0; i6 < this.length; i6++) {
          w5 = -(this.words[i6] | 0) + carry;
          carry = w5 >> 26;
          this.words[i6] = w5 & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a4 = this.clone();
        var b4 = num;
        var bhi = b4.words[b4.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b4 = b4.ushln(shift);
          a4.iushln(shift);
          bhi = b4.words[b4.length - 1] | 0;
        }
        var m3 = a4.length - b4.length;
        var q5;
        if (mode !== "mod") {
          q5 = new BN3(null);
          q5.length = m3 + 1;
          q5.words = new Array(q5.length);
          for (var i6 = 0; i6 < q5.length; i6++) {
            q5.words[i6] = 0;
          }
        }
        var diff = a4.clone()._ishlnsubmul(b4, 1, m3);
        if (diff.negative === 0) {
          a4 = diff;
          if (q5) {
            q5.words[m3] = 1;
          }
        }
        for (var j3 = m3 - 1; j3 >= 0; j3--) {
          var qj = (a4.words[b4.length + j3] | 0) * 67108864 + (a4.words[b4.length + j3 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a4._ishlnsubmul(b4, qj, j3);
          while (a4.negative !== 0) {
            qj--;
            a4.negative = 0;
            a4._ishlnsubmul(b4, 1, j3);
            if (!a4.isZero()) {
              a4.negative ^= 1;
            }
          }
          if (q5) {
            q5.words[j3] = qj;
          }
        }
        if (q5) {
          q5.strip();
        }
        a4.strip();
        if (mode !== "div" && shift !== 0) {
          a4.iushrn(shift);
        }
        return {
          div: q5 || null,
          mod: a4
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r22 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r22 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p4 = (1 << 26) % num;
        var acc = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          acc = (p4 * acc + (this.words[i6] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          var w5 = (this.words[i6] | 0) + carry * 67108864;
          this.words[i6] = w5 / num | 0;
          carry = w5 % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p4) {
        assert2(p4.negative === 0);
        assert2(!p4.isZero());
        var x6 = this;
        var y6 = p4.clone();
        if (x6.negative !== 0) {
          x6 = x6.umod(p4);
        } else {
          x6 = x6.clone();
        }
        var A6 = new BN3(1);
        var B4 = new BN3(0);
        var C6 = new BN3(0);
        var D5 = new BN3(1);
        var g5 = 0;
        while (x6.isEven() && y6.isEven()) {
          x6.iushrn(1);
          y6.iushrn(1);
          ++g5;
        }
        var yp = y6.clone();
        var xp = x6.clone();
        while (!x6.isZero()) {
          for (var i6 = 0, im = 1; (x6.words[0] & im) === 0 && i6 < 26; ++i6, im <<= 1) ;
          if (i6 > 0) {
            x6.iushrn(i6);
            while (i6-- > 0) {
              if (A6.isOdd() || B4.isOdd()) {
                A6.iadd(yp);
                B4.isub(xp);
              }
              A6.iushrn(1);
              B4.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (y6.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
          if (j3 > 0) {
            y6.iushrn(j3);
            while (j3-- > 0) {
              if (C6.isOdd() || D5.isOdd()) {
                C6.iadd(yp);
                D5.isub(xp);
              }
              C6.iushrn(1);
              D5.iushrn(1);
            }
          }
          if (x6.cmp(y6) >= 0) {
            x6.isub(y6);
            A6.isub(C6);
            B4.isub(D5);
          } else {
            y6.isub(x6);
            C6.isub(A6);
            D5.isub(B4);
          }
        }
        return {
          a: C6,
          b: D5,
          gcd: y6.iushln(g5)
        };
      };
      BN3.prototype._invmp = function _invmp(p4) {
        assert2(p4.negative === 0);
        assert2(!p4.isZero());
        var a4 = this;
        var b4 = p4.clone();
        if (a4.negative !== 0) {
          a4 = a4.umod(p4);
        } else {
          a4 = a4.clone();
        }
        var x1 = new BN3(1);
        var x22 = new BN3(0);
        var delta = b4.clone();
        while (a4.cmpn(1) > 0 && b4.cmpn(1) > 0) {
          for (var i6 = 0, im = 1; (a4.words[0] & im) === 0 && i6 < 26; ++i6, im <<= 1) ;
          if (i6 > 0) {
            a4.iushrn(i6);
            while (i6-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (b4.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1) ;
          if (j3 > 0) {
            b4.iushrn(j3);
            while (j3-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a4.cmp(b4) >= 0) {
            a4.isub(b4);
            x1.isub(x22);
          } else {
            b4.isub(a4);
            x22.isub(x1);
          }
        }
        var res;
        if (a4.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p4);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a4 = this.clone();
        var b4 = num.clone();
        a4.negative = 0;
        b4.negative = 0;
        for (var shift = 0; a4.isEven() && b4.isEven(); shift++) {
          a4.iushrn(1);
          b4.iushrn(1);
        }
        do {
          while (a4.isEven()) {
            a4.iushrn(1);
          }
          while (b4.isEven()) {
            b4.iushrn(1);
          }
          var r5 = a4.cmp(b4);
          if (r5 < 0) {
            var t3 = a4;
            a4 = b4;
            b4 = t3;
          } else if (r5 === 0 || b4.cmpn(1) === 0) {
            break;
          }
          a4.isub(b4);
        } while (true);
        return b4.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r5 = bit % 26;
        var s3 = (bit - r5) / 26;
        var q5 = 1 << r5;
        if (this.length <= s3) {
          this._expand(s3 + 1);
          this.words[s3] |= q5;
          return this;
        }
        var carry = q5;
        for (var i6 = s3; carry !== 0 && i6 < this.length; i6++) {
          var w5 = this.words[i6] | 0;
          w5 += carry;
          carry = w5 >>> 26;
          w5 &= 67108863;
          this.words[i6] = w5;
        }
        if (carry !== 0) {
          this.words[i6] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w5 = this.words[0] | 0;
          res = w5 === num ? 0 : w5 < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          var a4 = this.words[i6] | 0;
          var b4 = num.words[i6] | 0;
          if (a4 === b4) continue;
          if (a4 < b4) {
            res = -1;
          } else if (a4 > b4) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt4(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt3(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p4) {
        this.name = name;
        this.p = new BN3(p4, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r5 = num;
        var rlen;
        do {
          this.split(r5, this.tmp);
          r5 = this.imulK(r5);
          r5 = r5.iadd(this.tmp);
          rlen = r5.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r5.ucmp(this.p);
        if (cmp === 0) {
          r5.words[0] = 0;
          r5.length = 1;
        } else if (cmp > 0) {
          r5.isub(this.p);
        } else {
          if (r5.strip !== void 0) {
            r5.strip();
          } else {
            r5._strip();
          }
        }
        return r5;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i6 = 0; i6 < outLen; i6++) {
          output.words[i6] = input.words[i6];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i6 = 10; i6 < input.length; i6++) {
          var next = input.words[i6] | 0;
          input.words[i6 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i6 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo2 = 0;
        for (var i6 = 0; i6 < num.length; i6++) {
          var w5 = num.words[i6] | 0;
          lo2 += w5 * 977;
          num.words[i6] = lo2 & 67108863;
          lo2 = w5 * 64 + (lo2 / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i6 = 0; i6 < num.length; i6++) {
          var hi2 = (num.words[i6] | 0) * 19 + carry;
          var lo2 = hi2 & 67108863;
          hi2 >>>= 26;
          num.words[i6] = lo2;
          carry = hi2;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m3) {
        if (typeof m3 === "string") {
          var prime = BN3._prime(m3);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m3.gtn(1), "modulus must be greater than 1");
          this.m = m3;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a4) {
        assert2(a4.negative === 0, "red works only with positives");
        assert2(a4.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a4, b4) {
        assert2((a4.negative | b4.negative) === 0, "red works only with positives");
        assert2(
          a4.red && a4.red === b4.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a4) {
        if (this.prime) return this.prime.ireduce(a4)._forceRed(this);
        return a4.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg3(a4) {
        if (a4.isZero()) {
          return a4.clone();
        }
        return this.m.sub(a4)._forceRed(this);
      };
      Red.prototype.add = function add3(a4, b4) {
        this._verify2(a4, b4);
        var res = a4.add(b4);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a4, b4) {
        this._verify2(a4, b4);
        var res = a4.iadd(b4);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a4, b4) {
        this._verify2(a4, b4);
        var res = a4.sub(b4);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a4, b4) {
        this._verify2(a4, b4);
        var res = a4.isub(b4);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a4, num) {
        this._verify1(a4);
        return this.imod(a4.ushln(num));
      };
      Red.prototype.imul = function imul(a4, b4) {
        this._verify2(a4, b4);
        return this.imod(a4.imul(b4));
      };
      Red.prototype.mul = function mul3(a4, b4) {
        this._verify2(a4, b4);
        return this.imod(a4.mul(b4));
      };
      Red.prototype.isqr = function isqr(a4) {
        return this.imul(a4, a4.clone());
      };
      Red.prototype.sqr = function sqr(a4) {
        return this.mul(a4, a4);
      };
      Red.prototype.sqrt = function sqrt(a4) {
        if (a4.isZero()) return a4.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a4, pow);
        }
        var q5 = this.m.subn(1);
        var s3 = 0;
        while (!q5.isZero() && q5.andln(1) === 0) {
          s3++;
          q5.iushrn(1);
        }
        assert2(!q5.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z6 = this.m.bitLength();
        z6 = new BN3(2 * z6 * z6).toRed(this);
        while (this.pow(z6, lpow).cmp(nOne) !== 0) {
          z6.redIAdd(nOne);
        }
        var c5 = this.pow(z6, q5);
        var r5 = this.pow(a4, q5.addn(1).iushrn(1));
        var t3 = this.pow(a4, q5);
        var m3 = s3;
        while (t3.cmp(one) !== 0) {
          var tmp = t3;
          for (var i6 = 0; tmp.cmp(one) !== 0; i6++) {
            tmp = tmp.redSqr();
          }
          assert2(i6 < m3);
          var b4 = this.pow(c5, new BN3(1).iushln(m3 - i6 - 1));
          r5 = r5.redMul(b4);
          c5 = b4.redSqr();
          t3 = t3.redMul(c5);
          m3 = i6;
        }
        return r5;
      };
      Red.prototype.invm = function invm(a4) {
        var inv = a4._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a4, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a4.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a4;
        for (var i6 = 2; i6 < wnd.length; i6++) {
          wnd[i6] = this.mul(wnd[i6 - 1], a4);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i6 = num.length - 1; i6 >= 0; i6--) {
          var word = num.words[i6];
          for (var j3 = start - 1; j3 >= 0; j3--) {
            var bit = word >> j3 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i6 !== 0 || j3 !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r5 = num.umod(this.m);
        return r5 === num ? r5.clone() : r5;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m3) {
        Red.call(this, m3);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r5 = this.imod(num.mul(this.rinv));
        r5.red = null;
        return r5;
      };
      Mont.prototype.imul = function imul(a4, b4) {
        if (a4.isZero() || b4.isZero()) {
          a4.words[0] = 0;
          a4.length = 1;
          return a4;
        }
        var t3 = a4.imul(b4);
        var c5 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u4 = t3.isub(c5).iushrn(this.shift);
        var res = u4;
        if (u4.cmp(this.m) >= 0) {
          res = u4.isub(this.m);
        } else if (u4.cmpn(0) < 0) {
          res = u4.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a4, b4) {
        if (a4.isZero() || b4.isZero()) return new BN3(0)._forceRed(this);
        var t3 = a4.mul(b4);
        var c5 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u4 = t3.isub(c5).iushrn(this.shift);
        var res = u4;
        if (u4.cmp(this.m) >= 0) {
          res = u4.isub(this.m);
        } else if (u4.cmpn(0) < 0) {
          res = u4.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a4) {
        var res = this.imod(a4._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/utils.js
var require_utils4 = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/utils.js"(exports) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var utils = exports;
    var BN3 = require_bn2();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils();
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF2(num, w5, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      var i6;
      for (i6 = 0; i6 < naf.length; i6 += 1) {
        naf[i6] = 0;
      }
      var ws2 = 1 << w5 + 1;
      var k5 = num.clone();
      for (i6 = 0; i6 < naf.length; i6++) {
        var z6;
        var mod = k5.andln(ws2 - 1);
        if (k5.isOdd()) {
          if (mod > (ws2 >> 1) - 1)
            z6 = (ws2 >> 1) - mod;
          else
            z6 = mod;
          k5.isubn(z6);
        } else {
          z6 = 0;
        }
        naf[i6] = z6;
        k5.iushrn(1);
      }
      return naf;
    }
    utils.getNAF = getNAF2;
    function getJSF2(k1, k22) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k22 = k22.clone();
      var d1 = 0;
      var d22 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k22.cmpn(-d22) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k22.andln(3) + d22 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u22;
        if ((m24 & 1) === 0) {
          u22 = 0;
        } else {
          m8 = k22.andln(7) + d22 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u22 = -m24;
          else
            u22 = m24;
        }
        jsf[1].push(u22);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d22 === u22 + 1)
          d22 = 1 - d22;
        k1.iushrn(1);
        k22.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF2;
    function cachedProperty(obj, name, computer) {
      var key2 = "_" + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN3(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/base.js
var require_base = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/base.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var utils = require_utils4();
    var getNAF2 = utils.getNAF;
    var getJSF2 = utils.getJSF;
    var assert2 = utils.assert;
    function BaseCurve2(type, conf) {
      this.type = type;
      this.p = new BN3(conf.p, 16);
      this.red = conf.prime ? BN3.red(conf.prime) : BN3.mont(this.p);
      this.zero = new BN3(0).toRed(this.red);
      this.one = new BN3(1).toRed(this.red);
      this.two = new BN3(2).toRed(this.red);
      this.n = conf.n && new BN3(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve2;
    BaseCurve2.prototype.point = function point3() {
      throw new Error("Not implemented");
    };
    BaseCurve2.prototype.validate = function validate5() {
      throw new Error("Not implemented");
    };
    BaseCurve2.prototype._fixedNafMul = function _fixedNafMul2(p4, k5) {
      assert2(p4.precomputed);
      var doubles = p4._getDoubles();
      var naf = getNAF2(k5, 1, this._bitLength);
      var I6 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I6 /= 3;
      var repr = [];
      var j3;
      var nafW;
      for (j3 = 0; j3 < naf.length; j3 += doubles.step) {
        nafW = 0;
        for (var l3 = j3 + doubles.step - 1; l3 >= j3; l3--)
          nafW = (nafW << 1) + naf[l3];
        repr.push(nafW);
      }
      var a4 = this.jpoint(null, null, null);
      var b4 = this.jpoint(null, null, null);
      for (var i6 = I6; i6 > 0; i6--) {
        for (j3 = 0; j3 < repr.length; j3++) {
          nafW = repr[j3];
          if (nafW === i6)
            b4 = b4.mixedAdd(doubles.points[j3]);
          else if (nafW === -i6)
            b4 = b4.mixedAdd(doubles.points[j3].neg());
        }
        a4 = a4.add(b4);
      }
      return a4.toP();
    };
    BaseCurve2.prototype._wnafMul = function _wnafMul2(p4, k5) {
      var w5 = 4;
      var nafPoints = p4._getNAFPoints(w5);
      w5 = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF2(k5, w5, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i6 = naf.length - 1; i6 >= 0; i6--) {
        for (var l3 = 0; i6 >= 0 && naf[i6] === 0; i6--)
          l3++;
        if (i6 >= 0)
          l3++;
        acc = acc.dblp(l3);
        if (i6 < 0)
          break;
        var z6 = naf[i6];
        assert2(z6 !== 0);
        if (p4.type === "affine") {
          if (z6 > 0)
            acc = acc.mixedAdd(wnd[z6 - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z6 - 1 >> 1].neg());
        } else {
          if (z6 > 0)
            acc = acc.add(wnd[z6 - 1 >> 1]);
          else
            acc = acc.add(wnd[-z6 - 1 >> 1].neg());
        }
      }
      return p4.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve2.prototype._wnafMulAdd = function _wnafMulAdd2(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i6;
      var j3;
      var p4;
      for (i6 = 0; i6 < len; i6++) {
        p4 = points[i6];
        var nafPoints = p4._getNAFPoints(defW);
        wndWidth[i6] = nafPoints.wnd;
        wnd[i6] = nafPoints.points;
      }
      for (i6 = len - 1; i6 >= 1; i6 -= 2) {
        var a4 = i6 - 1;
        var b4 = i6;
        if (wndWidth[a4] !== 1 || wndWidth[b4] !== 1) {
          naf[a4] = getNAF2(coeffs[a4], wndWidth[a4], this._bitLength);
          naf[b4] = getNAF2(coeffs[b4], wndWidth[b4], this._bitLength);
          max = Math.max(naf[a4].length, max);
          max = Math.max(naf[b4].length, max);
          continue;
        }
        var comb = [
          points[a4],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b4]
          /* 7 */
        ];
        if (points[a4].y.cmp(points[b4].y) === 0) {
          comb[1] = points[a4].add(points[b4]);
          comb[2] = points[a4].toJ().mixedAdd(points[b4].neg());
        } else if (points[a4].y.cmp(points[b4].y.redNeg()) === 0) {
          comb[1] = points[a4].toJ().mixedAdd(points[b4]);
          comb[2] = points[a4].add(points[b4].neg());
        } else {
          comb[1] = points[a4].toJ().mixedAdd(points[b4]);
          comb[2] = points[a4].toJ().mixedAdd(points[b4].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF2(coeffs[a4], coeffs[b4]);
        max = Math.max(jsf[0].length, max);
        naf[a4] = new Array(max);
        naf[b4] = new Array(max);
        for (j3 = 0; j3 < max; j3++) {
          var ja = jsf[0][j3] | 0;
          var jb = jsf[1][j3] | 0;
          naf[a4][j3] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b4][j3] = 0;
          wnd[a4] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i6 = max; i6 >= 0; i6--) {
        var k5 = 0;
        while (i6 >= 0) {
          var zero = true;
          for (j3 = 0; j3 < len; j3++) {
            tmp[j3] = naf[j3][i6] | 0;
            if (tmp[j3] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k5++;
          i6--;
        }
        if (i6 >= 0)
          k5++;
        acc = acc.dblp(k5);
        if (i6 < 0)
          break;
        for (j3 = 0; j3 < len; j3++) {
          var z6 = tmp[j3];
          p4;
          if (z6 === 0)
            continue;
          else if (z6 > 0)
            p4 = wnd[j3][z6 - 1 >> 1];
          else if (z6 < 0)
            p4 = wnd[j3][-z6 - 1 >> 1].neg();
          if (p4.type === "affine")
            acc = acc.mixedAdd(p4);
          else
            acc = acc.add(p4);
        }
      }
      for (i6 = 0; i6 < len; i6++)
        wnd[i6] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint2(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve2.BasePoint = BasePoint2;
    BasePoint2.prototype.eq = function eq4() {
      throw new Error("Not implemented");
    };
    BasePoint2.prototype.validate = function validate5() {
      return this.curve.validate(this);
    };
    BaseCurve2.prototype.decodePoint = function decodePoint2(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert2(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert2(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint2.prototype.encodeCompressed = function encodeCompressed2(enc) {
      return this.encode(enc, true);
    };
    BasePoint2.prototype._encode = function _encode2(compact) {
      var len = this.curve.p.byteLength();
      var x6 = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x6);
      return [4].concat(x6, this.getY().toArray("be", len));
    };
    BasePoint2.prototype.encode = function encode4(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint2.prototype.precompute = function precompute2(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint2.prototype._hasDoubles = function _hasDoubles2(k5) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k5.bitLength() + 1) / doubles.step);
    };
    BasePoint2.prototype._getDoubles = function _getDoubles2(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i6 = 0; i6 < power; i6 += step) {
        for (var j3 = 0; j3 < step; j3++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint2.prototype._getNAFPoints = function _getNAFPoints2(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl3 = max === 1 ? null : this.dbl();
      for (var i6 = 1; i6 < max; i6++)
        res[i6] = res[i6 - 1].add(dbl3);
      return {
        wnd,
        points: res
      };
    };
    BasePoint2.prototype._getBeta = function _getBeta3() {
      return null;
    };
    BasePoint2.prototype.dblp = function dblp3(k5) {
      var r5 = this;
      for (var i6 = 0; i6 < k5; i6++)
        r5 = r5.dbl();
      return r5;
    };
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/short.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var utils = require_utils4();
    var BN3 = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert2 = utils.assert;
    function ShortCurve2(conf) {
      Base.call(this, "short", conf);
      this.a = new BN3(conf.a, 16).toRed(this.red);
      this.b = new BN3(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve2, Base);
    module.exports = ShortCurve2;
    ShortCurve2.prototype._getEndomorphism = function _getEndomorphism2(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN3(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN3(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN3(vec.a, 16),
            b: new BN3(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve2.prototype._getEndoRoots = function _getEndoRoots2(num) {
      var red = num === this.p ? this.red : BN3.mont(num);
      var tinv = new BN3(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s3 = new BN3(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s3).fromRed();
      var l22 = ntinv.redSub(s3).fromRed();
      return [l1, l22];
    };
    ShortCurve2.prototype._getEndoBasis = function _getEndoBasis2(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u4 = lambda;
      var v6 = this.n.clone();
      var x1 = new BN3(1);
      var y1 = new BN3(0);
      var x22 = new BN3(0);
      var y22 = new BN3(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a22;
      var b22;
      var prevR;
      var i6 = 0;
      var r5;
      var x6;
      while (u4.cmpn(0) !== 0) {
        var q5 = v6.div(u4);
        r5 = v6.sub(q5.mul(u4));
        x6 = x22.sub(q5.mul(x1));
        var y6 = y22.sub(q5.mul(y1));
        if (!a1 && r5.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r5.neg();
          b1 = x6;
        } else if (a1 && ++i6 === 2) {
          break;
        }
        prevR = r5;
        v6 = u4;
        u4 = r5;
        x22 = x1;
        x1 = x6;
        y22 = y1;
        y1 = y6;
      }
      a22 = r5.neg();
      b22 = x6;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a22.sqr().add(b22.sqr());
      if (len2.cmp(len1) >= 0) {
        a22 = a0;
        b22 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a22.negative) {
        a22 = a22.neg();
        b22 = b22.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a22, b: b22 }
      ];
    };
    ShortCurve2.prototype._endoSplit = function _endoSplit2(k5) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v22 = basis[1];
      var c1 = v22.b.mul(k5).divRound(this.n);
      var c22 = v1.b.neg().mul(k5).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p22 = c22.mul(v22.a);
      var q1 = c1.mul(v1.b);
      var q22 = c22.mul(v22.b);
      var k1 = k5.sub(p1).sub(p22);
      var k22 = q1.add(q22).neg();
      return { k1, k2: k22 };
    };
    ShortCurve2.prototype.pointFromX = function pointFromX2(x6, odd) {
      x6 = new BN3(x6, 16);
      if (!x6.red)
        x6 = x6.toRed(this.red);
      var y22 = x6.redSqr().redMul(x6).redIAdd(x6.redMul(this.a)).redIAdd(this.b);
      var y6 = y22.redSqrt();
      if (y6.redSqr().redSub(y22).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y6.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y6 = y6.redNeg();
      return this.point(x6, y6);
    };
    ShortCurve2.prototype.validate = function validate5(point3) {
      if (point3.inf)
        return true;
      var x6 = point3.x;
      var y6 = point3.y;
      var ax = this.a.redMul(x6);
      var rhs = x6.redSqr().redMul(x6).redIAdd(ax).redIAdd(this.b);
      return y6.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve2.prototype._endoWnafMulAdd = function _endoWnafMulAdd2(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i6 = 0; i6 < points.length; i6++) {
        var split = this._endoSplit(coeffs[i6]);
        var p4 = points[i6];
        var beta = p4._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p4 = p4.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i6 * 2] = p4;
        npoints[i6 * 2 + 1] = beta;
        ncoeffs[i6 * 2] = split.k1;
        ncoeffs[i6 * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i6 * 2, jacobianResult);
      for (var j3 = 0; j3 < i6 * 2; j3++) {
        npoints[j3] = null;
        ncoeffs[j3] = null;
      }
      return res;
    };
    function Point2(curve, x6, y6, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (x6 === null && y6 === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN3(x6, 16);
        this.y = new BN3(y6, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point2, Base.BasePoint);
    ShortCurve2.prototype.point = function point3(x6, y6, isRed) {
      return new Point2(this, x6, y6, isRed);
    };
    ShortCurve2.prototype.pointFromJSON = function pointFromJSON2(obj, red) {
      return Point2.fromJSON(this, obj, red);
    };
    Point2.prototype._getBeta = function _getBeta3() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p4) {
          return curve.point(p4.x.redMul(curve.endo.beta), p4.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point2.prototype.toJSON = function toJSON2() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point2.fromJSON = function fromJSON2(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity3() {
      return this.inf;
    };
    Point2.prototype.add = function add3(p4) {
      if (this.inf)
        return p4;
      if (p4.inf)
        return this;
      if (this.eq(p4))
        return this.dbl();
      if (this.neg().eq(p4))
        return this.curve.point(null, null);
      if (this.x.cmp(p4.x) === 0)
        return this.curve.point(null, null);
      var c5 = this.y.redSub(p4.y);
      if (c5.cmpn(0) !== 0)
        c5 = c5.redMul(this.x.redSub(p4.x).redInvm());
      var nx = c5.redSqr().redISub(this.x).redISub(p4.x);
      var ny = c5.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point2.prototype.dbl = function dbl3() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a4 = this.curve.a;
      var x22 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c5 = x22.redAdd(x22).redIAdd(x22).redIAdd(a4).redMul(dyinv);
      var nx = c5.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c5.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point2.prototype.getX = function getX2() {
      return this.x.fromRed();
    };
    Point2.prototype.getY = function getY2() {
      return this.y.fromRed();
    };
    Point2.prototype.mul = function mul3(k5) {
      k5 = new BN3(k5, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k5))
        return this.curve._fixedNafMul(this, k5);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k5]);
      else
        return this.curve._wnafMul(this, k5);
    };
    Point2.prototype.mulAdd = function mulAdd2(k1, p22, k22) {
      var points = [this, p22];
      var coeffs = [k1, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point2.prototype.jmulAdd = function jmulAdd2(k1, p22, k22) {
      var points = [this, p22];
      var coeffs = [k1, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point2.prototype.eq = function eq4(p4) {
      return this === p4 || this.inf === p4.inf && (this.inf || this.x.cmp(p4.x) === 0 && this.y.cmp(p4.y) === 0);
    };
    Point2.prototype.neg = function neg3(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p4) {
          return p4.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point2.prototype.toJ = function toJ2() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint2(curve, x6, y6, z6) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (x6 === null && y6 === null && z6 === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN3(0);
      } else {
        this.x = new BN3(x6, 16);
        this.y = new BN3(y6, 16);
        this.z = new BN3(z6, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint2, Base.BasePoint);
    ShortCurve2.prototype.jpoint = function jpoint2(x6, y6, z6) {
      return new JPoint2(this, x6, y6, z6);
    };
    JPoint2.prototype.toP = function toP2() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint2.prototype.neg = function neg3() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint2.prototype.add = function add3(p4) {
      if (this.isInfinity())
        return p4;
      if (p4.isInfinity())
        return this;
      var pz2 = p4.z.redSqr();
      var z22 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u22 = p4.x.redMul(z22);
      var s1 = this.y.redMul(pz2.redMul(p4.z));
      var s22 = p4.y.redMul(z22.redMul(this.z));
      var h5 = u1.redSub(u22);
      var r5 = s1.redSub(s22);
      if (h5.cmpn(0) === 0) {
        if (r5.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h5.redSqr();
      var h32 = h22.redMul(h5);
      var v6 = u1.redMul(h22);
      var nx = r5.redSqr().redIAdd(h32).redISub(v6).redISub(v6);
      var ny = r5.redMul(v6.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(p4.z).redMul(h5);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.mixedAdd = function mixedAdd2(p4) {
      if (this.isInfinity())
        return p4.toJ();
      if (p4.isInfinity())
        return this;
      var z22 = this.z.redSqr();
      var u1 = this.x;
      var u22 = p4.x.redMul(z22);
      var s1 = this.y;
      var s22 = p4.y.redMul(z22).redMul(this.z);
      var h5 = u1.redSub(u22);
      var r5 = s1.redSub(s22);
      if (h5.cmpn(0) === 0) {
        if (r5.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h5.redSqr();
      var h32 = h22.redMul(h5);
      var v6 = u1.redMul(h22);
      var nx = r5.redSqr().redIAdd(h32).redISub(v6).redISub(v6);
      var ny = r5.redMul(v6.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(h5);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.dblp = function dblp3(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i6;
      if (this.curve.zeroA || this.curve.threeA) {
        var r5 = this;
        for (i6 = 0; i6 < pow; i6++)
          r5 = r5.dbl();
        return r5;
      }
      var a4 = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i6 = 0; i6 < pow; i6++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c5 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a4.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c5.redSqr().redISub(t1.redAdd(t1));
        var t22 = t1.redISub(nx);
        var dny = c5.redMul(t22);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i6 + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint2.prototype.dbl = function dbl3() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint2.prototype._zeroDbl = function _zeroDbl2() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s3 = s3.redIAdd(s3);
        var m3 = xx.redAdd(xx).redIAdd(xx);
        var t3 = m3.redSqr().redISub(s3).redISub(s3);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t3;
        ny = m3.redMul(s3.redISub(t3)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a4 = this.x.redSqr();
        var b4 = this.y.redSqr();
        var c5 = b4.redSqr();
        var d4 = this.x.redAdd(b4).redSqr().redISub(a4).redISub(c5);
        d4 = d4.redIAdd(d4);
        var e3 = a4.redAdd(a4).redIAdd(a4);
        var f5 = e3.redSqr();
        var c8 = c5.redIAdd(c5);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f5.redISub(d4).redISub(d4);
        ny = e3.redMul(d4.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype._threeDbl = function _threeDbl2() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s3 = s3.redIAdd(s3);
        var m3 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t3 = m3.redSqr().redISub(s3).redISub(s3);
        nx = t3;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m3.redMul(s3.redISub(t3)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype._dbl = function _dbl2() {
      var a4 = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c5 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a4.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c5.redSqr().redISub(t1.redAdd(t1));
      var t22 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c5.redMul(t22).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.trpl = function trpl2() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m3 = xx.redAdd(xx).redIAdd(xx);
      var mm = m3.redSqr();
      var e3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e3 = e3.redIAdd(e3);
      e3 = e3.redAdd(e3).redIAdd(e3);
      e3 = e3.redISub(mm);
      var ee3 = e3.redSqr();
      var t3 = yyyy.redIAdd(yyyy);
      t3 = t3.redIAdd(t3);
      t3 = t3.redIAdd(t3);
      t3 = t3.redIAdd(t3);
      var u4 = m3.redIAdd(e3).redSqr().redISub(mm).redISub(ee3).redISub(t3);
      var yyu4 = yy.redMul(u4);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee3).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u4.redMul(t3.redISub(u4)).redISub(e3.redMul(ee3)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e3).redSqr().redISub(zz).redISub(ee3);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.mul = function mul3(k5, kbase) {
      k5 = new BN3(k5, kbase);
      return this.curve._wnafMul(this, k5);
    };
    JPoint2.prototype.eq = function eq4(p4) {
      if (p4.type === "affine")
        return this.eq(p4.toJ());
      if (this === p4)
        return true;
      var z22 = this.z.redSqr();
      var pz2 = p4.z.redSqr();
      if (this.x.redMul(pz2).redISub(p4.x.redMul(z22)).cmpn(0) !== 0)
        return false;
      var z32 = z22.redMul(this.z);
      var pz3 = pz2.redMul(p4.z);
      return this.y.redMul(pz3).redISub(p4.y.redMul(z32)).cmpn(0) === 0;
    };
    JPoint2.prototype.eqXToP = function eqXToP2(x6) {
      var zs2 = this.z.redSqr();
      var rx = x6.toRed(this.curve.red).redMul(zs2);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x6.clone();
      var t3 = this.curve.redN.redMul(zs2);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t3);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint2.prototype.isInfinity = function isInfinity3() {
      return this.z.cmpn(0) === 0;
    };
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/mont.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var utils = require_utils4();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN3(conf.a, 16).toRed(this.red);
      this.b = new BN3(conf.b, 16).toRed(this.red);
      this.i4 = new BN3(4).toRed(this.red).redInvm();
      this.two = new BN3(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    MontCurve.prototype.validate = function validate5(point3) {
      var x6 = point3.normalize().x;
      var x22 = x6.redSqr();
      var rhs = x22.redMul(x6).redAdd(x22.redMul(this.a)).redAdd(x6);
      var y6 = rhs.redSqrt();
      return y6.redSqr().cmp(rhs) === 0;
    };
    function Point2(curve, x6, z6) {
      Base.BasePoint.call(this, curve, "projective");
      if (x6 === null && z6 === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN3(x6, 16);
        this.z = new BN3(z6, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point2, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint2(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point3(x6, z6) {
      return new Point2(this, x6, z6);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON2(obj) {
      return Point2.fromJSON(this, obj);
    };
    Point2.prototype.precompute = function precompute2() {
    };
    Point2.prototype._encode = function _encode2() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point2.fromJSON = function fromJSON2(curve, obj) {
      return new Point2(curve, obj[0], obj[1] || curve.one);
    };
    Point2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity3() {
      return this.z.cmpn(0) === 0;
    };
    Point2.prototype.dbl = function dbl3() {
      var a4 = this.x.redAdd(this.z);
      var aa = a4.redSqr();
      var b4 = this.x.redSub(this.z);
      var bb = b4.redSqr();
      var c5 = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c5.redMul(bb.redAdd(this.curve.a24.redMul(c5)));
      return this.curve.point(nx, nz);
    };
    Point2.prototype.add = function add3() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.diffAdd = function diffAdd(p4, diff) {
      var a4 = this.x.redAdd(this.z);
      var b4 = this.x.redSub(this.z);
      var c5 = p4.x.redAdd(p4.z);
      var d4 = p4.x.redSub(p4.z);
      var da = d4.redMul(a4);
      var cb = c5.redMul(b4);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point2.prototype.mul = function mul3(k5) {
      var t3 = k5.clone();
      var a4 = this;
      var b4 = this.curve.point(null, null);
      var c5 = this;
      for (var bits = []; t3.cmpn(0) !== 0; t3.iushrn(1))
        bits.push(t3.andln(1));
      for (var i6 = bits.length - 1; i6 >= 0; i6--) {
        if (bits[i6] === 0) {
          a4 = a4.diffAdd(b4, c5);
          b4 = b4.dbl();
        } else {
          b4 = a4.diffAdd(b4, c5);
          a4 = a4.dbl();
        }
      }
      return b4;
    };
    Point2.prototype.mulAdd = function mulAdd2() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.eq = function eq4(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point2.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point2.prototype.getX = function getX2() {
      this.normalize();
      return this.x.fromRed();
    };
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var utils = require_utils4();
    var BN3 = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert2 = utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN3(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN3(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN3(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert2(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint2(x6, y6, z6, t3) {
      return this.point(x6, y6, z6, t3);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX2(x6, odd) {
      x6 = new BN3(x6, 16);
      if (!x6.red)
        x6 = x6.toRed(this.red);
      var x22 = x6.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x22));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x22));
      var y22 = rhs.redMul(lhs.redInvm());
      var y6 = y22.redSqrt();
      if (y6.redSqr().redSub(y22).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y6.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y6 = y6.redNeg();
      return this.point(x6, y6);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y6, odd) {
      y6 = new BN3(y6, 16);
      if (!y6.red)
        y6 = y6.toRed(this.red);
      var y22 = y6.redSqr();
      var lhs = y22.redSub(this.c2);
      var rhs = y22.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x22 = lhs.redMul(rhs.redInvm());
      if (x22.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y6);
      }
      var x6 = x22.redSqrt();
      if (x6.redSqr().redSub(x22).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x6.fromRed().isOdd() !== odd)
        x6 = x6.redNeg();
      return this.point(x6, y6);
    };
    EdwardsCurve.prototype.validate = function validate5(point3) {
      if (point3.isInfinity())
        return true;
      point3.normalize();
      var x22 = point3.x.redSqr();
      var y22 = point3.y.redSqr();
      var lhs = x22.redMul(this.a).redAdd(y22);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x22).redMul(y22)));
      return lhs.cmp(rhs) === 0;
    };
    function Point2(curve, x6, y6, z6, t3) {
      Base.BasePoint.call(this, curve, "projective");
      if (x6 === null && y6 === null && z6 === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN3(x6, 16);
        this.y = new BN3(y6, 16);
        this.z = z6 ? new BN3(z6, 16) : this.curve.one;
        this.t = t3 && new BN3(t3, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point2, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON2(obj) {
      return Point2.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point3(x6, y6, z6, t3) {
      return new Point2(this, x6, y6, z6, t3);
    };
    Point2.fromJSON = function fromJSON2(curve, obj) {
      return new Point2(curve, obj[0], obj[1], obj[2]);
    };
    Point2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity3() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point2.prototype._extDbl = function _extDbl() {
      var a4 = this.x.redSqr();
      var b4 = this.y.redSqr();
      var c5 = this.z.redSqr();
      c5 = c5.redIAdd(c5);
      var d4 = this.curve._mulA(a4);
      var e3 = this.x.redAdd(this.y).redSqr().redISub(a4).redISub(b4);
      var g5 = d4.redAdd(b4);
      var f5 = g5.redSub(c5);
      var h5 = d4.redSub(b4);
      var nx = e3.redMul(f5);
      var ny = g5.redMul(h5);
      var nt3 = e3.redMul(h5);
      var nz = f5.redMul(g5);
      return this.curve.point(nx, ny, nz, nt3);
    };
    Point2.prototype._projDbl = function _projDbl() {
      var b4 = this.x.redAdd(this.y).redSqr();
      var c5 = this.x.redSqr();
      var d4 = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e3;
      var h5;
      var j3;
      if (this.curve.twisted) {
        e3 = this.curve._mulA(c5);
        var f5 = e3.redAdd(d4);
        if (this.zOne) {
          nx = b4.redSub(c5).redSub(d4).redMul(f5.redSub(this.curve.two));
          ny = f5.redMul(e3.redSub(d4));
          nz = f5.redSqr().redSub(f5).redSub(f5);
        } else {
          h5 = this.z.redSqr();
          j3 = f5.redSub(h5).redISub(h5);
          nx = b4.redSub(c5).redISub(d4).redMul(j3);
          ny = f5.redMul(e3.redSub(d4));
          nz = f5.redMul(j3);
        }
      } else {
        e3 = c5.redAdd(d4);
        h5 = this.curve._mulC(this.z).redSqr();
        j3 = e3.redSub(h5).redSub(h5);
        nx = this.curve._mulC(b4.redISub(e3)).redMul(j3);
        ny = this.curve._mulC(e3).redMul(c5.redISub(d4));
        nz = e3.redMul(j3);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point2.prototype.dbl = function dbl3() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point2.prototype._extAdd = function _extAdd(p4) {
      var a4 = this.y.redSub(this.x).redMul(p4.y.redSub(p4.x));
      var b4 = this.y.redAdd(this.x).redMul(p4.y.redAdd(p4.x));
      var c5 = this.t.redMul(this.curve.dd).redMul(p4.t);
      var d4 = this.z.redMul(p4.z.redAdd(p4.z));
      var e3 = b4.redSub(a4);
      var f5 = d4.redSub(c5);
      var g5 = d4.redAdd(c5);
      var h5 = b4.redAdd(a4);
      var nx = e3.redMul(f5);
      var ny = g5.redMul(h5);
      var nt3 = e3.redMul(h5);
      var nz = f5.redMul(g5);
      return this.curve.point(nx, ny, nz, nt3);
    };
    Point2.prototype._projAdd = function _projAdd(p4) {
      var a4 = this.z.redMul(p4.z);
      var b4 = a4.redSqr();
      var c5 = this.x.redMul(p4.x);
      var d4 = this.y.redMul(p4.y);
      var e3 = this.curve.d.redMul(c5).redMul(d4);
      var f5 = b4.redSub(e3);
      var g5 = b4.redAdd(e3);
      var tmp = this.x.redAdd(this.y).redMul(p4.x.redAdd(p4.y)).redISub(c5).redISub(d4);
      var nx = a4.redMul(f5).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a4.redMul(g5).redMul(d4.redSub(this.curve._mulA(c5)));
        nz = f5.redMul(g5);
      } else {
        ny = a4.redMul(g5).redMul(d4.redSub(c5));
        nz = this.curve._mulC(f5).redMul(g5);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point2.prototype.add = function add3(p4) {
      if (this.isInfinity())
        return p4;
      if (p4.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p4);
      else
        return this._projAdd(p4);
    };
    Point2.prototype.mul = function mul3(k5) {
      if (this._hasDoubles(k5))
        return this.curve._fixedNafMul(this, k5);
      else
        return this.curve._wnafMul(this, k5);
    };
    Point2.prototype.mulAdd = function mulAdd2(k1, p4, k22) {
      return this.curve._wnafMulAdd(1, [this, p4], [k1, k22], 2, false);
    };
    Point2.prototype.jmulAdd = function jmulAdd2(k1, p4, k22) {
      return this.curve._wnafMulAdd(1, [this, p4], [k1, k22], 2, true);
    };
    Point2.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
      var zi2 = this.z.redInvm();
      this.x = this.x.redMul(zi2);
      this.y = this.y.redMul(zi2);
      if (this.t)
        this.t = this.t.redMul(zi2);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point2.prototype.neg = function neg3() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point2.prototype.getX = function getX2() {
      this.normalize();
      return this.x.fromRed();
    };
    Point2.prototype.getY = function getY2() {
      this.normalize();
      return this.y.fromRed();
    };
    Point2.prototype.eq = function eq4(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point2.prototype.eqXToP = function eqXToP2(x6) {
      var rx = x6.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x6.clone();
      var t3 = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t3);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point2.prototype.toP = Point2.prototype.normalize;
    Point2.prototype.mixedAdd = Point2.prototype.add;
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curve/index.js"(exports) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var curve = exports;
    curve.base = require_base();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curves.js
var require_curves = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/curves.js"(exports) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var curves = exports;
    var hash2 = require_hash();
    var curve = require_curve();
    var utils = require_utils4();
    var assert2 = utils.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve.short(options);
      else if (options.type === "edwards")
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert2(this.g.validate(), "Invalid curve");
      assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash2.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash2.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = require_secp256k1();
    } catch (e3) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash2.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/ec/key.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var utils = require_utils4();
    var assert2 = utils.assert;
    function KeyPair2(ec2, options) {
      this.ec = ec2;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair2;
    KeyPair2.fromPublic = function fromPublic2(ec2, pub, enc) {
      if (pub instanceof KeyPair2)
        return pub;
      return new KeyPair2(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair2.fromPrivate = function fromPrivate2(ec2, priv, enc) {
      if (priv instanceof KeyPair2)
        return priv;
      return new KeyPair2(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair2.prototype.validate = function validate5() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair2.prototype.getPublic = function getPublic2(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair2.prototype.getPrivate = function getPrivate2(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair2.prototype._importPrivate = function _importPrivate2(key2, enc) {
      this.priv = new BN3(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair2.prototype._importPublic = function _importPublic2(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert2(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert2(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair2.prototype.derive = function derive2(pub) {
      if (!pub.validate()) {
        assert2(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair2.prototype.sign = function sign3(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair2.prototype.verify = function verify3(msg, signature2, options) {
      return this.ec.verify(msg, signature2, this, void 0, options);
    };
    KeyPair2.prototype.inspect = function inspect4() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/ec/signature.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var utils = require_utils4();
    var assert2 = utils.assert;
    function Signature2(options, enc) {
      if (options instanceof Signature2)
        return options;
      if (this._importDER(options, enc))
        return;
      assert2(options.r && options.s, "Signature without r or s");
      this.r = new BN3(options.r, 16);
      this.s = new BN3(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature2;
    function Position2() {
      this.place = 0;
    }
    function getLength2(buf, p4) {
      var initial = buf[p4.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      if (buf[p4.place] === 0) {
        return false;
      }
      var val = 0;
      for (var i6 = 0, off = p4.place; i6 < octetLen; i6++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p4.place = off;
      return val;
    }
    function rmPadding2(buf) {
      var i6 = 0;
      var len = buf.length - 1;
      while (!buf[i6] && !(buf[i6 + 1] & 128) && i6 < len) {
        i6++;
      }
      if (i6 === 0) {
        return buf;
      }
      return buf.slice(i6);
    }
    Signature2.prototype._importDER = function _importDER2(data, enc) {
      data = utils.toArray(data, enc);
      var p4 = new Position2();
      if (data[p4.place++] !== 48) {
        return false;
      }
      var len = getLength2(data, p4);
      if (len === false) {
        return false;
      }
      if (len + p4.place !== data.length) {
        return false;
      }
      if (data[p4.place++] !== 2) {
        return false;
      }
      var rlen = getLength2(data, p4);
      if (rlen === false) {
        return false;
      }
      if ((data[p4.place] & 128) !== 0) {
        return false;
      }
      var r5 = data.slice(p4.place, rlen + p4.place);
      p4.place += rlen;
      if (data[p4.place++] !== 2) {
        return false;
      }
      var slen = getLength2(data, p4);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p4.place) {
        return false;
      }
      if ((data[p4.place] & 128) !== 0) {
        return false;
      }
      var s3 = data.slice(p4.place, slen + p4.place);
      if (r5[0] === 0) {
        if (r5[1] & 128) {
          r5 = r5.slice(1);
        } else {
          return false;
        }
      }
      if (s3[0] === 0) {
        if (s3[1] & 128) {
          s3 = s3.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN3(r5);
      this.s = new BN3(s3);
      this.recoveryParam = null;
      return true;
    };
    function constructLength2(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature2.prototype.toDER = function toDER2(enc) {
      var r5 = this.r.toArray();
      var s3 = this.s.toArray();
      if (r5[0] & 128)
        r5 = [0].concat(r5);
      if (s3[0] & 128)
        s3 = [0].concat(s3);
      r5 = rmPadding2(r5);
      s3 = rmPadding2(s3);
      while (!s3[0] && !(s3[1] & 128)) {
        s3 = s3.slice(1);
      }
      var arr = [2];
      constructLength2(arr, r5.length);
      arr = arr.concat(r5);
      arr.push(2);
      constructLength2(arr, s3.length);
      var backHalf = arr.concat(s3);
      var res = [48];
      constructLength2(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/ec/index.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var HmacDRBG2 = require_hmac_drbg();
    var utils = require_utils4();
    var curves = require_curves();
    var rand2 = require_brorand();
    var assert2 = utils.assert;
    var KeyPair2 = require_key();
    var Signature2 = require_signature();
    function EC2(options) {
      if (!(this instanceof EC2))
        return new EC2(options);
      if (typeof options === "string") {
        assert2(
          Object.prototype.hasOwnProperty.call(curves, options),
          "Unknown curve " + options
        );
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC2;
    EC2.prototype.keyPair = function keyPair2(options) {
      return new KeyPair2(this, options);
    };
    EC2.prototype.keyFromPrivate = function keyFromPrivate2(priv, enc) {
      return KeyPair2.fromPrivate(this, priv, enc);
    };
    EC2.prototype.keyFromPublic = function keyFromPublic2(pub, enc) {
      return KeyPair2.fromPublic(this, pub, enc);
    };
    EC2.prototype.genKeyPair = function genKeyPair2(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG2({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand2(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN3(2));
      for (; ; ) {
        var priv = new BN3(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC2.prototype._truncateToN = function _truncateToN2(msg, truncOnly, bitLength) {
      var byteLength;
      if (BN3.isBN(msg) || typeof msg === "number") {
        msg = new BN3(msg, 16);
        byteLength = msg.byteLength();
      } else if (typeof msg === "object") {
        byteLength = msg.length;
        msg = new BN3(msg, 16);
      } else {
        var str = msg.toString();
        byteLength = str.length + 1 >>> 1;
        msg = new BN3(str, 16);
      }
      if (typeof bitLength !== "number") {
        bitLength = byteLength * 8;
      }
      var delta = bitLength - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC2.prototype.sign = function sign3(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(msg, false, options.msgBitLength);
      var bytes = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new HmacDRBG2({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN3(1));
      for (var iter = 0; ; iter++) {
        var k5 = options.k ? options.k(iter) : new BN3(drbg.generate(this.n.byteLength()));
        k5 = this._truncateToN(k5, true);
        if (k5.cmpn(1) <= 0 || k5.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k5);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r5 = kpX.umod(this.n);
        if (r5.cmpn(0) === 0)
          continue;
        var s3 = k5.invm(this.n).mul(r5.mul(key2.getPrivate()).iadd(msg));
        s3 = s3.umod(this.n);
        if (s3.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r5) !== 0 ? 2 : 0);
        if (options.canonical && s3.cmp(this.nh) > 0) {
          s3 = this.n.sub(s3);
          recoveryParam ^= 1;
        }
        return new Signature2({ r: r5, s: s3, recoveryParam });
      }
    };
    EC2.prototype.verify = function verify3(msg, signature2, key2, enc, options) {
      if (!options)
        options = {};
      msg = this._truncateToN(msg, false, options.msgBitLength);
      key2 = this.keyFromPublic(key2, enc);
      signature2 = new Signature2(signature2, "hex");
      var r5 = signature2.r;
      var s3 = signature2.s;
      if (r5.cmpn(1) < 0 || r5.cmp(this.n) >= 0)
        return false;
      if (s3.cmpn(1) < 0 || s3.cmp(this.n) >= 0)
        return false;
      var sinv = s3.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u22 = sinv.mul(r5).umod(this.n);
      var p4;
      if (!this.curve._maxwellTrick) {
        p4 = this.g.mulAdd(u1, key2.getPublic(), u22);
        if (p4.isInfinity())
          return false;
        return p4.getX().umod(this.n).cmp(r5) === 0;
      }
      p4 = this.g.jmulAdd(u1, key2.getPublic(), u22);
      if (p4.isInfinity())
        return false;
      return p4.eqXToP(r5);
    };
    EC2.prototype.recoverPubKey = function(msg, signature2, j3, enc) {
      assert2((3 & j3) === j3, "The recovery param is more than two bits");
      signature2 = new Signature2(signature2, enc);
      var n3 = this.n;
      var e3 = new BN3(msg);
      var r5 = signature2.r;
      var s3 = signature2.s;
      var isYOdd = j3 & 1;
      var isSecondKey = j3 >> 1;
      if (r5.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r5 = this.curve.pointFromX(r5.add(this.curve.n), isYOdd);
      else
        r5 = this.curve.pointFromX(r5, isYOdd);
      var rInv = signature2.r.invm(n3);
      var s1 = n3.sub(e3).mul(rInv).umod(n3);
      var s22 = s3.mul(rInv).umod(n3);
      return this.g.mulAdd(s1, r5, s22);
    };
    EC2.prototype.getKeyRecoveryParam = function(e3, signature2, Q3, enc) {
      signature2 = new Signature2(signature2, enc);
      if (signature2.recoveryParam !== null)
        return signature2.recoveryParam;
      for (var i6 = 0; i6 < 4; i6++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e3, signature2, i6);
        } catch (e4) {
          continue;
        }
        if (Qprime.eq(Q3))
          return i6;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var utils = require_utils4();
    var assert2 = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair2(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair2.fromPublic = function fromPublic2(eddsa, pub) {
      if (pub instanceof KeyPair2)
        return pub;
      return new KeyPair2(eddsa, { pub });
    };
    KeyPair2.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair2)
        return secret;
      return new KeyPair2(eddsa, { secret });
    };
    KeyPair2.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair2, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair2, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair2, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash2 = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a4 = hash2.slice(0, eddsa.encodingLength);
      a4[0] &= 248;
      a4[lastIx] &= 127;
      a4[lastIx] |= 64;
      return a4;
    });
    cachedProperty(KeyPair2, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair2, "hash", function hash2() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair2, "messagePrefix", function messagePrefix2() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair2.prototype.sign = function sign3(message) {
      assert2(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair2.prototype.verify = function verify3(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair2.prototype.getSecret = function getSecret(enc) {
      assert2(this._secret, "KeyPair is public only");
      return utils.encode(this.secret(), enc);
    };
    KeyPair2.prototype.getPublic = function getPublic2(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module.exports = KeyPair2;
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature2 = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var utils = require_utils4();
    var assert2 = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature2(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        assert2(sig.length === eddsa.encodingLength * 2, "Signature has invalid size");
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert2(sig.R && sig.S, "Signature without R or S");
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN3)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature2, "S", function S5() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature2, "R", function R3() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature2, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature2, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature2.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature2.prototype.toHex = function toHex2() {
      return utils.encode(this.toBytes(), "hex").toUpperCase();
    };
    module.exports = Signature2;
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var hash2 = require_hash();
    var curves = require_curves();
    var utils = require_utils4();
    var assert2 = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair2 = require_key2();
    var Signature2 = require_signature2();
    function EDDSA(curve) {
      assert2(curve === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash2.sha512;
    }
    module.exports = EDDSA;
    EDDSA.prototype.sign = function sign3(message, secret) {
      message = parseBytes(message);
      var key2 = this.keyFromSecret(secret);
      var r5 = this.hashInt(key2.messagePrefix(), message);
      var R3 = this.g.mul(r5);
      var Rencoded = this.encodePoint(R3);
      var s_ = this.hashInt(Rencoded, key2.pubBytes(), message).mul(key2.priv());
      var S5 = r5.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R3, S: S5, Rencoded });
    };
    EDDSA.prototype.verify = function verify3(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
        return false;
      }
      var key2 = this.keyFromPublic(pub);
      var h5 = this.hashInt(sig.Rencoded(), key2.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key2.pub().mul(h5));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash3 = this.hash();
      for (var i6 = 0; i6 < arguments.length; i6++)
        hash3.update(arguments[i6]);
      return utils.intFromLE(hash3.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic2(pub) {
      return KeyPair2.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair2.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature2)
        return sig;
      return new Signature2(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point3) {
      var enc = point3.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point3.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint2(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y6 = utils.intFromLE(normed);
      return this.curve.pointFromY(y6, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }
});

// node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  "node_modules/@walletconnect/utils/node_modules/elliptic/lib/elliptic.js"(exports) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var elliptic = exports;
    elliptic.version = require_package().version;
    elliptic.utils = require_utils4();
    elliptic.rand = require_brorand();
    elliptic.curve = require_curve();
    elliptic.curves = require_curves();
    elliptic.ec = require_ec();
    elliptic.eddsa = require_eddsa();
  }
});

// node_modules/@walletconnect/core/node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs7 = __commonJS({
  "node_modules/@walletconnect/core/node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow3(name) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
        res = window[name];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow3;
    function getFromWindowOrThrow3(name) {
      const res = getFromWindow3(name);
      if (!res) {
        throw new Error(`${name} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow3;
    function getDocumentOrThrow3() {
      return getFromWindowOrThrow3("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow3;
    function getDocument3() {
      return getFromWindow3("document");
    }
    exports.getDocument = getDocument3;
    function getNavigatorOrThrow3() {
      return getFromWindowOrThrow3("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow3;
    function getNavigator3() {
      return getFromWindow3("navigator");
    }
    exports.getNavigator = getNavigator3;
    function getLocationOrThrow3() {
      return getFromWindowOrThrow3("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow3;
    function getLocation3() {
      return getFromWindow3("location");
    }
    exports.getLocation = getLocation3;
    function getCryptoOrThrow3() {
      return getFromWindowOrThrow3("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow3;
    function getCrypto3() {
      return getFromWindow3("crypto");
    }
    exports.getCrypto = getCrypto3;
    function getLocalStorageOrThrow3() {
      return getFromWindowOrThrow3("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow3;
    function getLocalStorage3() {
      return getFromWindow3("localStorage");
    }
    exports.getLocalStorage = getLocalStorage3;
  }
});

// node_modules/@jnwng/walletconnect-solana/node_modules/base-x/src/index.js
var require_src = __commonJS({
  "node_modules/@jnwng/walletconnect-solana/node_modules/base-x/src/index.js"(exports, module) {
    "use strict";
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    function base2(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j3 = 0; j3 < BASE_MAP.length; j3++) {
        BASE_MAP[j3] = 255;
      }
      for (var i6 = 0; i6 < ALPHABET.length; i6++) {
        var x6 = ALPHABET.charAt(i6);
        var xc = x6.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x6 + " is ambiguous");
        }
        BASE_MAP[xc] = i6;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode4(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i7 = 0;
          for (var it1 = size - 1; (carry !== 0 || i7 < length) && it1 !== -1; it1--, i7++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i7;
          pbegin++;
        }
        var it22 = size - length;
        while (it22 !== size && b58[it22] === 0) {
          it22++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it22 < size; ++it22) {
          str += ALPHABET.charAt(b58[it22]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i7 = 0;
          for (var it32 = size - 1; (carry !== 0 || i7 < length) && it32 !== -1; it32--, i7++) {
            carry += BASE * b256[it32] >>> 0;
            b256[it32] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i7;
          psz++;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j4 = zeroes;
        while (it4 !== size) {
          vch[j4++] = b256[it4++];
        }
        return vch;
      }
      function decode3(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode4,
        decodeUnsafe,
        decode: decode3
      };
    }
    module.exports = base2;
  }
});

// node_modules/@jnwng/walletconnect-solana/node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "node_modules/@jnwng/walletconnect-solana/node_modules/bs58/index.js"(exports, module) {
    var import_dist187 = __toESM(require_dist());
    var import_dist188 = __toESM(require_dist2());
    var import_dist189 = __toESM(require_dist3());
    var basex = require_src();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module.exports = basex(ALPHABET);
  }
});

// node_modules/@jnwng/walletconnect-solana/lib/esm/index.js
var import_dist184 = __toESM(require_dist());
var import_dist185 = __toESM(require_dist2());
var import_dist186 = __toESM(require_dist3());

// node_modules/@jnwng/walletconnect-solana/lib/esm/adapter.js
var import_dist181 = __toESM(require_dist(), 1);
var import_dist182 = __toESM(require_dist2(), 1);
var import_dist183 = __toESM(require_dist3(), 1);
init_index_browser_esm();
var import_qrcode_modal = __toESM(require_cjs4(), 1);

// node_modules/@walletconnect/sign-client/dist/index.es.js
var import_dist175 = __toESM(require_dist());
var import_dist176 = __toESM(require_dist2());
var import_dist177 = __toESM(require_dist3());

// node_modules/@walletconnect/core/dist/index.es.js
var import_dist169 = __toESM(require_dist());
var import_dist170 = __toESM(require_dist2());
var import_dist171 = __toESM(require_dist3());
var import_events3 = __toESM(require_events());

// node_modules/@walletconnect/core/node_modules/@walletconnect/types/dist/index.es.js
var import_dist34 = __toESM(require_dist());
var import_dist35 = __toESM(require_dist2());
var import_dist36 = __toESM(require_dist3());
var import_events2 = __toESM(require_events());
var n2 = class extends IEvents {
  constructor(s3) {
    super(), this.opts = s3, this.protocol = "wc", this.version = 2;
  }
};
var h4 = class extends IEvents {
  constructor(s3, t3) {
    super(), this.core = s3, this.logger = t3, this.records = /* @__PURE__ */ new Map();
  }
};
var a3 = class {
  constructor(s3, t3) {
    this.logger = s3, this.core = t3;
  }
};
var g3 = class extends IEvents {
  constructor(s3, t3) {
    super(), this.relayer = s3, this.logger = t3;
  }
};
var u3 = class extends IEvents {
  constructor(s3) {
    super();
  }
};
var p3 = class {
  constructor(s3, t3, e3, f5) {
    this.core = s3, this.logger = t3, this.name = e3;
  }
};
var d3 = class extends IEvents {
  constructor(s3, t3) {
    super(), this.relayer = s3, this.logger = t3;
  }
};
var x3 = class extends IEvents {
  constructor(s3, t3) {
    super(), this.core = s3, this.logger = t3;
  }
};
var y4 = class {
  constructor(s3, t3, e3) {
    this.core = s3, this.logger = t3, this.store = e3;
  }
};
var v3 = class {
  constructor(s3, t3) {
    this.projectId = s3, this.logger = t3;
  }
};
var C4 = class {
  constructor(s3, t3, e3) {
    this.core = s3, this.logger = t3, this.telemetryEnabled = e3;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_time2 = __toESM(require_cjs());

// node_modules/@walletconnect/core/node_modules/@walletconnect/safe-json/dist/esm/index.js
var import_dist37 = __toESM(require_dist());
var import_dist38 = __toESM(require_dist2());
var import_dist39 = __toESM(require_dist3());
var JSONStringify = (data) => JSON.stringify(data, (_5, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_5, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse3(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a) {
    return value;
  }
}
function safeJsonStringify3(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_dist166 = __toESM(require_dist());
var import_dist167 = __toESM(require_dist2());
var import_dist168 = __toESM(require_dist3());

// node_modules/@walletconnect/utils/node_modules/detect-browser/es/index.js
var import_dist40 = __toESM(require_dist());
var import_dist41 = __toESM(require_dist2());
var import_dist42 = __toESM(require_dist3());
var __spreadArray = function(to2, from, pack) {
  if (pack || arguments.length === 2) for (var i6 = 0, l3 = from.length, ar3; i6 < l3; i6++) {
    if (ar3 || !(i6 in from)) {
      if (!ar3) ar3 = Array.prototype.slice.call(from, 0, i6);
      ar3[i6] = from[i6];
    }
  }
  return to2.concat(ar3 || Array.prototype.slice.call(from));
};
var BrowserInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function BrowserInfo3(name, version11, os) {
      this.name = name;
      this.version = version11;
      this.os = os;
      this.type = "browser";
    }
    return BrowserInfo3;
  }()
);
var NodeInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function NodeInfo3(version11) {
      this.version = version11;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo3;
  }()
);
var SearchBotDeviceInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function SearchBotDeviceInfo3(name, version11, os, bot) {
      this.name = name;
      this.version = version11;
      this.os = os;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo3;
  }()
);
var BotInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function BotInfo3() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo3;
  }()
);
var ReactNativeInfo2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function ReactNativeInfo3() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo3;
  }()
);
var SEARCHBOX_UA_REGEX2 = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX2 = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS2 = 3;
var userAgentRules2 = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX2]
];
var operatingSystemRules2 = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect2(userAgent) {
  if (!!userAgent) {
    return parseUserAgent2(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo2();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent2(navigator.userAgent);
  }
  return getNodeVersion2();
}
function matchUserAgent2(ua) {
  return ua !== "" && userAgentRules2.reduce(function(matched, _a) {
    var browser = _a[0], regex = _a[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent2(ua) {
  var matchedRule = matchUserAgent2(ua);
  if (!matchedRule) {
    return null;
  }
  var name = matchedRule[0], match = matchedRule[1];
  if (name === "searchbot") {
    return new BotInfo2();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS2) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts2(REQUIRED_VERSION_PARTS2 - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version11 = versionParts.join(".");
  var os = detectOS3(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX2.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo2(name, version11, os, searchBotMatch[1]);
  }
  return new BrowserInfo2(name, version11, os);
}
function detectOS3(ua) {
  for (var ii2 = 0, count = operatingSystemRules2.length; ii2 < count; ii2++) {
    var _a = operatingSystemRules2[ii2], os = _a[0], regex = _a[1];
    var match = regex.exec(ua);
    if (match) {
      return os;
    }
  }
  return null;
}
function getNodeVersion2() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo2(process.version.slice(1)) : null;
}
function createVersionParts2(count) {
  var output = [];
  for (var ii2 = 0; ii2 < count; ii2++) {
    output.push("0");
  }
  return output;
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_time = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs5());
var import_window_metadata = __toESM(require_cjs6());
var q3 = __toESM(require_query_string());

// node_modules/@ethersproject/hash/lib.esm/index.js
var import_dist148 = __toESM(require_dist());
var import_dist149 = __toESM(require_dist2());
var import_dist150 = __toESM(require_dist3());

// node_modules/@ethersproject/hash/lib.esm/id.js
var import_dist100 = __toESM(require_dist());
var import_dist101 = __toESM(require_dist2());
var import_dist102 = __toESM(require_dist3());

// node_modules/@ethersproject/keccak256/lib.esm/index.js
var import_dist55 = __toESM(require_dist());
var import_dist56 = __toESM(require_dist2());
var import_dist57 = __toESM(require_dist3());
var import_js_sha3 = __toESM(require_sha3());

// node_modules/@ethersproject/bytes/lib.esm/index.js
var import_dist52 = __toESM(require_dist());
var import_dist53 = __toESM(require_dist2());
var import_dist54 = __toESM(require_dist3());

// node_modules/@ethersproject/logger/lib.esm/index.js
var import_dist46 = __toESM(require_dist());
var import_dist47 = __toESM(require_dist2());
var import_dist48 = __toESM(require_dist3());

// node_modules/@ethersproject/logger/lib.esm/_version.js
var import_dist43 = __toESM(require_dist());
var import_dist44 = __toESM(require_dist2());
var import_dist45 = __toESM(require_dist3());
var version = "logger/5.7.0";

// node_modules/@ethersproject/logger/lib.esm/index.js
var _permanentCensorErrors = false;
var _censorErrors = false;
var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
var _logLevel = LogLevels["default"];
var _globalLogger = null;
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _normalizeError = _checkNormalize();
var LogLevel;
(function(LogLevel2) {
  LogLevel2["DEBUG"] = "DEBUG";
  LogLevel2["INFO"] = "INFO";
  LogLevel2["WARNING"] = "WARNING";
  LogLevel2["ERROR"] = "ERROR";
  LogLevel2["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
  ErrorCode2["TIMEOUT"] = "TIMEOUT";
  ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
  ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
  ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
})(ErrorCode || (ErrorCode = {}));
var HEX = "0123456789abcdef";
var Logger = class _Logger {
  constructor(version11) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version11,
      writable: false
    });
  }
  _log(logLevel, args) {
    const level = logLevel.toLowerCase();
    if (LogLevels[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }
    if (_logLevel > LogLevels[level]) {
      return;
    }
    console.log.apply(console, args);
  }
  debug(...args) {
    this._log(_Logger.levels.DEBUG, args);
  }
  info(...args) {
    this._log(_Logger.levels.INFO, args);
  }
  warn(...args) {
    this._log(_Logger.levels.WARNING, args);
  }
  makeError(message, code, params) {
    if (_censorErrors) {
      return this.makeError("censored error", code, {});
    }
    if (!code) {
      code = _Logger.errors.UNKNOWN_ERROR;
    }
    if (!params) {
      params = {};
    }
    const messageDetails = [];
    Object.keys(params).forEach((key2) => {
      const value = params[key2];
      try {
        if (value instanceof Uint8Array) {
          let hex = "";
          for (let i6 = 0; i6 < value.length; i6++) {
            hex += HEX[value[i6] >> 4];
            hex += HEX[value[i6] & 15];
          }
          messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
        } else {
          messageDetails.push(key2 + "=" + JSON.stringify(value));
        }
      } catch (error2) {
        messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
      }
    });
    messageDetails.push(`code=${code}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message;
    let url = "";
    switch (code) {
      case ErrorCode.NUMERIC_FAULT: {
        url = "NUMERIC_FAULT";
        const fault = message;
        switch (fault) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            url += "-" + fault;
            break;
          case "negative-power":
          case "negative-width":
            url += "-unsupported";
            break;
          case "unbound-bitwise-result":
            url += "-unbound-result";
            break;
        }
        break;
      }
      case ErrorCode.CALL_EXCEPTION:
      case ErrorCode.INSUFFICIENT_FUNDS:
      case ErrorCode.MISSING_NEW:
      case ErrorCode.NONCE_EXPIRED:
      case ErrorCode.REPLACEMENT_UNDERPRICED:
      case ErrorCode.TRANSACTION_REPLACED:
      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
        url = code;
        break;
    }
    if (url) {
      message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
    }
    if (messageDetails.length) {
      message += " (" + messageDetails.join(", ") + ")";
    }
    const error = new Error(message);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function(key2) {
      error[key2] = params[key2];
    });
    return error;
  }
  throwError(message, code, params) {
    throw this.makeError(message, code, params);
  }
  throwArgumentError(message, name, value) {
    return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {
      argument: name,
      value
    });
  }
  assert(condition, message, code, params) {
    if (!!condition) {
      return;
    }
    this.throwError(message, code, params);
  }
  assertArgument(condition, message, name, value) {
    if (!!condition) {
      return;
    }
    this.throwArgumentError(message, name, value);
  }
  checkNormalize(message) {
    if (message == null) {
      message = "platform missing String.prototype.normalize";
    }
    if (_normalizeError) {
      this.throwError("platform missing String.prototype.normalize", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError
      });
    }
  }
  checkSafeUint53(value, message) {
    if (typeof value !== "number") {
      return;
    }
    if (message == null) {
      message = "value not safe";
    }
    if (value < 0 || value >= 9007199254740991) {
      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value
      });
    }
    if (value % 1) {
      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value
      });
    }
  }
  checkArgumentCount(count, expectedCount, message) {
    if (message) {
      message = ": " + message;
    } else {
      message = "";
    }
    if (count < expectedCount) {
      this.throwError("missing argument" + message, _Logger.errors.MISSING_ARGUMENT, {
        count,
        expectedCount
      });
    }
    if (count > expectedCount) {
      this.throwError("too many arguments" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {
        count,
        expectedCount
      });
    }
  }
  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    } else if (target === Object || target == null) {
      this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  static globalLogger() {
    if (!_globalLogger) {
      _globalLogger = new _Logger(version);
    }
    return _globalLogger;
  }
  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    if (_permanentCensorErrors) {
      if (!censorship) {
        return;
      }
      this.globalLogger().throwError("error censorship permanent", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors = !!censorship;
    _permanentCensorErrors = !!permanent;
  }
  static setLogLevel(logLevel) {
    const level = LogLevels[logLevel.toLowerCase()];
    if (level == null) {
      _Logger.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }
    _logLevel = level;
  }
  static from(version11) {
    return new _Logger(version11);
  }
};
Logger.errors = ErrorCode;
Logger.levels = LogLevel;

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var import_dist49 = __toESM(require_dist());
var import_dist50 = __toESM(require_dist2());
var import_dist51 = __toESM(require_dist3());
var version2 = "bytes/5.7.0";

// node_modules/@ethersproject/bytes/lib.esm/index.js
var logger = new Logger(version2);
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i6 = 0; i6 < value.length; i6++) {
    const v6 = value[i6];
    if (!isInteger(v6) || v6 < 0 || v6 >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i6 = 0; i6 < hex.length; i6 += 2) {
      result.push(parseInt(hex.substring(i6, i6 + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat2(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function zeroPad(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
var HexCharacters = "0123456789abcdef";
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i6 = 0; i6 < value.length; i6++) {
      let v6 = value[i6];
      result += HexCharacters[(v6 & 240) >> 4] + HexCharacters[v6 & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature2) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature2)) {
    let bytes = arrayify(signature2);
    if (bytes.length === 64) {
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 127;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature2);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature2);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes[32] |= 128;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature2.r;
    result.s = signature2.s;
    result.v = signature2.v;
    result.recoveryParam = signature2.recoveryParam;
    result._vs = signature2._vs;
    if (result._vs != null) {
      const vs4 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs4);
      const recoveryParam = vs4[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
      }
      vs4[0] &= 127;
      const s3 = hexlify(vs4);
      if (result.s == null) {
        result.s = s3;
      } else if (result.s !== s3) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs3 = arrayify(result.s);
    if (vs3[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature2);
    }
    if (result.recoveryParam) {
      vs3[0] |= 128;
    }
    const _vs = hexlify(vs3);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature2);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}

// node_modules/@ethersproject/keccak256/lib.esm/index.js
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}

// node_modules/@ethersproject/strings/lib.esm/index.js
var import_dist97 = __toESM(require_dist());
var import_dist98 = __toESM(require_dist2());
var import_dist99 = __toESM(require_dist3());

// node_modules/@ethersproject/strings/lib.esm/bytes32.js
var import_dist91 = __toESM(require_dist());
var import_dist92 = __toESM(require_dist2());
var import_dist93 = __toESM(require_dist3());

// node_modules/@ethersproject/constants/lib.esm/index.js
var import_dist82 = __toESM(require_dist());
var import_dist83 = __toESM(require_dist2());
var import_dist84 = __toESM(require_dist3());

// node_modules/@ethersproject/constants/lib.esm/addresses.js
var import_dist58 = __toESM(require_dist());
var import_dist59 = __toESM(require_dist2());
var import_dist60 = __toESM(require_dist3());

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var import_dist73 = __toESM(require_dist());
var import_dist74 = __toESM(require_dist2());
var import_dist75 = __toESM(require_dist3());

// node_modules/@ethersproject/bignumber/lib.esm/index.js
var import_dist70 = __toESM(require_dist());
var import_dist71 = __toESM(require_dist2());
var import_dist72 = __toESM(require_dist3());

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var import_dist64 = __toESM(require_dist());
var import_dist65 = __toESM(require_dist2());
var import_dist66 = __toESM(require_dist3());
var import_bn = __toESM(require_bn());

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var import_dist61 = __toESM(require_dist());
var import_dist62 = __toESM(require_dist2());
var import_dist63 = __toESM(require_dist3());
var version3 = "bignumber/5.7.0";

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var BN = import_bn.default.BN;
var logger2 = new Logger(version3);
var _constructorGuard = {};
var MAX_SAFE = 9007199254740991;
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
var _warnedToStringRadix = false;
var BigNumber = class _BigNumber {
  constructor(constructorGuard, hex) {
    if (constructorGuard !== _constructorGuard) {
      logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  fromTwos(value) {
    return toBigNumber(toBN(this).fromTwos(value));
  }
  toTwos(value) {
    return toBigNumber(toBN(this).toTwos(value));
  }
  abs() {
    if (this._hex[0] === "-") {
      return _BigNumber.from(this._hex.substring(1));
    }
    return this;
  }
  add(other) {
    return toBigNumber(toBN(this).add(toBN(other)));
  }
  sub(other) {
    return toBigNumber(toBN(this).sub(toBN(other)));
  }
  div(other) {
    const o4 = _BigNumber.from(other);
    if (o4.isZero()) {
      throwFault("division-by-zero", "div");
    }
    return toBigNumber(toBN(this).div(toBN(other)));
  }
  mul(other) {
    return toBigNumber(toBN(this).mul(toBN(other)));
  }
  mod(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("division-by-zero", "mod");
    }
    return toBigNumber(toBN(this).umod(value));
  }
  pow(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("negative-power", "pow");
    }
    return toBigNumber(toBN(this).pow(value));
  }
  and(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "and");
    }
    return toBigNumber(toBN(this).and(value));
  }
  or(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "or");
    }
    return toBigNumber(toBN(this).or(value));
  }
  xor(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "xor");
    }
    return toBigNumber(toBN(this).xor(value));
  }
  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "mask");
    }
    return toBigNumber(toBN(this).maskn(value));
  }
  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shl");
    }
    return toBigNumber(toBN(this).shln(value));
  }
  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shr");
    }
    return toBigNumber(toBN(this).shrn(value));
  }
  eq(other) {
    return toBN(this).eq(toBN(other));
  }
  lt(other) {
    return toBN(this).lt(toBN(other));
  }
  lte(other) {
    return toBN(this).lte(toBN(other));
  }
  gt(other) {
    return toBN(this).gt(toBN(other));
  }
  gte(other) {
    return toBN(this).gte(toBN(other));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN(this).isZero();
  }
  toNumber() {
    try {
      return toBN(this).toNumber();
    } catch (error) {
      throwFault("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e3) {
    }
    return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix) {
          _warnedToStringRadix = true;
          logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
      }
    }
    return toBN(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(key2) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(value) {
    if (value instanceof _BigNumber) {
      return value;
    }
    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new _BigNumber(_constructorGuard, toHex(value));
      }
      if (value.match(/^-?[0-9]+$/)) {
        return new _BigNumber(_constructorGuard, toHex(new BN(value)));
      }
      return logger2.throwArgumentError("invalid BigNumber string", "value", value);
    }
    if (typeof value === "number") {
      if (value % 1) {
        throwFault("underflow", "BigNumber.from", value);
      }
      if (value >= MAX_SAFE || value <= -MAX_SAFE) {
        throwFault("overflow", "BigNumber.from", value);
      }
      return _BigNumber.from(String(value));
    }
    const anyValue = value;
    if (typeof anyValue === "bigint") {
      return _BigNumber.from(anyValue.toString());
    }
    if (isBytes(anyValue)) {
      return _BigNumber.from(hexlify(anyValue));
    }
    if (anyValue) {
      if (anyValue.toHexString) {
        const hex = anyValue.toHexString();
        if (typeof hex === "string") {
          return _BigNumber.from(hex);
        }
      } else {
        let hex = anyValue._hex;
        if (hex == null && anyValue.type === "BigNumber") {
          hex = anyValue.hex;
        }
        if (typeof hex === "string") {
          if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
            return _BigNumber.from(hex);
          }
        }
      }
    }
    return logger2.throwArgumentError("invalid BigNumber value", "value", value);
  }
  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }
};
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
var import_dist67 = __toESM(require_dist());
var import_dist68 = __toESM(require_dist2());
var import_dist69 = __toESM(require_dist3());
var logger3 = new Logger(version3);
var _constructorGuard2 = {};
var Zero = BigNumber.from(0);
var NegativeOne = BigNumber.from(-1);
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
var zeros = "0";
while (zeros.length < 256) {
  zeros += zeros;
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e3) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var FixedFormat = class _FixedFormat {
  constructor(constructorGuard, signed2, width, decimals) {
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed2;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier(decimals);
    Object.freeze(this);
  }
  static from(value) {
    if (value instanceof _FixedFormat) {
      return value;
    }
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed2 = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") {
      } else if (value === "ufixed") {
        signed2 = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        if (!match) {
          logger3.throwArgumentError("invalid fixed format", "format", value);
        }
        signed2 = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key2, type, defaultValue) => {
        if (value[key2] == null) {
          return defaultValue;
        }
        if (typeof value[key2] !== type) {
          logger3.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
        }
        return value[key2];
      };
      signed2 = check("signed", "boolean", signed2);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }
    if (decimals > 80) {
      logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }
    return new _FixedFormat(_constructorGuard2, signed2, width, decimals);
  }
};
var FixedNumber = class _FixedNumber {
  constructor(constructorGuard, hex, value, format) {
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }
  addUnsafe(other) {
    this._checkFormat(other);
    const a4 = parseFixed(this._value, this.format.decimals);
    const b4 = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a4.add(b4), this.format.decimals, this.format);
  }
  subUnsafe(other) {
    this._checkFormat(other);
    const a4 = parseFixed(this._value, this.format.decimals);
    const b4 = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a4.sub(b4), this.format.decimals, this.format);
  }
  mulUnsafe(other) {
    this._checkFormat(other);
    const a4 = parseFixed(this._value, this.format.decimals);
    const b4 = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a4.mul(b4).div(this.format._multiplier), this.format.decimals, this.format);
  }
  divUnsafe(other) {
    this._checkFormat(other);
    const a4 = parseFixed(this._value, this.format.decimals);
    const b4 = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a4.mul(this.format._multiplier).div(b4), this.format.decimals, this.format);
  }
  floor() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = _FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  ceiling() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = _FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  // @TODO: Support other rounding algorithms
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
    }
    if (comps[1].length <= decimals) {
      return this;
    }
    const factor = _FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
    const bump = BUMP.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }
  isZero() {
    return this._value === "0.0" || this._value === "0";
  }
  isNegative() {
    return this._value[0] === "-";
  }
  toString() {
    return this._value;
  }
  toHexString(width) {
    if (width == null) {
      return this._hex;
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid byte width", "width", width);
    }
    const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
    return hexZeroPad(hex, width / 8);
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return _FixedNumber.fromString(this._value, format);
  }
  static fromValue(value, decimals, format) {
    if (format == null && decimals != null && !isBigNumberish(decimals)) {
      format = decimals;
      decimals = null;
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (format == null) {
      format = "fixed";
    }
    return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
  }
  static fromString(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    const numeric = parseFixed(value, fixedFormat.decimals);
    if (!fixedFormat.signed && numeric.lt(Zero)) {
      throwFault2("unsigned value cannot be negative", "overflow", "value", value);
    }
    let hex = null;
    if (fixedFormat.signed) {
      hex = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex = numeric.toHexString();
      hex = hexZeroPad(hex, fixedFormat.width / 8);
    }
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static fromBytes(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    if (arrayify(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }
    let numeric = BigNumber.from(value);
    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }
    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static from(value, format) {
    if (typeof value === "string") {
      return _FixedNumber.fromString(value, format);
    }
    if (isBytes(value)) {
      return _FixedNumber.fromBytes(value, format);
    }
    try {
      return _FixedNumber.fromValue(value, 0, format);
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }
    return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
  }
  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }
};
var ONE = FixedNumber.from(1);
var BUMP = FixedNumber.from("0.5");

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2 = BigNumber.from(-1);
var Zero2 = BigNumber.from(0);
var One = BigNumber.from(1);
var Two = BigNumber.from(2);
var WeiPerEther = BigNumber.from("1000000000000000000");
var MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
var MaxInt256 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

// node_modules/@ethersproject/constants/lib.esm/hashes.js
var import_dist76 = __toESM(require_dist());
var import_dist77 = __toESM(require_dist2());
var import_dist78 = __toESM(require_dist3());

// node_modules/@ethersproject/constants/lib.esm/strings.js
var import_dist79 = __toESM(require_dist());
var import_dist80 = __toESM(require_dist2());
var import_dist81 = __toESM(require_dist3());

// node_modules/@ethersproject/strings/lib.esm/utf8.js
var import_dist88 = __toESM(require_dist());
var import_dist89 = __toESM(require_dist2());
var import_dist90 = __toESM(require_dist3());

// node_modules/@ethersproject/strings/lib.esm/_version.js
var import_dist85 = __toESM(require_dist());
var import_dist86 = __toESM(require_dist2());
var import_dist87 = __toESM(require_dist3());
var version4 = "strings/5.7.0";

// node_modules/@ethersproject/strings/lib.esm/utf8.js
var logger4 = new Logger(version4);
var UnicodeNormalizationForm;
(function(UnicodeNormalizationForm2) {
  UnicodeNormalizationForm2["current"] = "";
  UnicodeNormalizationForm2["NFC"] = "NFC";
  UnicodeNormalizationForm2["NFD"] = "NFD";
  UnicodeNormalizationForm2["NFKC"] = "NFKC";
  UnicodeNormalizationForm2["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
var Utf8ErrorReason;
(function(Utf8ErrorReason2) {
  Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
  Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
  Utf8ErrorReason2["OVERRUN"] = "string overrun";
  Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
  Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
  Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
  Utf8ErrorReason2["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger4.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i6 = 0;
    for (let o4 = offset + 1; o4 < bytes.length; o4++) {
      if (bytes[o4] >> 6 !== 2) {
        break;
      }
      i6++;
    }
    return i6;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger4.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i6 = 0; i6 < str.length; i6++) {
    const c5 = str.charCodeAt(i6);
    if (c5 < 128) {
      result.push(c5);
    } else if (c5 < 2048) {
      result.push(c5 >> 6 | 192);
      result.push(c5 & 63 | 128);
    } else if ((c5 & 64512) == 55296) {
      i6++;
      const c22 = str.charCodeAt(i6);
      if (i6 >= str.length || (c22 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c5 & 1023) << 10) + (c22 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c5 >> 12 | 224);
      result.push(c5 >> 6 & 63 | 128);
      result.push(c5 & 63 | 128);
    }
  }
  return arrayify(result);
}

// node_modules/@ethersproject/strings/lib.esm/idna.js
var import_dist94 = __toESM(require_dist());
var import_dist95 = __toESM(require_dist2());
var import_dist96 = __toESM(require_dist3());
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i6 = 0; i6 < data.length; i6 += 4) {
    result.push(parseInt(data.substring(i6, i6 + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo2 = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo2 += parseInt(comps[0], 16);
    result[lo2] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi2 = 0;
  return data.split(",").map((v6) => {
    let comps = v6.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo2 = hi2 + parseInt(comps[0], 16);
    hi2 = parseInt(comps[1], 16);
    return { l: lo2, h: hi2 };
  });
}
var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v6) => parseInt(v6, 16));
var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var import_dist121 = __toESM(require_dist());
var import_dist122 = __toESM(require_dist2());
var import_dist123 = __toESM(require_dist3());

// node_modules/@ethersproject/hash/lib.esm/_version.js
var import_dist103 = __toESM(require_dist());
var import_dist104 = __toESM(require_dist2());
var import_dist105 = __toESM(require_dist3());
var version5 = "hash/5.7.0";

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var import_dist118 = __toESM(require_dist());
var import_dist119 = __toESM(require_dist2());
var import_dist120 = __toESM(require_dist3());

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
var import_dist115 = __toESM(require_dist());
var import_dist116 = __toESM(require_dist2());
var import_dist117 = __toESM(require_dist3());

// node_modules/@ethersproject/base64/lib.esm/index.js
var import_dist109 = __toESM(require_dist());
var import_dist110 = __toESM(require_dist2());
var import_dist111 = __toESM(require_dist3());

// node_modules/@ethersproject/base64/lib.esm/base64.js
var import_dist106 = __toESM(require_dist());
var import_dist107 = __toESM(require_dist2());
var import_dist108 = __toESM(require_dist3());
function decode(textData) {
  textData = atob(textData);
  const data = [];
  for (let i6 = 0; i6 < textData.length; i6++) {
    data.push(textData.charCodeAt(i6));
  }
  return arrayify(data);
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js
var import_dist112 = __toESM(require_dist());
var import_dist113 = __toESM(require_dist2());
var import_dist114 = __toESM(require_dist3());
function flat(array, depth) {
  if (depth == null) {
    depth = 1;
  }
  const result = [];
  const forEach = result.forEach;
  const flatDeep = function(arr, depth2) {
    forEach.call(arr, function(val) {
      if (depth2 > 0 && Array.isArray(val)) {
        flatDeep(val, depth2 - 1);
      } else {
        result.push(val);
      }
    });
  };
  flatDeep(array, depth);
  return result;
}
function fromEntries(array) {
  const result = {};
  for (let i6 = 0; i6 < array.length; i6++) {
    const value = array[i6];
    result[value[0]] = value[1];
  }
  return result;
}
function decode_arithmetic(bytes) {
  let pos = 0;
  function u16() {
    return bytes[pos++] << 8 | bytes[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i6 = 1; i6 < symbol_count; i6++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N4 = 31;
  const FULL = Math.pow(2, N4);
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i6 = 0; i6 < N4; i6++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a4 = low + Math.floor(range * acc[start] / total);
    let b4 = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a4 ^ b4) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a4 = a4 << 1 & MASK;
      b4 = b4 << 1 & MASK | 1;
    }
    while (a4 & ~b4 & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a4 = a4 << 1 ^ HALF;
      b4 = (b4 ^ HALF) << 1 | HALF | 1;
    }
    low = a4;
    range = 1 + b4 - a4;
  }
  let offset = symbol_count - 4;
  return symbols.map((x6) => {
    switch (x6 - offset) {
      case 3:
        return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 2:
        return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 1:
        return offset + bytes[pos_payload++];
      default:
        return x6 - 1;
    }
  });
}
function read_payload(v6) {
  let pos = 0;
  return () => v6[pos++];
}
function read_compressed_payload(bytes) {
  return read_payload(decode_arithmetic(bytes));
}
function signed(i6) {
  return i6 & 1 ? ~i6 >> 1 : i6 >> 1;
}
function read_counts(n3, next) {
  let v6 = Array(n3);
  for (let i6 = 0; i6 < n3; i6++)
    v6[i6] = 1 + next();
  return v6;
}
function read_ascending(n3, next) {
  let v6 = Array(n3);
  for (let i6 = 0, x6 = -1; i6 < n3; i6++)
    v6[i6] = x6 += 1 + next();
  return v6;
}
function read_deltas(n3, next) {
  let v6 = Array(n3);
  for (let i6 = 0, x6 = 0; i6 < n3; i6++)
    v6[i6] = x6 += signed(next());
  return v6;
}
function read_member_array(next, lookup) {
  let v6 = read_ascending(next(), next);
  let n3 = next();
  let vX = read_ascending(n3, next);
  let vN = read_counts(n3, next);
  for (let i6 = 0; i6 < n3; i6++) {
    for (let j3 = 0; j3 < vN[i6]; j3++) {
      v6.push(vX[i6] + j3);
    }
  }
  return lookup ? v6.map((x6) => lookup[x6]) : v6;
}
function read_mapped_map(next) {
  let ret = [];
  while (true) {
    let w5 = next();
    if (w5 == 0)
      break;
    ret.push(read_linear_table(w5, next));
  }
  while (true) {
    let w5 = next() - 1;
    if (w5 < 0)
      break;
    ret.push(read_replacement_table(w5, next));
  }
  return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
  let v6 = [];
  while (true) {
    let i6 = next();
    if (i6 == 0)
      break;
    v6.push(i6);
  }
  return v6;
}
function read_transposed(n3, w5, next) {
  let m3 = Array(n3).fill(void 0).map(() => []);
  for (let i6 = 0; i6 < w5; i6++) {
    read_deltas(n3, next).forEach((x6, j3) => m3[j3].push(x6));
  }
  return m3;
}
function read_linear_table(w5, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_zero_terminated_array(next);
  let m3 = read_transposed(vN.length, 1 + w5, next);
  return flat(m3.map((v6, i6) => {
    const x6 = v6[0], ys3 = v6.slice(1);
    return Array(vN[i6]).fill(void 0).map((_5, j3) => {
      let j_dy = j3 * dy;
      return [x6 + j3 * dx, ys3.map((y6) => y6 + j_dy)];
    });
  }));
}
function read_replacement_table(w5, next) {
  let n3 = 1 + next();
  let m3 = read_transposed(n3, 1 + w5, next);
  return m3.map((v6) => [v6[0], v6.slice(1)]);
}
function read_emoji_trie(next) {
  let sorted = read_member_array(next).sort((a4, b4) => a4 - b4);
  return read();
  function read() {
    let branches = [];
    while (true) {
      let keys = read_member_array(next, sorted);
      if (keys.length == 0)
        break;
      branches.push({ set: new Set(keys), node: read() });
    }
    branches.sort((a4, b4) => b4.set.size - a4.set.size);
    let temp = next();
    let valid = temp % 3;
    temp = temp / 3 | 0;
    let fe0f = !!(temp & 1);
    temp >>= 1;
    let save = temp == 1;
    let check = temp == 2;
    return { branches, valid, fe0f, save, check };
  }
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
function getData() {
  return read_compressed_payload(decode(""));
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var r4 = getData();
var VALID = new Set(read_member_array(r4));
var IGNORED = new Set(read_member_array(r4));
var MAPPED = read_mapped_map(r4);
var EMOJI_ROOT = read_emoji_trie(r4);

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var logger5 = new Logger(version5);
var Zeros = new Uint8Array(32);
Zeros.fill(0);

// node_modules/@ethersproject/hash/lib.esm/message.js
var import_dist124 = __toESM(require_dist());
var import_dist125 = __toESM(require_dist2());
var import_dist126 = __toESM(require_dist3());
var messagePrefix = "Ethereum Signed Message:\n";
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256(concat2([
    toUtf8Bytes(messagePrefix),
    toUtf8Bytes(String(message.length)),
    message
  ]));
}

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
var import_dist145 = __toESM(require_dist());
var import_dist146 = __toESM(require_dist2());
var import_dist147 = __toESM(require_dist3());

// node_modules/@ethersproject/address/lib.esm/index.js
var import_dist136 = __toESM(require_dist());
var import_dist137 = __toESM(require_dist2());
var import_dist138 = __toESM(require_dist3());

// node_modules/@ethersproject/rlp/lib.esm/index.js
var import_dist130 = __toESM(require_dist());
var import_dist131 = __toESM(require_dist2());
var import_dist132 = __toESM(require_dist3());

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var import_dist127 = __toESM(require_dist());
var import_dist128 = __toESM(require_dist2());
var import_dist129 = __toESM(require_dist3());
var version6 = "rlp/5.7.0";

// node_modules/@ethersproject/rlp/lib.esm/index.js
var logger6 = new Logger(version6);

// node_modules/@ethersproject/address/lib.esm/_version.js
var import_dist133 = __toESM(require_dist());
var import_dist134 = __toESM(require_dist2());
var import_dist135 = __toESM(require_dist3());
var version7 = "address/5.7.0";

// node_modules/@ethersproject/address/lib.esm/index.js
var logger7 = new Logger(version7);
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i6 = 0; i6 < 40; i6++) {
    expanded[i6] = chars[i6].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i6 = 0; i6 < 40; i6 += 2) {
    if (hashed[i6 >> 1] >> 4 >= 8) {
      chars[i6] = chars[i6].toUpperCase();
    }
    if ((hashed[i6 >> 1] & 15) >= 8) {
      chars[i6 + 1] = chars[i6 + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var MAX_SAFE_INTEGER = 9007199254740991;
function log10(x6) {
  if (Math.log10) {
    return Math.log10(x6);
  }
  return Math.log(x6) / Math.LN10;
}
var ibanLookup = {};
for (let i6 = 0; i6 < 10; i6++) {
  ibanLookup[String(i6)] = String(i6);
}
for (let i6 = 0; i6 < 26; i6++) {
  ibanLookup[String.fromCharCode(65 + i6)] = String(10 + i6);
}
var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c5) => {
    return ibanLookup[c5];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger7.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger7.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  return result;
}

// node_modules/@ethersproject/properties/lib.esm/index.js
var import_dist142 = __toESM(require_dist());
var import_dist143 = __toESM(require_dist2());
var import_dist144 = __toESM(require_dist3());

// node_modules/@ethersproject/properties/lib.esm/_version.js
var import_dist139 = __toESM(require_dist());
var import_dist140 = __toESM(require_dist2());
var import_dist141 = __toESM(require_dist3());
var version8 = "properties/5.7.0";

// node_modules/@ethersproject/properties/lib.esm/index.js
var logger8 = new Logger(version8);
function defineReadOnly(object, name, value) {
  Object.defineProperty(object, name, {
    enumerable: true,
    value,
    writable: false
  });
}

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
var logger9 = new Logger(version5);
var padding = new Uint8Array(32);
padding.fill(0);
var NegativeOne3 = BigNumber.from(-1);
var Zero3 = BigNumber.from(0);
var One2 = BigNumber.from(1);
var MaxUint2562 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var hexTrue = hexZeroPad(One2.toHexString(), 32);
var hexFalse = hexZeroPad(Zero3.toHexString(), 32);
function checkString(key2) {
  return function(value) {
    if (typeof value !== "string") {
      logger9.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);
    }
    return value;
  };
}
var domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function(value) {
    try {
      return BigNumber.from(value).toString();
    } catch (error) {
    }
    return logger9.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
  },
  verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    return logger9.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  },
  salt: function(value) {
    try {
      const bytes = arrayify(value);
      if (bytes.length !== 32) {
        throw new Error("bad length");
      }
      return hexlify(bytes);
    } catch (error) {
    }
    return logger9.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
  }
};

// node_modules/@ethersproject/transactions/lib.esm/index.js
var import_dist163 = __toESM(require_dist());
var import_dist164 = __toESM(require_dist2());
var import_dist165 = __toESM(require_dist3());

// node_modules/@ethersproject/signing-key/lib.esm/index.js
var import_dist157 = __toESM(require_dist());
var import_dist158 = __toESM(require_dist2());
var import_dist159 = __toESM(require_dist3());

// node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
var import_dist151 = __toESM(require_dist());
var import_dist152 = __toESM(require_dist2());
var import_dist153 = __toESM(require_dist3());
var import_bn2 = __toESM(require_bn());
var import_hash = __toESM(require_hash());
function createCommonjsModule(fn, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn(module, module.exports), module.exports;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var minimalisticAssert = assert;
function assert(val, msg) {
  if (!val)
    throw new Error(msg || "Assertion failed");
}
assert.equal = function assertEqual(l3, r5, msg) {
  if (l3 != r5)
    throw new Error(msg || "Assertion failed: " + l3 + " != " + r5);
};
var utils_1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var utils = exports;
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== "string") {
      for (var i6 = 0; i6 < msg.length; i6++)
        res[i6] = msg[i6] | 0;
      return res;
    }
    if (enc === "hex") {
      msg = msg.replace(/[^a-z0-9]+/ig, "");
      if (msg.length % 2 !== 0)
        msg = "0" + msg;
      for (var i6 = 0; i6 < msg.length; i6 += 2)
        res.push(parseInt(msg[i6] + msg[i6 + 1], 16));
    } else {
      for (var i6 = 0; i6 < msg.length; i6++) {
        var c5 = msg.charCodeAt(i6);
        var hi2 = c5 >> 8;
        var lo2 = c5 & 255;
        if (hi2)
          res.push(hi2, lo2);
        else
          res.push(lo2);
      }
    }
    return res;
  }
  utils.toArray = toArray;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils.zero2 = zero2;
  function toHex2(msg) {
    var res = "";
    for (var i6 = 0; i6 < msg.length; i6++)
      res += zero2(msg[i6].toString(16));
    return res;
  }
  utils.toHex = toHex2;
  utils.encode = function encode4(arr, enc) {
    if (enc === "hex")
      return toHex2(arr);
    else
      return arr;
  };
});
var utils_1$1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var utils = exports;
  utils.assert = minimalisticAssert;
  utils.toArray = utils_1.toArray;
  utils.zero2 = utils_1.zero2;
  utils.toHex = utils_1.toHex;
  utils.encode = utils_1.encode;
  function getNAF2(num, w5, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws2 = 1 << w5 + 1;
    var k5 = num.clone();
    for (var i6 = 0; i6 < naf.length; i6++) {
      var z6;
      var mod = k5.andln(ws2 - 1);
      if (k5.isOdd()) {
        if (mod > (ws2 >> 1) - 1)
          z6 = (ws2 >> 1) - mod;
        else
          z6 = mod;
        k5.isubn(z6);
      } else {
        z6 = 0;
      }
      naf[i6] = z6;
      k5.iushrn(1);
    }
    return naf;
  }
  utils.getNAF = getNAF2;
  function getJSF2(k1, k22) {
    var jsf = [
      [],
      []
    ];
    k1 = k1.clone();
    k22 = k22.clone();
    var d1 = 0;
    var d22 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k22.cmpn(-d22) > 0) {
      var m14 = k1.andln(3) + d1 & 3;
      var m24 = k22.andln(3) + d22 & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = k1.andln(7) + d1 & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);
      var u22;
      if ((m24 & 1) === 0) {
        u22 = 0;
      } else {
        m8 = k22.andln(7) + d22 & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u22 = -m24;
        else
          u22 = m24;
      }
      jsf[1].push(u22);
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d22 === u22 + 1)
        d22 = 1 - d22;
      k1.iushrn(1);
      k22.iushrn(1);
    }
    return jsf;
  }
  utils.getJSF = getJSF2;
  function cachedProperty(obj, name, computer) {
    var key2 = "_" + name;
    obj.prototype[name] = function cachedProperty2() {
      return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;
  function parseBytes(bytes) {
    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
  }
  utils.parseBytes = parseBytes;
  function intFromLE(bytes) {
    return new import_bn2.default(bytes, "hex", "le");
  }
  utils.intFromLE = intFromLE;
});
var getNAF = utils_1$1.getNAF;
var getJSF = utils_1$1.getJSF;
var assert$1 = utils_1$1.assert;
function BaseCurve(type, conf) {
  this.type = type;
  this.p = new import_bn2.default(conf.p, 16);
  this.red = conf.prime ? import_bn2.default.red(conf.prime) : import_bn2.default.mont(this.p);
  this.zero = new import_bn2.default(0).toRed(this.red);
  this.one = new import_bn2.default(1).toRed(this.red);
  this.two = new import_bn2.default(2).toRed(this.red);
  this.n = conf.n && new import_bn2.default(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0;
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
var base = BaseCurve;
BaseCurve.prototype.point = function point() {
  throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function validate() {
  throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p4, k5) {
  assert$1(p4.precomputed);
  var doubles = p4._getDoubles();
  var naf = getNAF(k5, 1, this._bitLength);
  var I6 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I6 /= 3;
  var repr = [];
  var j3;
  var nafW;
  for (j3 = 0; j3 < naf.length; j3 += doubles.step) {
    nafW = 0;
    for (var l3 = j3 + doubles.step - 1; l3 >= j3; l3--)
      nafW = (nafW << 1) + naf[l3];
    repr.push(nafW);
  }
  var a4 = this.jpoint(null, null, null);
  var b4 = this.jpoint(null, null, null);
  for (var i6 = I6; i6 > 0; i6--) {
    for (j3 = 0; j3 < repr.length; j3++) {
      nafW = repr[j3];
      if (nafW === i6)
        b4 = b4.mixedAdd(doubles.points[j3]);
      else if (nafW === -i6)
        b4 = b4.mixedAdd(doubles.points[j3].neg());
    }
    a4 = a4.add(b4);
  }
  return a4.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p4, k5) {
  var w5 = 4;
  var nafPoints = p4._getNAFPoints(w5);
  w5 = nafPoints.wnd;
  var wnd = nafPoints.points;
  var naf = getNAF(k5, w5, this._bitLength);
  var acc = this.jpoint(null, null, null);
  for (var i6 = naf.length - 1; i6 >= 0; i6--) {
    for (var l3 = 0; i6 >= 0 && naf[i6] === 0; i6--)
      l3++;
    if (i6 >= 0)
      l3++;
    acc = acc.dblp(l3);
    if (i6 < 0)
      break;
    var z6 = naf[i6];
    assert$1(z6 !== 0);
    if (p4.type === "affine") {
      if (z6 > 0)
        acc = acc.mixedAdd(wnd[z6 - 1 >> 1]);
      else
        acc = acc.mixedAdd(wnd[-z6 - 1 >> 1].neg());
    } else {
      if (z6 > 0)
        acc = acc.add(wnd[z6 - 1 >> 1]);
      else
        acc = acc.add(wnd[-z6 - 1 >> 1].neg());
    }
  }
  return p4.type === "affine" ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;
  var max = 0;
  var i6;
  var j3;
  var p4;
  for (i6 = 0; i6 < len; i6++) {
    p4 = points[i6];
    var nafPoints = p4._getNAFPoints(defW);
    wndWidth[i6] = nafPoints.wnd;
    wnd[i6] = nafPoints.points;
  }
  for (i6 = len - 1; i6 >= 1; i6 -= 2) {
    var a4 = i6 - 1;
    var b4 = i6;
    if (wndWidth[a4] !== 1 || wndWidth[b4] !== 1) {
      naf[a4] = getNAF(coeffs[a4], wndWidth[a4], this._bitLength);
      naf[b4] = getNAF(coeffs[b4], wndWidth[b4], this._bitLength);
      max = Math.max(naf[a4].length, max);
      max = Math.max(naf[b4].length, max);
      continue;
    }
    var comb = [
      points[a4],
      /* 1 */
      null,
      /* 3 */
      null,
      /* 5 */
      points[b4]
      /* 7 */
    ];
    if (points[a4].y.cmp(points[b4].y) === 0) {
      comb[1] = points[a4].add(points[b4]);
      comb[2] = points[a4].toJ().mixedAdd(points[b4].neg());
    } else if (points[a4].y.cmp(points[b4].y.redNeg()) === 0) {
      comb[1] = points[a4].toJ().mixedAdd(points[b4]);
      comb[2] = points[a4].add(points[b4].neg());
    } else {
      comb[1] = points[a4].toJ().mixedAdd(points[b4]);
      comb[2] = points[a4].toJ().mixedAdd(points[b4].neg());
    }
    var index = [
      -3,
      /* -1 -1 */
      -1,
      /* -1 0 */
      -5,
      /* -1 1 */
      -7,
      /* 0 -1 */
      0,
      /* 0 0 */
      7,
      /* 0 1 */
      5,
      /* 1 -1 */
      1,
      /* 1 0 */
      3
      /* 1 1 */
    ];
    var jsf = getJSF(coeffs[a4], coeffs[b4]);
    max = Math.max(jsf[0].length, max);
    naf[a4] = new Array(max);
    naf[b4] = new Array(max);
    for (j3 = 0; j3 < max; j3++) {
      var ja = jsf[0][j3] | 0;
      var jb = jsf[1][j3] | 0;
      naf[a4][j3] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b4][j3] = 0;
      wnd[a4] = comb;
    }
  }
  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i6 = max; i6 >= 0; i6--) {
    var k5 = 0;
    while (i6 >= 0) {
      var zero = true;
      for (j3 = 0; j3 < len; j3++) {
        tmp[j3] = naf[j3][i6] | 0;
        if (tmp[j3] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k5++;
      i6--;
    }
    if (i6 >= 0)
      k5++;
    acc = acc.dblp(k5);
    if (i6 < 0)
      break;
    for (j3 = 0; j3 < len; j3++) {
      var z6 = tmp[j3];
      p4;
      if (z6 === 0)
        continue;
      else if (z6 > 0)
        p4 = wnd[j3][z6 - 1 >> 1];
      else if (z6 < 0)
        p4 = wnd[j3][-z6 - 1 >> 1].neg();
      if (p4.type === "affine")
        acc = acc.mixedAdd(p4);
      else
        acc = acc.add(p4);
    }
  }
  for (i6 = 0; i6 < len; i6++)
    wnd[i6] = null;
  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};
function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
  throw new Error("Not implemented");
};
BasePoint.prototype.validate = function validate2() {
  return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils_1$1.toArray(bytes, enc);
  var len = this.p.byteLength();
  if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 6)
      assert$1(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 7)
      assert$1(bytes[bytes.length - 1] % 2 === 1);
    var res = this.point(
      bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len)
    );
    return res;
  } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
  }
  throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x6 = this.getX().toArray("be", len);
  if (compact)
    return [this.getY().isEven() ? 2 : 3].concat(x6);
  return [4].concat(x6, this.getY().toArray("be", len));
};
BasePoint.prototype.encode = function encode3(enc, compact) {
  return utils_1$1.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;
  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;
  return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k5) {
  if (!this.precomputed)
    return false;
  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;
  return doubles.points.length >= Math.ceil((k5.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;
  var doubles = [this];
  var acc = this;
  for (var i6 = 0; i6 < power; i6 += step) {
    for (var j3 = 0; j3 < step; j3++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step,
    points: doubles
  };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;
  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl3 = max === 1 ? null : this.dbl();
  for (var i6 = 1; i6 < max; i6++)
    res[i6] = res[i6 - 1].add(dbl3);
  return {
    wnd,
    points: res
  };
};
BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};
BasePoint.prototype.dblp = function dblp(k5) {
  var r5 = this;
  for (var i6 = 0; i6 < k5; i6++)
    r5 = r5.dbl();
  return r5;
};
var inherits_browser = createCommonjsModule(function(module) {
  if (typeof Object.create === "function") {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
});
var assert$2 = utils_1$1.assert;
function ShortCurve(conf) {
  base.call(this, "short", conf);
  this.a = new import_bn2.default(conf.a, 16).toRed(this.red);
  this.b = new import_bn2.default(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits_browser(ShortCurve, base);
var short_1 = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new import_bn2.default(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new import_bn2.default(conf.lambda, 16);
  } else {
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new import_bn2.default(vec.a, 16),
        b: new import_bn2.default(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }
  return {
    beta,
    lambda,
    basis
  };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  var red = num === this.p ? this.red : import_bn2.default.mont(num);
  var tinv = new import_bn2.default(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var s3 = new import_bn2.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);
  var l1 = ntinv.redAdd(s3).fromRed();
  var l22 = ntinv.redSub(s3).fromRed();
  return [l1, l22];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
  var u4 = lambda;
  var v6 = this.n.clone();
  var x1 = new import_bn2.default(1);
  var y1 = new import_bn2.default(0);
  var x22 = new import_bn2.default(0);
  var y22 = new import_bn2.default(1);
  var a0;
  var b0;
  var a1;
  var b1;
  var a22;
  var b22;
  var prevR;
  var i6 = 0;
  var r5;
  var x6;
  while (u4.cmpn(0) !== 0) {
    var q5 = v6.div(u4);
    r5 = v6.sub(q5.mul(u4));
    x6 = x22.sub(q5.mul(x1));
    var y6 = y22.sub(q5.mul(y1));
    if (!a1 && r5.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r5.neg();
      b1 = x6;
    } else if (a1 && ++i6 === 2) {
      break;
    }
    prevR = r5;
    v6 = u4;
    u4 = r5;
    x22 = x1;
    x1 = x6;
    y22 = y1;
    y1 = y6;
  }
  a22 = r5.neg();
  b22 = x6;
  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a22.sqr().add(b22.sqr());
  if (len2.cmp(len1) >= 0) {
    a22 = a0;
    b22 = b0;
  }
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a22.negative) {
    a22 = a22.neg();
    b22 = b22.neg();
  }
  return [
    { a: a1, b: b1 },
    { a: a22, b: b22 }
  ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k5) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v22 = basis[1];
  var c1 = v22.b.mul(k5).divRound(this.n);
  var c22 = v1.b.neg().mul(k5).divRound(this.n);
  var p1 = c1.mul(v1.a);
  var p22 = c22.mul(v22.a);
  var q1 = c1.mul(v1.b);
  var q22 = c22.mul(v22.b);
  var k1 = k5.sub(p1).sub(p22);
  var k22 = q1.add(q22).neg();
  return { k1, k2: k22 };
};
ShortCurve.prototype.pointFromX = function pointFromX(x6, odd) {
  x6 = new import_bn2.default(x6, 16);
  if (!x6.red)
    x6 = x6.toRed(this.red);
  var y22 = x6.redSqr().redMul(x6).redIAdd(x6.redMul(this.a)).redIAdd(this.b);
  var y6 = y22.redSqrt();
  if (y6.redSqr().redSub(y22).cmp(this.zero) !== 0)
    throw new Error("invalid point");
  var isOdd = y6.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y6 = y6.redNeg();
  return this.point(x6, y6);
};
ShortCurve.prototype.validate = function validate3(point3) {
  if (point3.inf)
    return true;
  var x6 = point3.x;
  var y6 = point3.y;
  var ax = this.a.redMul(x6);
  var rhs = x6.redSqr().redMul(x6).redIAdd(ax).redIAdd(this.b);
  return y6.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i6 = 0; i6 < points.length; i6++) {
    var split = this._endoSplit(coeffs[i6]);
    var p4 = points[i6];
    var beta = p4._getBeta();
    if (split.k1.negative) {
      split.k1.ineg();
      p4 = p4.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }
    npoints[i6 * 2] = p4;
    npoints[i6 * 2 + 1] = beta;
    ncoeffs[i6 * 2] = split.k1;
    ncoeffs[i6 * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i6 * 2, jacobianResult);
  for (var j3 = 0; j3 < i6 * 2; j3++) {
    npoints[j3] = null;
    ncoeffs[j3] = null;
  }
  return res;
};
function Point(curve, x6, y6, isRed) {
  base.BasePoint.call(this, curve, "affine");
  if (x6 === null && y6 === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new import_bn2.default(x6, 16);
    this.y = new import_bn2.default(y6, 16);
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits_browser(Point, base.BasePoint);
ShortCurve.prototype.point = function point2(x6, y6, isRed) {
  return new Point(this, x6, y6, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta2() {
  if (!this.curve.endo)
    return;
  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;
  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p4) {
      return curve.point(p4.x.redMul(curve.endo.beta), p4.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};
Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [this.x, this.y];
  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === "string")
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;
  function obj2point(obj2) {
    return curve.point(obj2[0], obj2[1], red);
  }
  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};
Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return "<EC Point Infinity>";
  return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};
Point.prototype.add = function add(p4) {
  if (this.inf)
    return p4;
  if (p4.inf)
    return this;
  if (this.eq(p4))
    return this.dbl();
  if (this.neg().eq(p4))
    return this.curve.point(null, null);
  if (this.x.cmp(p4.x) === 0)
    return this.curve.point(null, null);
  var c5 = this.y.redSub(p4.y);
  if (c5.cmpn(0) !== 0)
    c5 = c5.redMul(this.x.redSub(p4.x).redInvm());
  var nx = c5.redSqr().redISub(this.x).redISub(p4.x);
  var ny = c5.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);
  var a4 = this.curve.a;
  var x22 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c5 = x22.redAdd(x22).redIAdd(x22).redIAdd(a4).redMul(dyinv);
  var nx = c5.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c5.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
  return this.x.fromRed();
};
Point.prototype.getY = function getY() {
  return this.y.fromRed();
};
Point.prototype.mul = function mul(k5) {
  k5 = new import_bn2.default(k5, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k5))
    return this.curve._fixedNafMul(this, k5);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([this], [k5]);
  else
    return this.curve._wnafMul(this, k5);
};
Point.prototype.mulAdd = function mulAdd(k1, p22, k22) {
  var points = [this, p22];
  var coeffs = [k1, k22];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p22, k22) {
  var points = [this, p22];
  var coeffs = [k1, k22];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq2(p4) {
  return this === p4 || this.inf === p4.inf && (this.inf || this.x.cmp(p4.x) === 0 && this.y.cmp(p4.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;
  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p4) {
      return p4.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};
Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);
  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};
function JPoint(curve, x6, y6, z6) {
  base.BasePoint.call(this, curve, "jacobian");
  if (x6 === null && y6 === null && z6 === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new import_bn2.default(0);
  } else {
    this.x = new import_bn2.default(x6, 16);
    this.y = new import_bn2.default(y6, 16);
    this.z = new import_bn2.default(z6, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}
inherits_browser(JPoint, base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x6, y6, z6) {
  return new JPoint(this, x6, y6, z6);
};
JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);
  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);
  return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg2() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add2(p4) {
  if (this.isInfinity())
    return p4;
  if (p4.isInfinity())
    return this;
  var pz2 = p4.z.redSqr();
  var z22 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u22 = p4.x.redMul(z22);
  var s1 = this.y.redMul(pz2.redMul(p4.z));
  var s22 = p4.y.redMul(z22.redMul(this.z));
  var h5 = u1.redSub(u22);
  var r5 = s1.redSub(s22);
  if (h5.cmpn(0) === 0) {
    if (r5.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }
  var h22 = h5.redSqr();
  var h32 = h22.redMul(h5);
  var v6 = u1.redMul(h22);
  var nx = r5.redSqr().redIAdd(h32).redISub(v6).redISub(v6);
  var ny = r5.redMul(v6.redISub(nx)).redISub(s1.redMul(h32));
  var nz = this.z.redMul(p4.z).redMul(h5);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p4) {
  if (this.isInfinity())
    return p4.toJ();
  if (p4.isInfinity())
    return this;
  var z22 = this.z.redSqr();
  var u1 = this.x;
  var u22 = p4.x.redMul(z22);
  var s1 = this.y;
  var s22 = p4.y.redMul(z22).redMul(this.z);
  var h5 = u1.redSub(u22);
  var r5 = s1.redSub(s22);
  if (h5.cmpn(0) === 0) {
    if (r5.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }
  var h22 = h5.redSqr();
  var h32 = h22.redMul(h5);
  var v6 = u1.redMul(h22);
  var nx = r5.redSqr().redIAdd(h32).redISub(v6).redISub(v6);
  var ny = r5.redMul(v6.redISub(nx)).redISub(s1.redMul(h32));
  var nz = this.z.redMul(h5);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp2(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();
  var i6;
  if (this.curve.zeroA || this.curve.threeA) {
    var r5 = this;
    for (i6 = 0; i6 < pow; i6++)
      r5 = r5.dbl();
    return r5;
  }
  var a4 = this.curve.a;
  var tinv = this.curve.tinv;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jyd = jy.redAdd(jy);
  for (i6 = 0; i6 < pow; i6++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c5 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a4.redMul(jz4));
    var t1 = jx.redMul(jyd2);
    var nx = c5.redSqr().redISub(t1.redAdd(t1));
    var t22 = t1.redISub(nx);
    var dny = c5.redMul(t22);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i6 + 1 < pow)
      jz4 = jz4.redMul(jyd4);
    jx = nx;
    jz = nz;
    jyd = dny;
  }
  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl2() {
  if (this.isInfinity())
    return this;
  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  if (this.zOne) {
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var yyyy = yy.redSqr();
    var s3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s3 = s3.redIAdd(s3);
    var m3 = xx.redAdd(xx).redIAdd(xx);
    var t3 = m3.redSqr().redISub(s3).redISub(s3);
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    nx = t3;
    ny = m3.redMul(s3.redISub(t3)).redISub(yyyy8);
    nz = this.y.redAdd(this.y);
  } else {
    var a4 = this.x.redSqr();
    var b4 = this.y.redSqr();
    var c5 = b4.redSqr();
    var d4 = this.x.redAdd(b4).redSqr().redISub(a4).redISub(c5);
    d4 = d4.redIAdd(d4);
    var e3 = a4.redAdd(a4).redIAdd(a4);
    var f5 = e3.redSqr();
    var c8 = c5.redIAdd(c5);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);
    nx = f5.redISub(d4).redISub(d4);
    ny = e3.redMul(d4.redISub(nx)).redISub(c8);
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  if (this.zOne) {
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var yyyy = yy.redSqr();
    var s3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s3 = s3.redIAdd(s3);
    var m3 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    var t3 = m3.redSqr().redISub(s3).redISub(s3);
    nx = t3;
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m3.redMul(s3.redISub(t3)).redISub(yyyy8);
    nz = this.y.redAdd(this.y);
  } else {
    var delta = this.z.redSqr();
    var gamma = this.y.redSqr();
    var beta = this.x.redMul(gamma);
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
  var a4 = this.curve.a;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();
  var c5 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a4.redMul(jz4));
  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c5.redSqr().redISub(t1.redAdd(t1));
  var t22 = t1.redISub(nx);
  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c5.redMul(t22).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);
  var xx = this.x.redSqr();
  var yy = this.y.redSqr();
  var zz = this.z.redSqr();
  var yyyy = yy.redSqr();
  var m3 = xx.redAdd(xx).redIAdd(xx);
  var mm = m3.redSqr();
  var e3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e3 = e3.redIAdd(e3);
  e3 = e3.redAdd(e3).redIAdd(e3);
  e3 = e3.redISub(mm);
  var ee3 = e3.redSqr();
  var t3 = yyyy.redIAdd(yyyy);
  t3 = t3.redIAdd(t3);
  t3 = t3.redIAdd(t3);
  t3 = t3.redIAdd(t3);
  var u4 = m3.redIAdd(e3).redSqr().redISub(mm).redISub(ee3).redISub(t3);
  var yyu4 = yy.redMul(u4);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee3).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  var ny = this.y.redMul(u4.redMul(t3.redISub(u4)).redISub(e3.redMul(ee3)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  var nz = this.z.redAdd(e3).redSqr().redISub(zz).redISub(ee3);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul2(k5, kbase) {
  k5 = new import_bn2.default(k5, kbase);
  return this.curve._wnafMul(this, k5);
};
JPoint.prototype.eq = function eq3(p4) {
  if (p4.type === "affine")
    return this.eq(p4.toJ());
  if (this === p4)
    return true;
  var z22 = this.z.redSqr();
  var pz2 = p4.z.redSqr();
  if (this.x.redMul(pz2).redISub(p4.x.redMul(z22)).cmpn(0) !== 0)
    return false;
  var z32 = z22.redMul(this.z);
  var pz3 = pz2.redMul(p4.z);
  return this.y.redMul(pz3).redISub(p4.y.redMul(z32)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x6) {
  var zs2 = this.z.redSqr();
  var rx = x6.toRed(this.curve.red).redMul(zs2);
  if (this.x.cmp(rx) === 0)
    return true;
  var xc = x6.clone();
  var t3 = this.curve.redN.redMul(zs2);
  for (; ; ) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;
    rx.redIAdd(t3);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};
JPoint.prototype.inspect = function inspect2() {
  if (this.isInfinity())
    return "<EC JPoint Infinity>";
  return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function isInfinity2() {
  return this.z.cmpn(0) === 0;
};
var curve_1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var curve = exports;
  curve.base = base;
  curve.short = short_1;
  curve.mont = /*RicMoo:ethers:require(./mont)*/
  null;
  curve.edwards = /*RicMoo:ethers:require(./edwards)*/
  null;
});
var curves_1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var curves = exports;
  var assert2 = utils_1$1.assert;
  function PresetCurve(options) {
    if (options.type === "short")
      this.curve = new curve_1.short(options);
    else if (options.type === "edwards")
      this.curve = new curve_1.edwards(options);
    else
      this.curve = new curve_1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert2(this.g.validate(), "Invalid curve");
    assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
  }
  curves.PresetCurve = PresetCurve;
  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }
  defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
      "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
    ]
  });
  defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
      "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
    ]
  });
  defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
      "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
    ]
  });
  defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: import_hash.default.sha384,
    gRed: false,
    g: [
      "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
      "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
  });
  defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: import_hash.default.sha512,
    gRed: false,
    g: [
      "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
      "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
  });
  defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "9"
    ]
  });
  defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: import_hash.default.sha256,
    gRed: false,
    g: [
      "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
      // 4/5
      "6666666666666666666666666666666666666666666666666666666666666658"
    ]
  });
  var pre;
  try {
    pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/
    null.crash();
  } catch (e3) {
    pre = void 0;
  }
  defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: import_hash.default.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
      {
        a: "3086d221a7d46bcde86c90e49284eb15",
        b: "-e4437ed6010e88286f547fa90abfe4c3"
      },
      {
        a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
        b: "3086d221a7d46bcde86c90e49284eb15"
      }
    ],
    gRed: false,
    g: [
      "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
      "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
      pre
    ]
  });
});
function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
  var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
  minimalisticAssert(
    entropy.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  );
  this._init(entropy, nonce, pers);
}
var hmacDrbg = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);
  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i6 = 0; i6 < this.V.length; i6++) {
    this.K[i6] = 0;
    this.V[i6] = 1;
  }
  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 281474976710656;
};
HmacDRBG.prototype._hmac = function hmac() {
  return new import_hash.default.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;
  this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
  if (typeof entropyEnc !== "string") {
    addEnc = add3;
    add3 = entropyEnc;
    entropyEnc = null;
  }
  entropy = utils_1.toArray(entropy, entropyEnc);
  add3 = utils_1.toArray(add3, addEnc);
  minimalisticAssert(
    entropy.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  );
  this._update(entropy.concat(add3 || []));
  this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error("Reseed is required");
  if (typeof enc !== "string") {
    addEnc = add3;
    add3 = enc;
    enc = null;
  }
  if (add3) {
    add3 = utils_1.toArray(add3, addEnc || "hex");
    this._update(add3);
  }
  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }
  var res = temp.slice(0, len);
  this._update(add3);
  this._reseed++;
  return utils_1.encode(res, enc);
};
var assert$3 = utils_1$1.assert;
function KeyPair(ec2, options) {
  this.ec = ec2;
  this.priv = null;
  this.pub = null;
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
var key = KeyPair;
KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(ec2, {
    pub,
    pubEnc: enc
  });
};
KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;
  return new KeyPair(ec2, {
    priv,
    privEnc: enc
  });
};
KeyPair.prototype.validate = function validate4() {
  var pub = this.getPublic();
  if (pub.isInfinity())
    return { result: false, reason: "Invalid public key" };
  if (!pub.validate())
    return { result: false, reason: "Public key is not a point" };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: "Public key * N != O" };
  return { result: true, reason: null };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (typeof compact === "string") {
    enc = compact;
    compact = null;
  }
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);
  if (!enc)
    return this.pub;
  return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === "hex")
    return this.priv.toString(16, 2);
  else
    return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
  this.priv = new import_bn2.default(key2, enc || 16);
  this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
  if (key2.x || key2.y) {
    if (this.ec.curve.type === "mont") {
      assert$3(key2.x, "Need x coordinate");
    } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
      assert$3(key2.x && key2.y, "Need both x and y coordinate");
    }
    this.pub = this.ec.curve.point(key2.x, key2.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key2, enc);
};
KeyPair.prototype.derive = function derive(pub) {
  if (!pub.validate()) {
    assert$3(pub.validate(), "public point not validated");
  }
  return pub.mul(this.priv).getX();
};
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature2) {
  return this.ec.verify(msg, signature2, this);
};
KeyPair.prototype.inspect = function inspect3() {
  return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};
var assert$4 = utils_1$1.assert;
function Signature(options, enc) {
  if (options instanceof Signature)
    return options;
  if (this._importDER(options, enc))
    return;
  assert$4(options.r && options.s, "Signature without r or s");
  this.r = new import_bn2.default(options.r, 16);
  this.s = new import_bn2.default(options.s, 16);
  if (options.recoveryParam === void 0)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
var signature = Signature;
function Position() {
  this.place = 0;
}
function getLength(buf, p4) {
  var initial = buf[p4.place++];
  if (!(initial & 128)) {
    return initial;
  }
  var octetLen = initial & 15;
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }
  var val = 0;
  for (var i6 = 0, off = p4.place; i6 < octetLen; i6++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }
  if (val <= 127) {
    return false;
  }
  p4.place = off;
  return val;
}
function rmPadding(buf) {
  var i6 = 0;
  var len = buf.length - 1;
  while (!buf[i6] && !(buf[i6 + 1] & 128) && i6 < len) {
    i6++;
  }
  if (i6 === 0) {
    return buf;
  }
  return buf.slice(i6);
}
Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils_1$1.toArray(data, enc);
  var p4 = new Position();
  if (data[p4.place++] !== 48) {
    return false;
  }
  var len = getLength(data, p4);
  if (len === false) {
    return false;
  }
  if (len + p4.place !== data.length) {
    return false;
  }
  if (data[p4.place++] !== 2) {
    return false;
  }
  var rlen = getLength(data, p4);
  if (rlen === false) {
    return false;
  }
  var r5 = data.slice(p4.place, rlen + p4.place);
  p4.place += rlen;
  if (data[p4.place++] !== 2) {
    return false;
  }
  var slen = getLength(data, p4);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p4.place) {
    return false;
  }
  var s3 = data.slice(p4.place, slen + p4.place);
  if (r5[0] === 0) {
    if (r5[1] & 128) {
      r5 = r5.slice(1);
    } else {
      return false;
    }
  }
  if (s3[0] === 0) {
    if (s3[1] & 128) {
      s3 = s3.slice(1);
    } else {
      return false;
    }
  }
  this.r = new import_bn2.default(r5);
  this.s = new import_bn2.default(s3);
  this.recoveryParam = null;
  return true;
};
function constructLength(arr, len) {
  if (len < 128) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 128);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 255);
  }
  arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
  var r5 = this.r.toArray();
  var s3 = this.s.toArray();
  if (r5[0] & 128)
    r5 = [0].concat(r5);
  if (s3[0] & 128)
    s3 = [0].concat(s3);
  r5 = rmPadding(r5);
  s3 = rmPadding(s3);
  while (!s3[0] && !(s3[1] & 128)) {
    s3 = s3.slice(1);
  }
  var arr = [2];
  constructLength(arr, r5.length);
  arr = arr.concat(r5);
  arr.push(2);
  constructLength(arr, s3.length);
  var backHalf = arr.concat(s3);
  var res = [48];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils_1$1.encode(res, enc);
};
var rand = (
  /*RicMoo:ethers:require(brorand)*/
  function() {
    throw new Error("unsupported");
  }
);
var assert$5 = utils_1$1.assert;
function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);
  if (typeof options === "string") {
    assert$5(
      Object.prototype.hasOwnProperty.call(curves_1, options),
      "Unknown curve " + options
    );
    options = curves_1[options];
  }
  if (options instanceof curves_1.PresetCurve)
    options = { curve: options };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);
  this.hash = options.hash || options.curve.hash;
}
var ec = EC;
EC.prototype.keyPair = function keyPair(options) {
  return new key(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return key.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return key.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};
  var drbg = new hmacDrbg({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || "utf8",
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || "utf8",
    nonce: this.n.toArray()
  });
  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new import_bn2.default(2));
  for (; ; ) {
    var priv = new import_bn2.default(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;
    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};
EC.prototype.sign = function sign2(msg, key2, enc, options) {
  if (typeof enc === "object") {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};
  key2 = this.keyFromPrivate(key2, enc);
  msg = this._truncateToN(new import_bn2.default(msg, 16));
  var bytes = this.n.byteLength();
  var bkey = key2.getPrivate().toArray("be", bytes);
  var nonce = msg.toArray("be", bytes);
  var drbg = new hmacDrbg({
    hash: this.hash,
    entropy: bkey,
    nonce,
    pers: options.pers,
    persEnc: options.persEnc || "utf8"
  });
  var ns1 = this.n.sub(new import_bn2.default(1));
  for (var iter = 0; ; iter++) {
    var k5 = options.k ? options.k(iter) : new import_bn2.default(drbg.generate(this.n.byteLength()));
    k5 = this._truncateToN(k5, true);
    if (k5.cmpn(1) <= 0 || k5.cmp(ns1) >= 0)
      continue;
    var kp = this.g.mul(k5);
    if (kp.isInfinity())
      continue;
    var kpX = kp.getX();
    var r5 = kpX.umod(this.n);
    if (r5.cmpn(0) === 0)
      continue;
    var s3 = k5.invm(this.n).mul(r5.mul(key2.getPrivate()).iadd(msg));
    s3 = s3.umod(this.n);
    if (s3.cmpn(0) === 0)
      continue;
    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r5) !== 0 ? 2 : 0);
    if (options.canonical && s3.cmp(this.nh) > 0) {
      s3 = this.n.sub(s3);
      recoveryParam ^= 1;
    }
    return new signature({ r: r5, s: s3, recoveryParam });
  }
};
EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
  msg = this._truncateToN(new import_bn2.default(msg, 16));
  key2 = this.keyFromPublic(key2, enc);
  signature$1 = new signature(signature$1, "hex");
  var r5 = signature$1.r;
  var s3 = signature$1.s;
  if (r5.cmpn(1) < 0 || r5.cmp(this.n) >= 0)
    return false;
  if (s3.cmpn(1) < 0 || s3.cmp(this.n) >= 0)
    return false;
  var sinv = s3.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u22 = sinv.mul(r5).umod(this.n);
  var p4;
  if (!this.curve._maxwellTrick) {
    p4 = this.g.mulAdd(u1, key2.getPublic(), u22);
    if (p4.isInfinity())
      return false;
    return p4.getX().umod(this.n).cmp(r5) === 0;
  }
  p4 = this.g.jmulAdd(u1, key2.getPublic(), u22);
  if (p4.isInfinity())
    return false;
  return p4.eqXToP(r5);
};
EC.prototype.recoverPubKey = function(msg, signature$1, j3, enc) {
  assert$5((3 & j3) === j3, "The recovery param is more than two bits");
  signature$1 = new signature(signature$1, enc);
  var n3 = this.n;
  var e3 = new import_bn2.default(msg);
  var r5 = signature$1.r;
  var s3 = signature$1.s;
  var isYOdd = j3 & 1;
  var isSecondKey = j3 >> 1;
  if (r5.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error("Unable to find sencond key candinate");
  if (isSecondKey)
    r5 = this.curve.pointFromX(r5.add(this.curve.n), isYOdd);
  else
    r5 = this.curve.pointFromX(r5, isYOdd);
  var rInv = signature$1.r.invm(n3);
  var s1 = n3.sub(e3).mul(rInv).umod(n3);
  var s22 = s3.mul(rInv).umod(n3);
  return this.g.mulAdd(s1, r5, s22);
};
EC.prototype.getKeyRecoveryParam = function(e3, signature$1, Q3, enc) {
  signature$1 = new signature(signature$1, enc);
  if (signature$1.recoveryParam !== null)
    return signature$1.recoveryParam;
  for (var i6 = 0; i6 < 4; i6++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e3, signature$1, i6);
    } catch (e4) {
      continue;
    }
    if (Qprime.eq(Q3))
      return i6;
  }
  throw new Error("Unable to find valid recovery factor");
};
var elliptic_1 = createCommonjsModule(function(module, exports) {
  "use strict";
  var elliptic = exports;
  elliptic.version = /*RicMoo:ethers*/
  { version: "6.5.4" }.version;
  elliptic.utils = utils_1$1;
  elliptic.rand = /*RicMoo:ethers:require(brorand)*/
  function() {
    throw new Error("unsupported");
  };
  elliptic.curve = curve_1;
  elliptic.curves = curves_1;
  elliptic.ec = ec;
  elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/
  null;
});
var EC$1 = elliptic_1.ec;

// node_modules/@ethersproject/signing-key/lib.esm/_version.js
var import_dist154 = __toESM(require_dist());
var import_dist155 = __toESM(require_dist2());
var import_dist156 = __toESM(require_dist3());
var version9 = "signing-key/5.7.0";

// node_modules/@ethersproject/signing-key/lib.esm/index.js
var logger10 = new Logger(version9);
var _curve = null;
function getCurve() {
  if (!_curve) {
    _curve = new EC$1("secp256k1");
  }
  return _curve;
}
var SigningKey = class {
  constructor(privateKey) {
    defineReadOnly(this, "curve", "secp256k1");
    defineReadOnly(this, "privateKey", hexlify(privateKey));
    if (hexDataLength(this.privateKey) !== 32) {
      logger10.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
    }
    const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
    defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
    defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
    defineReadOnly(this, "_isSigningKey", true);
  }
  _addPoint(other) {
    const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
    const p1 = getCurve().keyFromPublic(arrayify(other));
    return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
  }
  signDigest(digest) {
    const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
    const digestBytes = arrayify(digest);
    if (digestBytes.length !== 32) {
      logger10.throwArgumentError("bad digest length", "digest", digest);
    }
    const signature2 = keyPair2.sign(digestBytes, { canonical: true });
    return splitSignature({
      recoveryParam: signature2.recoveryParam,
      r: hexZeroPad("0x" + signature2.r.toString(16), 32),
      s: hexZeroPad("0x" + signature2.s.toString(16), 32)
    });
  }
  computeSharedSecret(otherKey) {
    const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
    const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
    return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
  }
  static isSigningKey(value) {
    return !!(value && value._isSigningKey);
  }
};
function recoverPublicKey(digest, signature2) {
  const sig = splitSignature(signature2);
  const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
  return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key2, compressed) {
  const bytes = arrayify(key2);
  if (bytes.length === 32) {
    const signingKey = new SigningKey(bytes);
    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
    }
    return signingKey.publicKey;
  } else if (bytes.length === 33) {
    if (compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
  } else if (bytes.length === 65) {
    if (!compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
  }
  return logger10.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}

// node_modules/@ethersproject/transactions/lib.esm/_version.js
var import_dist160 = __toESM(require_dist());
var import_dist161 = __toESM(require_dist2());
var import_dist162 = __toESM(require_dist3());
var version10 = "transactions/5.7.0";

// node_modules/@ethersproject/transactions/lib.esm/index.js
var logger11 = new Logger(version10);
var TransactionTypes;
(function(TransactionTypes2) {
  TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
  TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
  TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
})(TransactionTypes || (TransactionTypes = {}));
function computeAddress(key2) {
  const publicKey = computePublicKey(key2);
  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest, signature2) {
  return computeAddress(recoverPublicKey(arrayify(digest), signature2));
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_chacha20poly1305 = __toESM(require_chacha20poly1305());
var import_hkdf = __toESM(require_hkdf());
var import_random = __toESM(require_random());
var import_sha256 = __toESM(require_sha256());
var _e = __toESM(require_x25519());
var import_elliptic2 = __toESM(require_elliptic());
var H3 = ":";
function re(e3) {
  const [n3, t3] = e3.split(H3);
  return { namespace: n3, reference: t3 };
}
function oe(e3) {
  const [n3, t3, r5] = e3.split(H3);
  return { namespace: n3, reference: t3, address: r5 };
}
function W2(e3, n3) {
  return e3.includes(":") ? [e3] : n3.chains || [];
}
var gt = Object.defineProperty;
var Ke = Object.getOwnPropertySymbols;
var vt = Object.prototype.hasOwnProperty;
var bt = Object.prototype.propertyIsEnumerable;
var Le = (e3, n3, t3) => n3 in e3 ? gt(e3, n3, { enumerable: true, configurable: true, writable: true, value: t3 }) : e3[n3] = t3;
var Fe = (e3, n3) => {
  for (var t3 in n3 || (n3 = {})) vt.call(n3, t3) && Le(e3, t3, n3[t3]);
  if (Ke) for (var t3 of Ke(n3)) bt.call(n3, t3) && Le(e3, t3, n3[t3]);
  return e3;
};
var qe = "ReactNative";
var y5 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var He = "js";
function ce() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function _4() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === qe;
}
function V2() {
  return !ce() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function P3() {
  return _4() ? y5.reactNative : ce() ? y5.node : V2() ? y5.browser : y5.unknown;
}
function Ot() {
  var e3;
  try {
    return _4() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (e3 = global.Application) == null ? void 0 : e3.applicationId : void 0;
  } catch {
    return;
  }
}
function We(e3, n3) {
  let t3 = q3.parse(e3);
  return t3 = Fe(Fe({}, t3), n3), e3 = q3.stringify(t3), e3;
}
function Nt() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function Je() {
  if (P3() === y5.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: t3, Version: r5 } = global.Platform;
    return [t3, r5].join("-");
  }
  const e3 = detect2();
  if (e3 === null) return "unknown";
  const n3 = e3.os ? e3.os.replace(" ", "").toLowerCase() : "unknown";
  return e3.type === "browser" ? [n3, e3.name, e3.version].join("-") : [n3, e3.version].join("-");
}
function ze() {
  var e3;
  const n3 = P3();
  return n3 === y5.browser ? [n3, ((e3 = (0, import_window_getters.getLocation)()) == null ? void 0 : e3.host) || "unknown"].join(":") : n3;
}
function Ge(e3, n3, t3) {
  const r5 = Je(), o4 = ze();
  return [[e3, n3].join("-"), [He, t3].join("-"), r5, o4].join("/");
}
function $t({ protocol: e3, version: n3, relayUrl: t3, sdkVersion: r5, auth: o4, projectId: s3, useOnCloseEvent: i6, bundleId: u4 }) {
  const l3 = t3.split("?"), c5 = Ge(e3, n3, r5), d4 = { auth: o4, ua: c5, projectId: s3, useOnCloseEvent: i6 || void 0, origin: u4 || void 0 }, a4 = We(l3[1] || "", d4);
  return l3[0] + "?" + a4;
}
function $3(e3, n3) {
  return e3.filter((t3) => n3.includes(t3)).length === e3.length;
}
function Tt(e3) {
  return Object.fromEntries(e3.entries());
}
function Pt(e3) {
  return new Map(Object.entries(e3));
}
function _t(e3 = import_time.FIVE_MINUTES, n3) {
  const t3 = (0, import_time.toMiliseconds)(e3 || import_time.FIVE_MINUTES);
  let r5, o4, s3;
  return { resolve: (i6) => {
    s3 && r5 && (clearTimeout(s3), r5(i6));
  }, reject: (i6) => {
    s3 && o4 && (clearTimeout(s3), o4(i6));
  }, done: () => new Promise((i6, u4) => {
    s3 = setTimeout(() => {
      u4(new Error(n3));
    }, t3), r5 = i6, o4 = u4;
  }) };
}
function kt(e3, n3, t3) {
  return new Promise(async (r5, o4) => {
    const s3 = setTimeout(() => o4(new Error(t3)), n3);
    try {
      const i6 = await e3;
      r5(i6);
    } catch (i6) {
      o4(i6);
    }
    clearTimeout(s3);
  });
}
function ae(e3, n3) {
  if (typeof n3 == "string" && n3.startsWith(`${e3}:`)) return n3;
  if (e3.toLowerCase() === "topic") {
    if (typeof n3 != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${n3}`;
  } else if (e3.toLowerCase() === "id") {
    if (typeof n3 != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${n3}`;
  }
  throw new Error(`Unknown expirer target type: ${e3}`);
}
function Dt(e3) {
  return ae("topic", e3);
}
function xt(e3) {
  return ae("id", e3);
}
function Vt(e3) {
  const [n3, t3] = e3.split(":"), r5 = { id: void 0, topic: void 0 };
  if (n3 === "topic" && typeof t3 == "string") r5.topic = t3;
  else if (n3 === "id" && Number.isInteger(Number(t3))) r5.id = Number(t3);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${n3}:${t3}`);
  return r5;
}
function Mt(e3, n3) {
  return (0, import_time.fromMiliseconds)((n3 || Date.now()) + (0, import_time.toMiliseconds)(e3));
}
function Kt(e3) {
  return Date.now() >= (0, import_time.toMiliseconds)(e3);
}
function Lt(e3, n3) {
  return `${e3}${n3 ? `:${n3}` : ""}`;
}
function N3(e3 = [], n3 = []) {
  return [.../* @__PURE__ */ new Set([...e3, ...n3])];
}
async function Ft({ id: e3, topic: n3, wcDeepLink: t3 }) {
  var r5;
  try {
    if (!t3) return;
    const o4 = typeof t3 == "string" ? JSON.parse(t3) : t3, s3 = o4 == null ? void 0 : o4.href;
    if (typeof s3 != "string") return;
    const i6 = Xe(s3, e3, n3), u4 = P3();
    if (u4 === y5.browser) {
      if (!((r5 = (0, import_window_getters.getDocument)()) != null && r5.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      i6.startsWith("https://") || i6.startsWith("http://") ? window.open(i6, "_blank", "noreferrer noopener") : window.open(i6, en() ? "_blank" : "_self", "noreferrer noopener");
    } else u4 === y5.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i6);
  } catch (o4) {
    console.error(o4);
  }
}
function Xe(e3, n3, t3) {
  const r5 = `requestId=${n3}&sessionTopic=${t3}`;
  e3.endsWith("/") && (e3 = e3.slice(0, -1));
  let o4 = `${e3}`;
  if (e3.startsWith("https://t.me")) {
    const s3 = e3.includes("?") ? "&startapp=" : "?startapp=";
    o4 = `${o4}${s3}${nn(r5, true)}`;
  } else o4 = `${o4}/wc?${r5}`;
  return o4;
}
async function qt(e3, n3) {
  let t3 = "";
  try {
    if (V2() && (t3 = localStorage.getItem(n3), t3)) return t3;
    t3 = await e3.getItem(n3);
  } catch (r5) {
    console.error(r5);
  }
  return t3;
}
function Bt(e3, n3) {
  if (!e3.includes(n3)) return null;
  const t3 = e3.split(/([&,?,=])/), r5 = t3.indexOf(n3);
  return t3[r5 + 2];
}
function Ht() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (e3) => {
    const n3 = Math.random() * 16 | 0;
    return (e3 === "x" ? n3 : n3 & 3 | 8).toString(16);
  });
}
function Wt() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function en() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function nn(e3, n3 = false) {
  const t3 = Buffer.from(e3).toString("base64");
  return n3 ? t3.replace(/[=]/g, "") : t3;
}
function le(e3) {
  return Buffer.from(e3, "base64").toString("utf-8");
}
var Jt = "https://rpc.walletconnect.org/v1";
async function tn(e3, n3, t3, r5, o4, s3) {
  switch (t3.t) {
    case "eip191":
      return rn(e3, n3, t3.s);
    case "eip1271":
      return await on(e3, n3, t3.s, r5, o4, s3);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${t3.t}`);
  }
}
function rn(e3, n3, t3) {
  return recoverAddress(hashMessage(n3), t3).toLowerCase() === e3.toLowerCase();
}
async function on(e3, n3, t3, r5, o4, s3) {
  const i6 = re(r5);
  if (!i6.namespace || !i6.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r5}`);
  try {
    const u4 = "0x1626ba7e", l3 = "0000000000000000000000000000000000000000000000000000000000000040", c5 = "0000000000000000000000000000000000000000000000000000000000000041", d4 = t3.substring(2), a4 = hashMessage(n3).substring(2), f5 = u4 + a4 + l3 + c5 + d4, h5 = await fetch(`${s3 || Jt}/?chainId=${r5}&projectId=${o4}`, { method: "POST", body: JSON.stringify({ id: zt(), jsonrpc: "2.0", method: "eth_call", params: [{ to: e3, data: f5 }, "latest"] }) }), { result: p4 } = await h5.json();
    return p4 ? p4.slice(0, u4.length).toLowerCase() === u4.toLowerCase() : false;
  } catch (u4) {
    return console.error("isValidEip1271Signature: ", u4), false;
  }
}
function zt() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
var Gt = Object.defineProperty;
var Yt = Object.defineProperties;
var Qt = Object.getOwnPropertyDescriptors;
var sn = Object.getOwnPropertySymbols;
var Zt = Object.prototype.hasOwnProperty;
var Xt = Object.prototype.propertyIsEnumerable;
var cn = (e3, n3, t3) => n3 in e3 ? Gt(e3, n3, { enumerable: true, configurable: true, writable: true, value: t3 }) : e3[n3] = t3;
var de = (e3, n3) => {
  for (var t3 in n3 || (n3 = {})) Zt.call(n3, t3) && cn(e3, t3, n3[t3]);
  if (sn) for (var t3 of sn(n3)) Xt.call(n3, t3) && cn(e3, t3, n3[t3]);
  return e3;
};
var an = (e3, n3) => Yt(e3, Qt(n3));
var er = "did:pkh:";
var z3 = (e3) => e3 == null ? void 0 : e3.split(":");
var un = (e3) => {
  const n3 = e3 && z3(e3);
  if (n3) return e3.includes(er) ? n3[3] : n3[1];
};
var ln = (e3) => {
  const n3 = e3 && z3(e3);
  if (n3) return n3[2] + ":" + n3[3];
};
var fe = (e3) => {
  const n3 = e3 && z3(e3);
  if (n3) return n3.pop();
};
async function nr(e3) {
  const { cacao: n3, projectId: t3 } = e3, { s: r5, p: o4 } = n3, s3 = dn(o4, o4.iss), i6 = fe(o4.iss);
  return await tn(i6, s3, r5, ln(o4.iss), t3);
}
var dn = (e3, n3) => {
  const t3 = `${e3.domain} wants you to sign in with your Ethereum account:`, r5 = fe(n3);
  if (!e3.aud && !e3.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o4 = e3.statement || void 0;
  const s3 = `URI: ${e3.aud || e3.uri}`, i6 = `Version: ${e3.version}`, u4 = `Chain ID: ${un(n3)}`, l3 = `Nonce: ${e3.nonce}`, c5 = `Issued At: ${e3.iat}`, d4 = e3.exp ? `Expiration Time: ${e3.exp}` : void 0, a4 = e3.nbf ? `Not Before: ${e3.nbf}` : void 0, f5 = e3.requestId ? `Request ID: ${e3.requestId}` : void 0, h5 = e3.resources ? `Resources:${e3.resources.map((m3) => `
- ${m3}`).join("")}` : void 0, p4 = Y2(e3.resources);
  if (p4) {
    const m3 = R2(p4);
    o4 = he(o4, m3);
  }
  return [t3, r5, "", o4, "", s3, i6, u4, l3, c5, d4, a4, f5, h5].filter((m3) => m3 != null).join(`
`);
};
function hn(e3) {
  return Buffer.from(JSON.stringify(e3)).toString("base64");
}
function yn(e3) {
  return JSON.parse(Buffer.from(e3, "base64").toString("utf-8"));
}
function O2(e3) {
  if (!e3) throw new Error("No recap provided, value is undefined");
  if (!e3.att) throw new Error("No `att` property found");
  const n3 = Object.keys(e3.att);
  if (!(n3 != null && n3.length)) throw new Error("No resources found in `att` property");
  n3.forEach((t3) => {
    const r5 = e3.att[t3];
    if (Array.isArray(r5)) throw new Error(`Resource must be an object: ${t3}`);
    if (typeof r5 != "object") throw new Error(`Resource must be an object: ${t3}`);
    if (!Object.keys(r5).length) throw new Error(`Resource object is empty: ${t3}`);
    Object.keys(r5).forEach((o4) => {
      const s3 = r5[o4];
      if (!Array.isArray(s3)) throw new Error(`Ability limits ${o4} must be an array of objects, found: ${s3}`);
      if (!s3.length) throw new Error(`Value of ${o4} is empty array, must be an array with objects`);
      s3.forEach((i6) => {
        if (typeof i6 != "object") throw new Error(`Ability limits (${o4}) must be an array of objects, found: ${i6}`);
      });
    });
  });
}
function gn(e3, n3, t3, r5 = {}) {
  return t3 == null ? void 0 : t3.sort((o4, s3) => o4.localeCompare(s3)), { att: { [e3]: pe(n3, t3, r5) } };
}
function pe(e3, n3, t3 = {}) {
  n3 = n3 == null ? void 0 : n3.sort((o4, s3) => o4.localeCompare(s3));
  const r5 = n3.map((o4) => ({ [`${e3}/${o4}`]: [t3] }));
  return Object.assign({}, ...r5);
}
function G2(e3) {
  return O2(e3), `urn:recap:${hn(e3).replace(/=/g, "")}`;
}
function R2(e3) {
  const n3 = yn(e3.replace("urn:recap:", ""));
  return O2(n3), n3;
}
function ir(e3, n3, t3) {
  const r5 = gn(e3, n3, t3);
  return G2(r5);
}
function me(e3) {
  return e3 && e3.includes("urn:recap:");
}
function cr(e3, n3) {
  const t3 = R2(e3), r5 = R2(n3), o4 = bn(t3, r5);
  return G2(o4);
}
function bn(e3, n3) {
  O2(e3), O2(n3);
  const t3 = Object.keys(e3.att).concat(Object.keys(n3.att)).sort((o4, s3) => o4.localeCompare(s3)), r5 = { att: {} };
  return t3.forEach((o4) => {
    var s3, i6;
    Object.keys(((s3 = e3.att) == null ? void 0 : s3[o4]) || {}).concat(Object.keys(((i6 = n3.att) == null ? void 0 : i6[o4]) || {})).sort((u4, l3) => u4.localeCompare(l3)).forEach((u4) => {
      var l3, c5;
      r5.att[o4] = an(de({}, r5.att[o4]), { [u4]: ((l3 = e3.att[o4]) == null ? void 0 : l3[u4]) || ((c5 = n3.att[o4]) == null ? void 0 : c5[u4]) });
    });
  }), r5;
}
function he(e3 = "", n3) {
  O2(n3);
  const t3 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (e3.includes(t3)) return e3;
  const r5 = [];
  let o4 = 0;
  Object.keys(n3.att).forEach((u4) => {
    const l3 = Object.keys(n3.att[u4]).map((a4) => ({ ability: a4.split("/")[0], action: a4.split("/")[1] }));
    l3.sort((a4, f5) => a4.action.localeCompare(f5.action));
    const c5 = {};
    l3.forEach((a4) => {
      c5[a4.ability] || (c5[a4.ability] = []), c5[a4.ability].push(a4.action);
    });
    const d4 = Object.keys(c5).map((a4) => (o4++, `(${o4}) '${a4}': '${c5[a4].join("', '")}' for '${u4}'.`));
    r5.push(d4.join(", ").replace(".,", "."));
  });
  const s3 = r5.join(" "), i6 = `${t3}${s3}`;
  return `${e3 ? e3 + " " : ""}${i6}`;
}
function ar(e3) {
  var n3;
  const t3 = R2(e3);
  O2(t3);
  const r5 = (n3 = t3.att) == null ? void 0 : n3.eip155;
  return r5 ? Object.keys(r5).map((o4) => o4.split("/")[1]) : [];
}
function ur(e3) {
  const n3 = R2(e3);
  O2(n3);
  const t3 = [];
  return Object.values(n3.att).forEach((r5) => {
    Object.values(r5).forEach((o4) => {
      var s3;
      (s3 = o4 == null ? void 0 : o4[0]) != null && s3.chains && t3.push(o4[0].chains);
    });
  }), [...new Set(t3.flat())];
}
function Y2(e3) {
  if (!e3) return;
  const n3 = e3 == null ? void 0 : e3[e3.length - 1];
  return me(n3) ? n3 : void 0;
}
var ye = "base10";
var g4 = "base16";
var ge = "base64pad";
var lr = "base64url";
var k4 = "utf8";
var ve = 0;
var D3 = 1;
var M3 = 2;
var dr = 0;
var wn = 1;
var K2 = 12;
var be = 32;
function fr() {
  const e3 = _e.generateKeyPair();
  return { privateKey: toString(e3.secretKey, g4), publicKey: toString(e3.publicKey, g4) };
}
function pr() {
  const e3 = (0, import_random.randomBytes)(be);
  return toString(e3, g4);
}
function mr(e3, n3) {
  const t3 = _e.sharedKey(fromString(e3, g4), fromString(n3, g4), true), r5 = new import_hkdf.HKDF(import_sha256.SHA256, t3).expand(be);
  return toString(r5, g4);
}
function hr(e3) {
  const n3 = (0, import_sha256.hash)(fromString(e3, g4));
  return toString(n3, g4);
}
function yr(e3) {
  const n3 = (0, import_sha256.hash)(fromString(e3, k4));
  return toString(n3, g4);
}
function Ee(e3) {
  return fromString(`${e3}`, ye);
}
function A5(e3) {
  return Number(toString(e3, ye));
}
function gr(e3) {
  const n3 = Ee(typeof e3.type < "u" ? e3.type : ve);
  if (A5(n3) === D3 && typeof e3.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const t3 = typeof e3.senderPublicKey < "u" ? fromString(e3.senderPublicKey, g4) : void 0, r5 = typeof e3.iv < "u" ? fromString(e3.iv, g4) : (0, import_random.randomBytes)(K2), o4 = new import_chacha20poly1305.ChaCha20Poly1305(fromString(e3.symKey, g4)).seal(r5, fromString(e3.message, k4));
  return we({ type: n3, sealed: o4, iv: r5, senderPublicKey: t3, encoding: e3.encoding });
}
function vr(e3, n3) {
  const t3 = Ee(M3), r5 = (0, import_random.randomBytes)(K2), o4 = fromString(e3, k4);
  return we({ type: t3, sealed: o4, iv: r5, encoding: n3 });
}
function br(e3) {
  const n3 = new import_chacha20poly1305.ChaCha20Poly1305(fromString(e3.symKey, g4)), { sealed: t3, iv: r5 } = Q2({ encoded: e3.encoded, encoding: e3 == null ? void 0 : e3.encoding }), o4 = n3.open(r5, t3);
  if (o4 === null) throw new Error("Failed to decrypt");
  return toString(o4, k4);
}
function Er(e3, n3) {
  const { sealed: t3 } = Q2({ encoded: e3, encoding: n3 });
  return toString(t3, k4);
}
function we(e3) {
  const { encoding: n3 = ge } = e3;
  if (A5(e3.type) === M3) return toString(concat([e3.type, e3.sealed]), n3);
  if (A5(e3.type) === D3) {
    if (typeof e3.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString(concat([e3.type, e3.senderPublicKey, e3.iv, e3.sealed]), n3);
  }
  return toString(concat([e3.type, e3.iv, e3.sealed]), n3);
}
function Q2(e3) {
  const { encoded: n3, encoding: t3 = ge } = e3, r5 = fromString(n3, t3), o4 = r5.slice(dr, wn), s3 = wn;
  if (A5(o4) === D3) {
    const c5 = s3 + be, d4 = c5 + K2, a4 = r5.slice(s3, c5), f5 = r5.slice(c5, d4), h5 = r5.slice(d4);
    return { type: o4, sealed: h5, iv: f5, senderPublicKey: a4 };
  }
  if (A5(o4) === M3) {
    const c5 = r5.slice(s3), d4 = (0, import_random.randomBytes)(K2);
    return { type: o4, sealed: c5, iv: d4 };
  }
  const i6 = s3 + K2, u4 = r5.slice(s3, i6), l3 = r5.slice(i6);
  return { type: o4, sealed: l3, iv: u4 };
}
function wr(e3, n3) {
  const t3 = Q2({ encoded: e3, encoding: n3 == null ? void 0 : n3.encoding });
  return On({ type: A5(t3.type), senderPublicKey: typeof t3.senderPublicKey < "u" ? toString(t3.senderPublicKey, g4) : void 0, receiverPublicKey: n3 == null ? void 0 : n3.receiverPublicKey });
}
function On(e3) {
  const n3 = (e3 == null ? void 0 : e3.type) || ve;
  if (n3 === D3) {
    if (typeof (e3 == null ? void 0 : e3.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (e3 == null ? void 0 : e3.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: n3, senderPublicKey: e3 == null ? void 0 : e3.senderPublicKey, receiverPublicKey: e3 == null ? void 0 : e3.receiverPublicKey };
}
function Or(e3) {
  return e3.type === D3 && typeof e3.senderPublicKey == "string" && typeof e3.receiverPublicKey == "string";
}
function Nr(e3) {
  return e3.type === M3;
}
function Nn(e3) {
  return new import_elliptic2.ec("p256").keyFromPublic({ x: Buffer.from(e3.x, "base64").toString("hex"), y: Buffer.from(e3.y, "base64").toString("hex") }, "hex");
}
function Sr(e3) {
  let n3 = e3.replace(/-/g, "+").replace(/_/g, "/");
  const t3 = n3.length % 4;
  return t3 > 0 && (n3 += "=".repeat(4 - t3)), n3;
}
function $r(e3) {
  return Buffer.from(Sr(e3), "base64");
}
function Rr(e3, n3) {
  const [t3, r5, o4] = e3.split("."), s3 = $r(o4);
  if (s3.length !== 64) throw new Error("Invalid signature length");
  const i6 = s3.slice(0, 32).toString("hex"), u4 = s3.slice(32, 64).toString("hex"), l3 = `${t3}.${r5}`, c5 = new import_sha256.SHA256().update(Buffer.from(l3)).digest(), d4 = Nn(n3), a4 = Buffer.from(c5).toString("hex");
  if (!d4.verify(a4, { r: i6, s: u4 })) throw new Error("Invalid signature");
  return decodeJWT(e3).payload;
}
var Sn = "irn";
function Ir(e3) {
  return (e3 == null ? void 0 : e3.relay) || { protocol: Sn };
}
function jr(e3) {
  const n3 = C[e3];
  if (typeof n3 > "u") throw new Error(`Relay Protocol not supported: ${e3}`);
  return n3;
}
var Tr = Object.defineProperty;
var Pr = Object.defineProperties;
var Ar = Object.getOwnPropertyDescriptors;
var $n = Object.getOwnPropertySymbols;
var Cr = Object.prototype.hasOwnProperty;
var Ur = Object.prototype.propertyIsEnumerable;
var Rn = (e3, n3, t3) => n3 in e3 ? Tr(e3, n3, { enumerable: true, configurable: true, writable: true, value: t3 }) : e3[n3] = t3;
var In = (e3, n3) => {
  for (var t3 in n3 || (n3 = {})) Cr.call(n3, t3) && Rn(e3, t3, n3[t3]);
  if ($n) for (var t3 of $n(n3)) Ur.call(n3, t3) && Rn(e3, t3, n3[t3]);
  return e3;
};
var _r = (e3, n3) => Pr(e3, Ar(n3));
function jn(e3, n3 = "-") {
  const t3 = {}, r5 = "relay" + n3;
  return Object.keys(e3).forEach((o4) => {
    if (o4.startsWith(r5)) {
      const s3 = o4.replace(r5, ""), i6 = e3[o4];
      t3[s3] = i6;
    }
  }), t3;
}
function kr(e3) {
  if (!e3.includes("wc:")) {
    const l3 = le(e3);
    l3 != null && l3.includes("wc:") && (e3 = l3);
  }
  e3 = e3.includes("wc://") ? e3.replace("wc://", "") : e3, e3 = e3.includes("wc:") ? e3.replace("wc:", "") : e3;
  const n3 = e3.indexOf(":"), t3 = e3.indexOf("?") !== -1 ? e3.indexOf("?") : void 0, r5 = e3.substring(0, n3), o4 = e3.substring(n3 + 1, t3).split("@"), s3 = typeof t3 < "u" ? e3.substring(t3) : "", i6 = q3.parse(s3), u4 = typeof i6.methods == "string" ? i6.methods.split(",") : void 0;
  return { protocol: r5, topic: Tn(o4[0]), version: parseInt(o4[1], 10), symKey: i6.symKey, relay: jn(i6), methods: u4, expiryTimestamp: i6.expiryTimestamp ? parseInt(i6.expiryTimestamp, 10) : void 0 };
}
function Tn(e3) {
  return e3.startsWith("//") ? e3.substring(2) : e3;
}
function Pn(e3, n3 = "-") {
  const t3 = "relay", r5 = {};
  return Object.keys(e3).forEach((o4) => {
    const s3 = t3 + n3 + o4;
    e3[o4] && (r5[s3] = e3[o4]);
  }), r5;
}
function Dr(e3) {
  return `${e3.protocol}:${e3.topic}@${e3.version}?` + q3.stringify(In(_r(In({ symKey: e3.symKey }, Pn(e3.relay)), { expiryTimestamp: e3.expiryTimestamp }), e3.methods ? { methods: e3.methods.join(",") } : {}));
}
function xr(e3, n3, t3) {
  return `${e3}?wc_ev=${t3}&topic=${n3}`;
}
function C5(e3) {
  const n3 = [];
  return e3.forEach((t3) => {
    const [r5, o4] = t3.split(":");
    n3.push(`${r5}:${o4}`);
  }), n3;
}
function Un(e3) {
  const n3 = [];
  return Object.values(e3).forEach((t3) => {
    n3.push(...C5(t3.accounts));
  }), n3;
}
function _n(e3, n3) {
  const t3 = [];
  return Object.values(e3).forEach((r5) => {
    C5(r5.accounts).includes(n3) && t3.push(...r5.methods);
  }), t3;
}
function kn(e3, n3) {
  const t3 = [];
  return Object.values(e3).forEach((r5) => {
    C5(r5.accounts).includes(n3) && t3.push(...r5.events);
  }), t3;
}
function xn(e3) {
  const n3 = {};
  return e3 == null ? void 0 : e3.forEach((t3) => {
    const [r5, o4] = t3.split(":");
    n3[r5] || (n3[r5] = { accounts: [], chains: [], events: [] }), n3[r5].accounts.push(t3), n3[r5].chains.push(`${r5}:${o4}`);
  }), n3;
}
function Jr(e3, n3) {
  n3 = n3.map((r5) => r5.replace("did:pkh:", ""));
  const t3 = xn(n3);
  for (const [r5, o4] of Object.entries(t3)) o4.methods ? o4.methods = N3(o4.methods, e3) : o4.methods = e3, o4.events = ["chainChanged", "accountsChanged"];
  return t3;
}
var Vn = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var Mn = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function S2(e3, n3) {
  const { message: t3, code: r5 } = Mn[e3];
  return { message: n3 ? `${t3} ${n3}` : t3, code: r5 };
}
function U2(e3, n3) {
  const { message: t3, code: r5 } = Vn[e3];
  return { message: n3 ? `${t3} ${n3}` : t3, code: r5 };
}
function L3(e3, n3) {
  return Array.isArray(e3) ? typeof n3 < "u" && e3.length ? e3.every(n3) : true : false;
}
function Z2(e3) {
  return Object.getPrototypeOf(e3) === Object.prototype && Object.keys(e3).length;
}
function I3(e3) {
  return typeof e3 > "u";
}
function b2(e3, n3) {
  return n3 && I3(e3) ? true : typeof e3 == "string" && !!e3.trim().length;
}
function X2(e3, n3) {
  return n3 && I3(e3) ? true : typeof e3 == "number" && !isNaN(e3);
}
function zr(e3, n3) {
  const { requiredNamespaces: t3 } = n3, r5 = Object.keys(e3.namespaces), o4 = Object.keys(t3);
  let s3 = true;
  return $3(o4, r5) ? (r5.forEach((i6) => {
    const { accounts: u4, methods: l3, events: c5 } = e3.namespaces[i6], d4 = C5(u4), a4 = t3[i6];
    (!$3(W2(i6, a4), d4) || !$3(a4.methods, l3) || !$3(a4.events, c5)) && (s3 = false);
  }), s3) : false;
}
function F3(e3) {
  return b2(e3, false) && e3.includes(":") ? e3.split(":").length === 2 : false;
}
function Kn(e3) {
  if (b2(e3, false) && e3.includes(":")) {
    const n3 = e3.split(":");
    if (n3.length === 3) {
      const t3 = n3[0] + ":" + n3[1];
      return !!n3[2] && F3(t3);
    }
  }
  return false;
}
function Gr(e3) {
  function n3(t3) {
    try {
      return typeof new URL(t3) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (b2(e3, false)) {
      if (n3(e3)) return true;
      const t3 = le(e3);
      return n3(t3);
    }
  } catch {
  }
  return false;
}
function Yr(e3) {
  var n3;
  return (n3 = e3 == null ? void 0 : e3.proposer) == null ? void 0 : n3.publicKey;
}
function Qr(e3) {
  return e3 == null ? void 0 : e3.topic;
}
function Zr(e3, n3) {
  let t3 = null;
  return b2(e3 == null ? void 0 : e3.publicKey, false) || (t3 = S2("MISSING_OR_INVALID", `${n3} controller public key should be a string`)), t3;
}
function Se(e3) {
  let n3 = true;
  return L3(e3) ? e3.length && (n3 = e3.every((t3) => b2(t3, false))) : n3 = false, n3;
}
function Ln(e3, n3, t3) {
  let r5 = null;
  return L3(n3) && n3.length ? n3.forEach((o4) => {
    r5 || F3(o4) || (r5 = U2("UNSUPPORTED_CHAINS", `${t3}, chain ${o4} should be a string and conform to "namespace:chainId" format`));
  }) : F3(e3) || (r5 = U2("UNSUPPORTED_CHAINS", `${t3}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r5;
}
function Fn(e3, n3, t3) {
  let r5 = null;
  return Object.entries(e3).forEach(([o4, s3]) => {
    if (r5) return;
    const i6 = Ln(o4, W2(o4, s3), `${n3} ${t3}`);
    i6 && (r5 = i6);
  }), r5;
}
function qn(e3, n3) {
  let t3 = null;
  return L3(e3) ? e3.forEach((r5) => {
    t3 || Kn(r5) || (t3 = U2("UNSUPPORTED_ACCOUNTS", `${n3}, account ${r5} should be a string and conform to "namespace:chainId:address" format`));
  }) : t3 = U2("UNSUPPORTED_ACCOUNTS", `${n3}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), t3;
}
function Bn(e3, n3) {
  let t3 = null;
  return Object.values(e3).forEach((r5) => {
    if (t3) return;
    const o4 = qn(r5 == null ? void 0 : r5.accounts, `${n3} namespace`);
    o4 && (t3 = o4);
  }), t3;
}
function Hn(e3, n3) {
  let t3 = null;
  return Se(e3 == null ? void 0 : e3.methods) ? Se(e3 == null ? void 0 : e3.events) || (t3 = U2("UNSUPPORTED_EVENTS", `${n3}, events should be an array of strings or empty array for no events`)) : t3 = U2("UNSUPPORTED_METHODS", `${n3}, methods should be an array of strings or empty array for no methods`), t3;
}
function $e(e3, n3) {
  let t3 = null;
  return Object.values(e3).forEach((r5) => {
    if (t3) return;
    const o4 = Hn(r5, `${n3}, namespace`);
    o4 && (t3 = o4);
  }), t3;
}
function Xr(e3, n3, t3) {
  let r5 = null;
  if (e3 && Z2(e3)) {
    const o4 = $e(e3, n3);
    o4 && (r5 = o4);
    const s3 = Fn(e3, n3, t3);
    s3 && (r5 = s3);
  } else r5 = S2("MISSING_OR_INVALID", `${n3}, ${t3} should be an object with data`);
  return r5;
}
function Wn(e3, n3) {
  let t3 = null;
  if (e3 && Z2(e3)) {
    const r5 = $e(e3, n3);
    r5 && (t3 = r5);
    const o4 = Bn(e3, n3);
    o4 && (t3 = o4);
  } else t3 = S2("MISSING_OR_INVALID", `${n3}, namespaces should be an object with data`);
  return t3;
}
function Jn(e3) {
  return b2(e3.protocol, true);
}
function eo(e3, n3) {
  let t3 = false;
  return n3 && !e3 ? t3 = true : e3 && L3(e3) && e3.length && e3.forEach((r5) => {
    t3 = Jn(r5);
  }), t3;
}
function no(e3) {
  return typeof e3 == "number";
}
function to(e3) {
  return typeof e3 < "u" && typeof e3 !== null;
}
function ro(e3) {
  return !(!e3 || typeof e3 != "object" || !e3.code || !X2(e3.code, false) || !e3.message || !b2(e3.message, false));
}
function oo(e3) {
  return !(I3(e3) || !b2(e3.method, false));
}
function so(e3) {
  return !(I3(e3) || I3(e3.result) && I3(e3.error) || !X2(e3.id, false) || !b2(e3.jsonrpc, false));
}
function io(e3) {
  return !(I3(e3) || !b2(e3.name, false));
}
function co(e3, n3) {
  return !(!F3(n3) || !Un(e3).includes(n3));
}
function ao(e3, n3, t3) {
  return b2(t3, false) ? _n(e3, n3).includes(t3) : false;
}
function uo(e3, n3, t3) {
  return b2(t3, false) ? kn(e3, n3).includes(t3) : false;
}
function zn(e3, n3, t3) {
  let r5 = null;
  const o4 = lo(e3), s3 = fo(n3), i6 = Object.keys(o4), u4 = Object.keys(s3), l3 = Gn(Object.keys(e3)), c5 = Gn(Object.keys(n3)), d4 = l3.filter((a4) => !c5.includes(a4));
  return d4.length && (r5 = S2("NON_CONFORMING_NAMESPACES", `${t3} namespaces keys don't satisfy requiredNamespaces.
      Required: ${d4.toString()}
      Received: ${Object.keys(n3).toString()}`)), $3(i6, u4) || (r5 = S2("NON_CONFORMING_NAMESPACES", `${t3} namespaces chains don't satisfy required namespaces.
      Required: ${i6.toString()}
      Approved: ${u4.toString()}`)), Object.keys(n3).forEach((a4) => {
    if (!a4.includes(":") || r5) return;
    const f5 = C5(n3[a4].accounts);
    f5.includes(a4) || (r5 = S2("NON_CONFORMING_NAMESPACES", `${t3} namespaces accounts don't satisfy namespace accounts for ${a4}
        Required: ${a4}
        Approved: ${f5.toString()}`));
  }), i6.forEach((a4) => {
    r5 || ($3(o4[a4].methods, s3[a4].methods) ? $3(o4[a4].events, s3[a4].events) || (r5 = S2("NON_CONFORMING_NAMESPACES", `${t3} namespaces events don't satisfy namespace events for ${a4}`)) : r5 = S2("NON_CONFORMING_NAMESPACES", `${t3} namespaces methods don't satisfy namespace methods for ${a4}`));
  }), r5;
}
function lo(e3) {
  const n3 = {};
  return Object.keys(e3).forEach((t3) => {
    var r5;
    t3.includes(":") ? n3[t3] = e3[t3] : (r5 = e3[t3].chains) == null || r5.forEach((o4) => {
      n3[o4] = { methods: e3[t3].methods, events: e3[t3].events };
    });
  }), n3;
}
function Gn(e3) {
  return [...new Set(e3.map((n3) => n3.includes(":") ? n3.split(":")[0] : n3))];
}
function fo(e3) {
  const n3 = {};
  return Object.keys(e3).forEach((t3) => {
    if (t3.includes(":")) n3[t3] = e3[t3];
    else {
      const r5 = C5(e3[t3].accounts);
      r5 == null ? void 0 : r5.forEach((o4) => {
        n3[o4] = { accounts: e3[t3].accounts.filter((s3) => s3.includes(`${o4}:`)), methods: e3[t3].methods, events: e3[t3].events };
      });
    }
  }), n3;
}
function po(e3, n3) {
  return X2(e3, false) && e3 <= n3.max && e3 >= n3.min;
}
function mo() {
  const e3 = P3();
  return new Promise((n3) => {
    switch (e3) {
      case y5.browser:
        n3(Yn());
        break;
      case y5.reactNative:
        n3(Qn());
        break;
      case y5.node:
        n3(Zn());
        break;
      default:
        n3(true);
    }
  });
}
function Yn() {
  return V2() && (navigator == null ? void 0 : navigator.onLine);
}
async function Qn() {
  if (_4() && typeof global < "u" && global != null && global.NetInfo) {
    const e3 = await (global == null ? void 0 : global.NetInfo.fetch());
    return e3 == null ? void 0 : e3.isConnected;
  }
  return true;
}
function Zn() {
  return true;
}
function ho(e3) {
  switch (P3()) {
    case y5.browser:
      Xn(e3);
      break;
    case y5.reactNative:
      et(e3);
      break;
    case y5.node:
      break;
  }
}
function Xn(e3) {
  !_4() && V2() && (window.addEventListener("online", () => e3(true)), window.addEventListener("offline", () => e3(false)));
}
function et(e3) {
  _4() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((n3) => e3(n3 == null ? void 0 : n3.isConnected)));
}
var Re = {};
var yo = class {
  static get(n3) {
    return Re[n3];
  }
  static set(n3, t3) {
    Re[n3] = t3;
  }
  static delete(n3) {
    delete Re[n3];
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_lodash = __toESM(require_lodash());
var import_window_getters2 = __toESM(require_cjs7());
var ye2 = "wc";
var De = 2;
var ie = "core";
var x4 = `${ye2}@2:${ie}:`;
var Ye = { name: ie, logger: "error" };
var Je2 = { database: ":memory:" };
var Xe2 = "crypto";
var me2 = "client_ed25519_seed";
var We2 = import_time2.ONE_DAY;
var Ze = "keychain";
var Qe = "0.3";
var et2 = "messages";
var tt = "0.3";
var it2 = import_time2.SIX_HOURS;
var st2 = "publisher";
var rt = "irn";
var nt = "error";
var be2 = "wss://relay.walletconnect.org";
var ot = "relayer";
var v4 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var at2 = "_subscription";
var I4 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var ht = 0.1;
var se = "2.17.2";
var M4 = { link_mode: "link_mode", relay: "relay" };
var ct = "0.3";
var lt = "WALLETCONNECT_CLIENT_ID";
var fe2 = "WALLETCONNECT_LINK_MODE_APPS";
var O3 = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var ut2 = "subscription";
var dt = "0.3";
var pt = import_time2.FIVE_SECONDS * 1e3;
var gt2 = "pairing";
var yt = "0.3";
var B3 = { wc_pairingDelete: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 } } };
var V3 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var P4 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Dt2 = "history";
var mt = "0.3";
var bt2 = "expirer";
var S3 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var ft = "0.3";
var _t2 = "verify-api";
var vs = "https://verify.walletconnect.com";
var Et = "https://verify.walletconnect.org";
var J2 = Et;
var vt2 = `${J2}/v3`;
var wt = [vs, Et];
var It = "echo";
var Tt2 = "https://echo.walletconnect.com";
var z4 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var $4 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var Is = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var Ts = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var Cs = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var Ps = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Ct = 0.1;
var Pt2 = "event-client";
var St = 86400;
var Rt = "https://pulse.walletconnect.org/batch";
function Ss(o4, e3) {
  if (o4.length >= 255) throw new TypeError("Alphabet too long");
  for (var t3 = new Uint8Array(256), s3 = 0; s3 < t3.length; s3++) t3[s3] = 255;
  for (var i6 = 0; i6 < o4.length; i6++) {
    var r5 = o4.charAt(i6), n3 = r5.charCodeAt(0);
    if (t3[n3] !== 255) throw new TypeError(r5 + " is ambiguous");
    t3[n3] = i6;
  }
  var a4 = o4.length, h5 = o4.charAt(0), c5 = Math.log(a4) / Math.log(256), l3 = Math.log(256) / Math.log(a4);
  function p4(u4) {
    if (u4 instanceof Uint8Array || (ArrayBuffer.isView(u4) ? u4 = new Uint8Array(u4.buffer, u4.byteOffset, u4.byteLength) : Array.isArray(u4) && (u4 = Uint8Array.from(u4))), !(u4 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u4.length === 0) return "";
    for (var g5 = 0, _5 = 0, y6 = 0, b4 = u4.length; y6 !== b4 && u4[y6] === 0; ) y6++, g5++;
    for (var A6 = (b4 - y6) * l3 + 1 >>> 0, T4 = new Uint8Array(A6); y6 !== b4; ) {
      for (var N4 = u4[y6], k5 = 0, R3 = A6 - 1; (N4 !== 0 || k5 < _5) && R3 !== -1; R3--, k5++) N4 += 256 * T4[R3] >>> 0, T4[R3] = N4 % a4 >>> 0, N4 = N4 / a4 >>> 0;
      if (N4 !== 0) throw new Error("Non-zero carry");
      _5 = k5, y6++;
    }
    for (var L4 = A6 - _5; L4 !== A6 && T4[L4] === 0; ) L4++;
    for (var Q3 = h5.repeat(g5); L4 < A6; ++L4) Q3 += o4.charAt(T4[L4]);
    return Q3;
  }
  function D5(u4) {
    if (typeof u4 != "string") throw new TypeError("Expected String");
    if (u4.length === 0) return new Uint8Array();
    var g5 = 0;
    if (u4[g5] !== " ") {
      for (var _5 = 0, y6 = 0; u4[g5] === h5; ) _5++, g5++;
      for (var b4 = (u4.length - g5) * c5 + 1 >>> 0, A6 = new Uint8Array(b4); u4[g5]; ) {
        var T4 = t3[u4.charCodeAt(g5)];
        if (T4 === 255) return;
        for (var N4 = 0, k5 = b4 - 1; (T4 !== 0 || N4 < y6) && k5 !== -1; k5--, N4++) T4 += a4 * A6[k5] >>> 0, A6[k5] = T4 % 256 >>> 0, T4 = T4 / 256 >>> 0;
        if (T4 !== 0) throw new Error("Non-zero carry");
        y6 = N4, g5++;
      }
      if (u4[g5] !== " ") {
        for (var R3 = b4 - y6; R3 !== b4 && A6[R3] === 0; ) R3++;
        for (var L4 = new Uint8Array(_5 + (b4 - R3)), Q3 = _5; R3 !== b4; ) L4[Q3++] = A6[R3++];
        return L4;
      }
    }
  }
  function m3(u4) {
    var g5 = D5(u4);
    if (g5) return g5;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: p4, decodeUnsafe: D5, decode: m3 };
}
var Rs = Ss;
var xs = Rs;
var xt2 = (o4) => {
  if (o4 instanceof Uint8Array && o4.constructor.name === "Uint8Array") return o4;
  if (o4 instanceof ArrayBuffer) return new Uint8Array(o4);
  if (ArrayBuffer.isView(o4)) return new Uint8Array(o4.buffer, o4.byteOffset, o4.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Os = (o4) => new TextEncoder().encode(o4);
var As = (o4) => new TextDecoder().decode(o4);
var Ns = class {
  constructor(e3, t3, s3) {
    this.name = e3, this.prefix = t3, this.baseEncode = s3;
  }
  encode(e3) {
    if (e3 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e3)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var zs = class {
  constructor(e3, t3, s3) {
    if (this.name = e3, this.prefix = t3, t3.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t3.codePointAt(0), this.baseDecode = s3;
  }
  decode(e3) {
    if (typeof e3 == "string") {
      if (e3.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e3.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e3) {
    return Ot2(this, e3);
  }
};
var Ls = class {
  constructor(e3) {
    this.decoders = e3;
  }
  or(e3) {
    return Ot2(this, e3);
  }
  decode(e3) {
    const t3 = e3[0], s3 = this.decoders[t3];
    if (s3) return s3.decode(e3);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var Ot2 = (o4, e3) => new Ls({ ...o4.decoders || { [o4.prefix]: o4 }, ...e3.decoders || { [e3.prefix]: e3 } });
var $s = class {
  constructor(e3, t3, s3, i6) {
    this.name = e3, this.prefix = t3, this.baseEncode = s3, this.baseDecode = i6, this.encoder = new Ns(e3, t3, s3), this.decoder = new zs(e3, t3, i6);
  }
  encode(e3) {
    return this.encoder.encode(e3);
  }
  decode(e3) {
    return this.decoder.decode(e3);
  }
};
var re2 = ({ name: o4, prefix: e3, encode: t3, decode: s3 }) => new $s(o4, e3, t3, s3);
var X3 = ({ prefix: o4, name: e3, alphabet: t3 }) => {
  const { encode: s3, decode: i6 } = xs(t3, e3);
  return re2({ prefix: o4, name: e3, encode: s3, decode: (r5) => xt2(i6(r5)) });
};
var ks = (o4, e3, t3, s3) => {
  const i6 = {};
  for (let l3 = 0; l3 < e3.length; ++l3) i6[e3[l3]] = l3;
  let r5 = o4.length;
  for (; o4[r5 - 1] === "="; ) --r5;
  const n3 = new Uint8Array(r5 * t3 / 8 | 0);
  let a4 = 0, h5 = 0, c5 = 0;
  for (let l3 = 0; l3 < r5; ++l3) {
    const p4 = i6[o4[l3]];
    if (p4 === void 0) throw new SyntaxError(`Non-${s3} character`);
    h5 = h5 << t3 | p4, a4 += t3, a4 >= 8 && (a4 -= 8, n3[c5++] = 255 & h5 >> a4);
  }
  if (a4 >= t3 || 255 & h5 << 8 - a4) throw new SyntaxError("Unexpected end of data");
  return n3;
};
var Ms = (o4, e3, t3) => {
  const s3 = e3[e3.length - 1] === "=", i6 = (1 << t3) - 1;
  let r5 = "", n3 = 0, a4 = 0;
  for (let h5 = 0; h5 < o4.length; ++h5) for (a4 = a4 << 8 | o4[h5], n3 += 8; n3 > t3; ) n3 -= t3, r5 += e3[i6 & a4 >> n3];
  if (n3 && (r5 += e3[i6 & a4 << t3 - n3]), s3) for (; r5.length * t3 & 7; ) r5 += "=";
  return r5;
};
var f4 = ({ name: o4, prefix: e3, bitsPerChar: t3, alphabet: s3 }) => re2({ prefix: e3, name: o4, encode(i6) {
  return Ms(i6, s3, t3);
}, decode(i6) {
  return ks(i6, s3, t3, o4);
} });
var Us = re2({ prefix: "\0", name: "identity", encode: (o4) => As(o4), decode: (o4) => Os(o4) });
var Fs = Object.freeze({ __proto__: null, identity: Us });
var Ks = f4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var Bs = Object.freeze({ __proto__: null, base2: Ks });
var Vs = f4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var js = Object.freeze({ __proto__: null, base8: Vs });
var qs = X3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Gs = Object.freeze({ __proto__: null, base10: qs });
var Hs = f4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Ys = f4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Js = Object.freeze({ __proto__: null, base16: Hs, base16upper: Ys });
var Xs = f4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Ws = f4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Zs = f4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Qs = f4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var er2 = f4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var tr = f4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ir2 = f4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var sr = f4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var rr = f4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var nr2 = Object.freeze({ __proto__: null, base32: Xs, base32upper: Ws, base32pad: Zs, base32padupper: Qs, base32hex: er2, base32hexupper: tr, base32hexpad: ir2, base32hexpadupper: sr, base32z: rr });
var or = X3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var ar2 = X3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var hr2 = Object.freeze({ __proto__: null, base36: or, base36upper: ar2 });
var cr2 = X3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var lr2 = X3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ur2 = Object.freeze({ __proto__: null, base58btc: cr2, base58flickr: lr2 });
var dr2 = f4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var pr2 = f4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var gr2 = f4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var yr2 = f4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Dr2 = Object.freeze({ __proto__: null, base64: dr2, base64pad: pr2, base64url: gr2, base64urlpad: yr2 });
var At = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var mr2 = At.reduce((o4, e3, t3) => (o4[t3] = e3, o4), []);
var br2 = At.reduce((o4, e3, t3) => (o4[e3.codePointAt(0)] = t3, o4), []);
function fr2(o4) {
  return o4.reduce((e3, t3) => (e3 += mr2[t3], e3), "");
}
function _r2(o4) {
  const e3 = [];
  for (const t3 of o4) {
    const s3 = br2[t3.codePointAt(0)];
    if (s3 === void 0) throw new Error(`Non-base256emoji character: ${t3}`);
    e3.push(s3);
  }
  return new Uint8Array(e3);
}
var Er2 = re2({ prefix: "🚀", name: "base256emoji", encode: fr2, decode: _r2 });
var vr2 = Object.freeze({ __proto__: null, base256emoji: Er2 });
var wr2 = zt2;
var Nt2 = 128;
var Ir2 = 127;
var Tr2 = ~Ir2;
var Cr2 = Math.pow(2, 31);
function zt2(o4, e3, t3) {
  e3 = e3 || [], t3 = t3 || 0;
  for (var s3 = t3; o4 >= Cr2; ) e3[t3++] = o4 & 255 | Nt2, o4 /= 128;
  for (; o4 & Tr2; ) e3[t3++] = o4 & 255 | Nt2, o4 >>>= 7;
  return e3[t3] = o4 | 0, zt2.bytes = t3 - s3 + 1, e3;
}
var Pr2 = _e2;
var Sr2 = 128;
var Lt2 = 127;
function _e2(o4, s3) {
  var t3 = 0, s3 = s3 || 0, i6 = 0, r5 = s3, n3, a4 = o4.length;
  do {
    if (r5 >= a4) throw _e2.bytes = 0, new RangeError("Could not decode varint");
    n3 = o4[r5++], t3 += i6 < 28 ? (n3 & Lt2) << i6 : (n3 & Lt2) * Math.pow(2, i6), i6 += 7;
  } while (n3 >= Sr2);
  return _e2.bytes = r5 - s3, t3;
}
var Rr2 = Math.pow(2, 7);
var xr2 = Math.pow(2, 14);
var Or2 = Math.pow(2, 21);
var Ar2 = Math.pow(2, 28);
var Nr2 = Math.pow(2, 35);
var zr2 = Math.pow(2, 42);
var Lr = Math.pow(2, 49);
var $r2 = Math.pow(2, 56);
var kr2 = Math.pow(2, 63);
var Mr = function(o4) {
  return o4 < Rr2 ? 1 : o4 < xr2 ? 2 : o4 < Or2 ? 3 : o4 < Ar2 ? 4 : o4 < Nr2 ? 5 : o4 < zr2 ? 6 : o4 < Lr ? 7 : o4 < $r2 ? 8 : o4 < kr2 ? 9 : 10;
};
var Ur2 = { encode: wr2, decode: Pr2, encodingLength: Mr };
var $t2 = Ur2;
var kt2 = (o4, e3, t3 = 0) => ($t2.encode(o4, e3, t3), e3);
var Mt2 = (o4) => $t2.encodingLength(o4);
var Ee2 = (o4, e3) => {
  const t3 = e3.byteLength, s3 = Mt2(o4), i6 = s3 + Mt2(t3), r5 = new Uint8Array(i6 + t3);
  return kt2(o4, r5, 0), kt2(t3, r5, s3), r5.set(e3, i6), new Fr(o4, t3, e3, r5);
};
var Fr = class {
  constructor(e3, t3, s3, i6) {
    this.code = e3, this.size = t3, this.digest = s3, this.bytes = i6;
  }
};
var Ut = ({ name: o4, code: e3, encode: t3 }) => new Kr(o4, e3, t3);
var Kr = class {
  constructor(e3, t3, s3) {
    this.name = e3, this.code = t3, this.encode = s3;
  }
  digest(e3) {
    if (e3 instanceof Uint8Array) {
      const t3 = this.encode(e3);
      return t3 instanceof Uint8Array ? Ee2(this.code, t3) : t3.then((s3) => Ee2(this.code, s3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var Ft2 = (o4) => async (e3) => new Uint8Array(await crypto.subtle.digest(o4, e3));
var Br = Ut({ name: "sha2-256", code: 18, encode: Ft2("SHA-256") });
var Vr = Ut({ name: "sha2-512", code: 19, encode: Ft2("SHA-512") });
var jr2 = Object.freeze({ __proto__: null, sha256: Br, sha512: Vr });
var Kt2 = 0;
var qr = "identity";
var Bt2 = xt2;
var Gr2 = (o4) => Ee2(Kt2, Bt2(o4));
var Hr = { code: Kt2, name: qr, encode: Bt2, digest: Gr2 };
var Yr2 = Object.freeze({ __proto__: null, identity: Hr });
new TextEncoder(), new TextDecoder();
var Vt2 = { ...Fs, ...Bs, ...js, ...Gs, ...Js, ...nr2, ...hr2, ...ur2, ...Dr2, ...vr2 };
({ ...jr2, ...Yr2 });
function Jr2(o4 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(o4) : new Uint8Array(o4);
}
function jt(o4, e3, t3, s3) {
  return { name: o4, prefix: e3, encoder: { name: o4, prefix: e3, encode: t3 }, decoder: { decode: s3 } };
}
var qt2 = jt("utf8", "u", (o4) => "u" + new TextDecoder("utf8").decode(o4), (o4) => new TextEncoder().encode(o4.substring(1)));
var ve2 = jt("ascii", "a", (o4) => {
  let e3 = "a";
  for (let t3 = 0; t3 < o4.length; t3++) e3 += String.fromCharCode(o4[t3]);
  return e3;
}, (o4) => {
  o4 = o4.substring(1);
  const e3 = Jr2(o4.length);
  for (let t3 = 0; t3 < o4.length; t3++) e3[t3] = o4.charCodeAt(t3);
  return e3;
});
var Xr2 = { utf8: qt2, "utf-8": qt2, hex: Vt2.base16, latin1: ve2, ascii: ve2, binary: ve2, ...Vt2 };
function Wr(o4, e3 = "utf8") {
  const t3 = Xr2[e3];
  if (!t3) throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(o4, "utf8") : t3.decoder.decode(`${t3.prefix}${o4}`);
}
var Gt2 = class {
  constructor(e3, t3) {
    this.core = e3, this.logger = t3, this.keychain = /* @__PURE__ */ new Map(), this.name = Ze, this.version = Qe, this.initialized = false, this.storagePrefix = x4, this.init = async () => {
      if (!this.initialized) {
        const s3 = await this.getKeyChain();
        typeof s3 < "u" && (this.keychain = s3), this.initialized = true;
      }
    }, this.has = (s3) => (this.isInitialized(), this.keychain.has(s3)), this.set = async (s3, i6) => {
      this.isInitialized(), this.keychain.set(s3, i6), await this.persist();
    }, this.get = (s3) => {
      this.isInitialized();
      const i6 = this.keychain.get(s3);
      if (typeof i6 > "u") {
        const { message: r5 } = S2("NO_MATCHING_KEY", `${this.name}: ${s3}`);
        throw new Error(r5);
      }
      return i6;
    }, this.del = async (s3) => {
      this.isInitialized(), this.keychain.delete(s3), await this.persist();
    }, this.core = e3, this.logger = E(t3, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e3) {
    await this.core.storage.setItem(this.storageKey, Tt(e3));
  }
  async getKeyChain() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? Pt(e3) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Ht2 = class {
  constructor(e3, t3, s3) {
    this.core = e3, this.logger = t3, this.name = Xe2, this.randomSessionIdentifier = pr(), this.initialized = false, this.init = async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }, this.hasKeys = (i6) => (this.isInitialized(), this.keychain.has(i6)), this.getClientId = async () => {
      this.isInitialized();
      const i6 = await this.getClientSeed(), r5 = generateKeyPair(i6);
      return encodeIss(r5.publicKey);
    }, this.generateKeyPair = () => {
      this.isInitialized();
      const i6 = fr();
      return this.setPrivateKey(i6.publicKey, i6.privateKey);
    }, this.signJWT = async (i6) => {
      this.isInitialized();
      const r5 = await this.getClientSeed(), n3 = generateKeyPair(r5), a4 = this.randomSessionIdentifier, h5 = We2;
      return await signJWT(a4, i6, h5, n3);
    }, this.generateSharedKey = (i6, r5, n3) => {
      this.isInitialized();
      const a4 = this.getPrivateKey(i6), h5 = mr(a4, r5);
      return this.setSymKey(h5, n3);
    }, this.setSymKey = async (i6, r5) => {
      this.isInitialized();
      const n3 = r5 || hr(i6);
      return await this.keychain.set(n3, i6), n3;
    }, this.deleteKeyPair = async (i6) => {
      this.isInitialized(), await this.keychain.del(i6);
    }, this.deleteSymKey = async (i6) => {
      this.isInitialized(), await this.keychain.del(i6);
    }, this.encode = async (i6, r5, n3) => {
      this.isInitialized();
      const a4 = On(n3), h5 = safeJsonStringify3(r5);
      if (Nr(a4)) return vr(h5, n3 == null ? void 0 : n3.encoding);
      if (Or(a4)) {
        const D5 = a4.senderPublicKey, m3 = a4.receiverPublicKey;
        i6 = await this.generateSharedKey(D5, m3);
      }
      const c5 = this.getSymKey(i6), { type: l3, senderPublicKey: p4 } = a4;
      return gr({ type: l3, symKey: c5, message: h5, senderPublicKey: p4, encoding: n3 == null ? void 0 : n3.encoding });
    }, this.decode = async (i6, r5, n3) => {
      this.isInitialized();
      const a4 = wr(r5, n3);
      if (Nr(a4)) {
        const h5 = Er(r5, n3 == null ? void 0 : n3.encoding);
        return safeJsonParse3(h5);
      }
      if (Or(a4)) {
        const h5 = a4.receiverPublicKey, c5 = a4.senderPublicKey;
        i6 = await this.generateSharedKey(h5, c5);
      }
      try {
        const h5 = this.getSymKey(i6), c5 = br({ symKey: h5, encoded: r5, encoding: n3 == null ? void 0 : n3.encoding });
        return safeJsonParse3(c5);
      } catch (h5) {
        this.logger.error(`Failed to decode message from topic: '${i6}', clientId: '${await this.getClientId()}'`), this.logger.error(h5);
      }
    }, this.getPayloadType = (i6, r5 = ge) => {
      const n3 = Q2({ encoded: i6, encoding: r5 });
      return A5(n3.type);
    }, this.getPayloadSenderPublicKey = (i6, r5 = ge) => {
      const n3 = Q2({ encoded: i6, encoding: r5 });
      return n3.senderPublicKey ? toString(n3.senderPublicKey, g4) : void 0;
    }, this.core = e3, this.logger = E(t3, this.name), this.keychain = s3 || new Gt2(this.core, this.logger);
  }
  get context() {
    return y(this.logger);
  }
  async setPrivateKey(e3, t3) {
    return await this.keychain.set(e3, t3), e3;
  }
  getPrivateKey(e3) {
    return this.keychain.get(e3);
  }
  async getClientSeed() {
    let e3 = "";
    try {
      e3 = this.keychain.get(me2);
    } catch {
      e3 = pr(), await this.keychain.set(me2, e3);
    }
    return Wr(e3, "base16");
  }
  getSymKey(e3) {
    return this.keychain.get(e3);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Yt2 = class extends a3 {
  constructor(e3, t3) {
    super(e3, t3), this.logger = e3, this.core = t3, this.messages = /* @__PURE__ */ new Map(), this.name = et2, this.version = tt, this.initialized = false, this.storagePrefix = x4, this.init = async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const s3 = await this.getRelayerMessages();
          typeof s3 < "u" && (this.messages = s3), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (s3) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s3);
        } finally {
          this.initialized = true;
        }
      }
    }, this.set = async (s3, i6) => {
      this.isInitialized();
      const r5 = yr(i6);
      let n3 = this.messages.get(s3);
      return typeof n3 > "u" && (n3 = {}), typeof n3[r5] < "u" || (n3[r5] = i6, this.messages.set(s3, n3), await this.persist()), r5;
    }, this.get = (s3) => {
      this.isInitialized();
      let i6 = this.messages.get(s3);
      return typeof i6 > "u" && (i6 = {}), i6;
    }, this.has = (s3, i6) => {
      this.isInitialized();
      const r5 = this.get(s3), n3 = yr(i6);
      return typeof r5[n3] < "u";
    }, this.del = async (s3) => {
      this.isInitialized(), this.messages.delete(s3), await this.persist();
    }, this.logger = E(e3, this.name), this.core = t3;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setRelayerMessages(e3) {
    await this.core.storage.setItem(this.storageKey, Tt(e3));
  }
  async getRelayerMessages() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? Pt(e3) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Zr2 = class extends g3 {
  constructor(e3, t3) {
    super(e3, t3), this.relayer = e3, this.logger = t3, this.events = new import_events3.EventEmitter(), this.name = st2, this.queue = /* @__PURE__ */ new Map(), this.publishTimeout = (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE), this.failedPublishTimeout = (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND), this.needsTransportRestart = false, this.publish = async (s3, i6, r5) => {
      var n3;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s3, message: i6, opts: r5 } });
      const a4 = (r5 == null ? void 0 : r5.ttl) || it2, h5 = Ir(r5), c5 = (r5 == null ? void 0 : r5.prompt) || false, l3 = (r5 == null ? void 0 : r5.tag) || 0, p4 = (r5 == null ? void 0 : r5.id) || getBigIntRpcId().toString(), D5 = { topic: s3, message: i6, opts: { ttl: a4, relay: h5, prompt: c5, tag: l3, id: p4, attestation: r5 == null ? void 0 : r5.attestation } }, m3 = `Failed to publish payload, please try again. id:${p4} tag:${l3}`, u4 = Date.now();
      let g5, _5 = 1;
      try {
        for (; g5 === void 0; ) {
          if (Date.now() - u4 > this.publishTimeout) throw new Error(m3);
          this.logger.trace({ id: p4, attempts: _5 }, `publisher.publish - attempt ${_5}`), g5 = await await kt(this.rpcPublish(s3, i6, a4, h5, c5, l3, p4, r5 == null ? void 0 : r5.attestation).catch((y6) => this.logger.warn(y6)), this.publishTimeout, m3), _5++, g5 || await new Promise((y6) => setTimeout(y6, this.failedPublishTimeout));
        }
        this.relayer.events.emit(v4.publish, D5), this.logger.debug("Successfully Published Payload"), this.logger.trace({ type: "method", method: "publish", params: { id: p4, topic: s3, message: i6, opts: r5 } });
      } catch (y6) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(y6), (n3 = r5 == null ? void 0 : r5.internal) != null && n3.throwOnFailedPublish) throw y6;
        this.queue.set(p4, D5);
      }
    }, this.on = (s3, i6) => {
      this.events.on(s3, i6);
    }, this.once = (s3, i6) => {
      this.events.once(s3, i6);
    }, this.off = (s3, i6) => {
      this.events.off(s3, i6);
    }, this.removeListener = (s3, i6) => {
      this.events.removeListener(s3, i6);
    }, this.relayer = e3, this.logger = E(t3, this.name), this.registerEventListeners();
  }
  get context() {
    return y(this.logger);
  }
  rpcPublish(e3, t3, s3, i6, r5, n3, a4, h5) {
    var c5, l3, p4, D5;
    const m3 = { method: jr(i6.protocol).publish, params: { topic: e3, message: t3, ttl: s3, prompt: r5, tag: n3, attestation: h5 }, id: a4 };
    return I3((c5 = m3.params) == null ? void 0 : c5.prompt) && ((l3 = m3.params) == null || delete l3.prompt), I3((p4 = m3.params) == null ? void 0 : p4.tag) && ((D5 = m3.params) == null || delete D5.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: m3 }), this.relayer.request(m3);
  }
  removeRequestFromQueue(e3) {
    this.queue.delete(e3);
  }
  checkQueue() {
    this.queue.forEach(async (e3) => {
      const { topic: t3, message: s3, opts: i6 } = e3;
      await this.publish(t3, s3, i6);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(v4.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(v4.message_ack, (e3) => {
      this.removeRequestFromQueue(e3.id.toString());
    });
  }
};
var Qr2 = class {
  constructor() {
    this.map = /* @__PURE__ */ new Map(), this.set = (e3, t3) => {
      const s3 = this.get(e3);
      this.exists(e3, t3) || this.map.set(e3, [...s3, t3]);
    }, this.get = (e3) => this.map.get(e3) || [], this.exists = (e3, t3) => this.get(e3).includes(t3), this.delete = (e3, t3) => {
      if (typeof t3 > "u") {
        this.map.delete(e3);
        return;
      }
      if (!this.map.has(e3)) return;
      const s3 = this.get(e3);
      if (!this.exists(e3, t3)) return;
      const i6 = s3.filter((r5) => r5 !== t3);
      if (!i6.length) {
        this.map.delete(e3);
        return;
      }
      this.map.set(e3, i6);
    }, this.clear = () => {
      this.map.clear();
    };
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var en2 = Object.defineProperty;
var tn2 = Object.defineProperties;
var sn2 = Object.getOwnPropertyDescriptors;
var Jt2 = Object.getOwnPropertySymbols;
var rn2 = Object.prototype.hasOwnProperty;
var nn2 = Object.prototype.propertyIsEnumerable;
var Xt2 = (o4, e3, t3) => e3 in o4 ? en2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
var W3 = (o4, e3) => {
  for (var t3 in e3 || (e3 = {})) rn2.call(e3, t3) && Xt2(o4, t3, e3[t3]);
  if (Jt2) for (var t3 of Jt2(e3)) nn2.call(e3, t3) && Xt2(o4, t3, e3[t3]);
  return o4;
};
var we2 = (o4, e3) => tn2(o4, sn2(e3));
var Wt2 = class extends d3 {
  constructor(e3, t3) {
    super(e3, t3), this.relayer = e3, this.logger = t3, this.subscriptions = /* @__PURE__ */ new Map(), this.topicMap = new Qr2(), this.events = new import_events3.EventEmitter(), this.name = ut2, this.version = dt, this.pending = /* @__PURE__ */ new Map(), this.cached = [], this.initialized = false, this.pendingSubscriptionWatchLabel = "pending_sub_watch_label", this.pollingInterval = 20, this.storagePrefix = x4, this.subscribeTimeout = (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE), this.restartInProgress = false, this.batchSubscribeTopicsLimit = 500, this.pendingBatchMessages = [], this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId(), await this.restore()), this.initialized = true;
    }, this.subscribe = async (s3, i6) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s3, opts: i6 } });
      try {
        const r5 = Ir(i6), n3 = { topic: s3, relay: r5, transportType: i6 == null ? void 0 : i6.transportType };
        this.pending.set(s3, n3);
        const a4 = await this.rpcSubscribe(s3, r5, i6);
        return typeof a4 == "string" && (this.onSubscribe(a4, n3), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s3, opts: i6 } })), a4;
      } catch (r5) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(r5), r5;
      }
    }, this.unsubscribe = async (s3, i6) => {
      await this.restartToComplete(), this.isInitialized(), typeof (i6 == null ? void 0 : i6.id) < "u" ? await this.unsubscribeById(s3, i6.id, i6) : await this.unsubscribeByTopic(s3, i6);
    }, this.isSubscribed = async (s3) => {
      if (this.topics.includes(s3)) return true;
      const i6 = `${this.pendingSubscriptionWatchLabel}_${s3}`;
      return await new Promise((r5, n3) => {
        const a4 = new import_time2.Watch();
        a4.start(i6);
        const h5 = setInterval(() => {
          !this.pending.has(s3) && this.topics.includes(s3) && (clearInterval(h5), a4.stop(i6), r5(true)), a4.elapsed(i6) >= pt && (clearInterval(h5), a4.stop(i6), n3(new Error("Subscription resolution timeout")));
        }, this.pollingInterval);
      }).catch(() => false);
    }, this.on = (s3, i6) => {
      this.events.on(s3, i6);
    }, this.once = (s3, i6) => {
      this.events.once(s3, i6);
    }, this.off = (s3, i6) => {
      this.events.off(s3, i6);
    }, this.removeListener = (s3, i6) => {
      this.events.removeListener(s3, i6);
    }, this.start = async () => {
      await this.onConnect();
    }, this.stop = async () => {
      await this.onDisconnect();
    }, this.restart = async () => {
      this.restartInProgress = true, await this.restore(), await this.reset(), this.restartInProgress = false;
    }, this.relayer = e3, this.logger = E(t3, this.name), this.clientId = "";
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  hasSubscription(e3, t3) {
    let s3 = false;
    try {
      s3 = this.getSubscription(e3).topic === t3;
    } catch {
    }
    return s3;
  }
  onEnable() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e3, t3) {
    const s3 = this.topicMap.get(e3);
    await Promise.all(s3.map(async (i6) => await this.unsubscribeById(e3, i6, t3)));
  }
  async unsubscribeById(e3, t3, s3) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t3, opts: s3 } });
    try {
      const i6 = Ir(s3);
      await this.rpcUnsubscribe(e3, t3, i6);
      const r5 = U2("USER_DISCONNECTED", `${this.name}, ${e3}`);
      await this.onUnsubscribe(e3, t3, r5), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t3, opts: s3 } });
    } catch (i6) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(i6), i6;
    }
  }
  async rpcSubscribe(e3, t3, s3) {
    var i6;
    (s3 == null ? void 0 : s3.transportType) === M4.relay && await this.restartToComplete();
    const r5 = { method: jr(t3.protocol).subscribe, params: { topic: e3 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: r5 });
    const n3 = (i6 = s3 == null ? void 0 : s3.internal) == null ? void 0 : i6.throwOnFailedPublish;
    try {
      const a4 = yr(e3 + this.clientId);
      if ((s3 == null ? void 0 : s3.transportType) === M4.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(r5).catch((c5) => this.logger.warn(c5));
      }, (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), a4;
      const h5 = await kt(this.relayer.request(r5).catch((c5) => this.logger.warn(c5)), this.subscribeTimeout, `Subscribing to ${e3} failed, please try again`);
      if (!h5 && n3) throw new Error(`Subscribing to ${e3} failed, please try again`);
      return h5 ? a4 : null;
    } catch (a4) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(v4.connection_stalled), n3) throw a4;
    }
    return null;
  }
  async rpcBatchSubscribe(e3) {
    if (!e3.length) return;
    const t3 = e3[0].relay, s3 = { method: jr(t3.protocol).batchSubscribe, params: { topics: e3.map((i6) => i6.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s3 });
    try {
      return await await kt(this.relayer.request(s3).catch((i6) => this.logger.warn(i6)), this.subscribeTimeout);
    } catch {
      this.relayer.events.emit(v4.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e3) {
    if (!e3.length) return;
    const t3 = e3[0].relay, s3 = { method: jr(t3.protocol).batchFetchMessages, params: { topics: e3.map((r5) => r5.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s3 });
    let i6;
    try {
      i6 = await await kt(this.relayer.request(s3).catch((r5) => this.logger.warn(r5)), this.subscribeTimeout);
    } catch {
      this.relayer.events.emit(v4.connection_stalled);
    }
    return i6;
  }
  rpcUnsubscribe(e3, t3, s3) {
    const i6 = { method: jr(s3.protocol).unsubscribe, params: { topic: e3, id: t3 } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i6 }), this.relayer.request(i6);
  }
  onSubscribe(e3, t3) {
    this.setSubscription(e3, we2(W3({}, t3), { id: e3 })), this.pending.delete(t3.topic);
  }
  onBatchSubscribe(e3) {
    e3.length && e3.forEach((t3) => {
      this.setSubscription(t3.id, W3({}, t3)), this.pending.delete(t3.topic);
    });
  }
  async onUnsubscribe(e3, t3, s3) {
    this.events.removeAllListeners(t3), this.hasSubscription(t3, e3) && this.deleteSubscription(t3, s3), await this.relayer.messages.del(e3);
  }
  async setRelayerSubscriptions(e3) {
    await this.relayer.core.storage.setItem(this.storageKey, e3);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e3, t3) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e3, subscription: t3 }), this.addSubscription(e3, t3);
  }
  addSubscription(e3, t3) {
    this.subscriptions.set(e3, W3({}, t3)), this.topicMap.set(t3.topic, e3), this.events.emit(O3.created, t3);
  }
  getSubscription(e3) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e3 });
    const t3 = this.subscriptions.get(e3);
    if (!t3) {
      const { message: s3 } = S2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(s3);
    }
    return t3;
  }
  deleteSubscription(e3, t3) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e3, reason: t3 });
    const s3 = this.getSubscription(e3);
    this.subscriptions.delete(e3), this.topicMap.delete(s3.topic, e3), this.events.emit(O3.deleted, we2(W3({}, s3), { reason: t3 }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit(O3.sync);
  }
  async reset() {
    if (this.cached.length) {
      const e3 = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let t3 = 0; t3 < e3; t3++) {
        const s3 = this.cached.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchFetchMessages(s3), await this.batchSubscribe(s3);
      }
    }
    this.events.emit(O3.resubscribed);
  }
  async restore() {
    try {
      const e3 = await this.getRelayerSubscriptions();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.subscriptions.size) {
        const { message: t3 } = S2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t3), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t3);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e3);
    }
  }
  async batchSubscribe(e3) {
    if (!e3.length) return;
    const t3 = await this.rpcBatchSubscribe(e3);
    L3(t3) && this.onBatchSubscribe(t3.map((s3, i6) => we2(W3({}, e3[i6]), { id: s3 })));
  }
  async batchFetchMessages(e3) {
    if (!e3.length) return;
    this.logger.trace(`Fetching batch messages for ${e3.length} subscriptions`);
    const t3 = await this.rpcBatchFetchMessages(e3);
    t3 && t3.messages && (this.pendingBatchMessages = this.pendingBatchMessages.concat(t3.messages));
  }
  async onConnect() {
    await this.restart(), this.onEnable();
  }
  onDisconnect() {
    this.onDisable();
  }
  async checkPending() {
    if (!this.initialized || !this.relayer.connected) return;
    const e3 = [];
    this.pending.forEach((t3) => {
      e3.push(t3);
    }), await this.batchSubscribe(e3), this.pendingBatchMessages.length && (await this.relayer.handleBatchMessageEvents(this.pendingBatchMessages), this.pendingBatchMessages = []);
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, async () => {
      await this.checkPending();
    }), this.events.on(O3.created, async (e3) => {
      const t3 = O3.created;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e3 }), await this.persist();
    }), this.events.on(O3.deleted, async (e3) => {
      const t3 = O3.deleted;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e3 }), await this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async restartToComplete() {
    !this.relayer.connected && !this.relayer.connecting && await this.relayer.transportOpen(), this.restartInProgress && await new Promise((e3) => {
      const t3 = setInterval(() => {
        this.restartInProgress || (clearInterval(t3), e3());
      }, this.pollingInterval);
    });
  }
};
var on2 = Object.defineProperty;
var Zt2 = Object.getOwnPropertySymbols;
var an2 = Object.prototype.hasOwnProperty;
var hn2 = Object.prototype.propertyIsEnumerable;
var Qt2 = (o4, e3, t3) => e3 in o4 ? on2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
var ei = (o4, e3) => {
  for (var t3 in e3 || (e3 = {})) an2.call(e3, t3) && Qt2(o4, t3, e3[t3]);
  if (Zt2) for (var t3 of Zt2(e3)) hn2.call(e3, t3) && Qt2(o4, t3, e3[t3]);
  return o4;
};
var ti = class extends u3 {
  constructor(e3) {
    super(e3), this.protocol = "wc", this.version = 2, this.events = new import_events3.EventEmitter(), this.name = ot, this.transportExplicitlyClosed = false, this.initialized = false, this.connectionAttemptInProgress = false, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = ["socket hang up", "stalled", "interrupted"], this.hasExperiencedNetworkDisruption = false, this.requestsInFlight = /* @__PURE__ */ new Map(), this.heartBeatTimeout = (0, import_time2.toMiliseconds)(import_time2.THIRTY_SECONDS + import_time2.ONE_SECOND), this.request = async (t3) => {
      var s3, i6;
      this.logger.debug("Publishing Request Payload");
      const r5 = t3.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        const n3 = this.provider.request(t3);
        this.requestsInFlight.set(r5, { promise: n3, request: t3 }), this.logger.trace({ id: r5, method: t3.method, topic: (s3 = t3.params) == null ? void 0 : s3.topic }, "relayer.request - attempt to publish...");
        const a4 = await new Promise(async (h5, c5) => {
          const l3 = () => {
            c5(new Error(`relayer.request - publish interrupted, id: ${r5}`));
          };
          this.provider.on(I4.disconnect, l3);
          const p4 = await n3;
          this.provider.off(I4.disconnect, l3), h5(p4);
        });
        return this.logger.trace({ id: r5, method: t3.method, topic: (i6 = t3.params) == null ? void 0 : i6.topic }, "relayer.request - published"), a4;
      } catch (n3) {
        throw this.logger.debug(`Failed to Publish Request: ${r5}`), n3;
      } finally {
        this.requestsInFlight.delete(r5);
      }
    }, this.resetPingTimeout = () => {
      if (ce()) try {
        clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
          var t3, s3, i6;
          (i6 = (s3 = (t3 = this.provider) == null ? void 0 : t3.connection) == null ? void 0 : s3.socket) == null || i6.terminate();
        }, this.heartBeatTimeout);
      } catch (t3) {
        this.logger.warn(t3);
      }
    }, this.onPayloadHandler = (t3) => {
      this.onProviderPayload(t3), this.resetPingTimeout();
    }, this.onConnectHandler = () => {
      this.logger.trace("relayer connected"), this.startPingTimeout(), this.events.emit(v4.connect);
    }, this.onDisconnectHandler = () => {
      this.logger.trace("relayer disconnected"), this.onProviderDisconnect();
    }, this.onProviderErrorHandler = (t3) => {
      this.logger.error(t3), this.events.emit(v4.error, t3), this.logger.info("Fatal socket error received, closing transport"), this.transportClose();
    }, this.registerProviderListeners = () => {
      this.provider.on(I4.payload, this.onPayloadHandler), this.provider.on(I4.connect, this.onConnectHandler), this.provider.on(I4.disconnect, this.onDisconnectHandler), this.provider.on(I4.error, this.onProviderErrorHandler);
    }, this.core = e3.core, this.logger = typeof e3.logger < "u" && typeof e3.logger != "string" ? E(e3.logger, this.name) : (0, import_pino.default)(k({ level: e3.logger || nt })), this.messages = new Yt2(this.logger, e3.core), this.subscriber = new Wt2(this, this.logger), this.publisher = new Zr2(this, this.logger), this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || be2, this.projectId = e3.projectId, this.bundleId = Ot(), this.provider = {};
  }
  async init() {
    if (this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.subscriber.cached.length > 0) try {
      await this.transportOpen();
    } catch (e3) {
      this.logger.warn(e3);
    }
  }
  get context() {
    return y(this.logger);
  }
  get connected() {
    var e3, t3, s3;
    return ((s3 = (t3 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t3.socket) == null ? void 0 : s3.readyState) === 1;
  }
  get connecting() {
    var e3, t3, s3;
    return ((s3 = (t3 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t3.socket) == null ? void 0 : s3.readyState) === 0;
  }
  async publish(e3, t3, s3) {
    this.isInitialized(), await this.publisher.publish(e3, t3, s3), await this.recordMessageEvent({ topic: e3, message: t3, publishedAt: Date.now(), transportType: M4.relay });
  }
  async subscribe(e3, t3) {
    var s3, i6, r5;
    this.isInitialized(), (t3 == null ? void 0 : t3.transportType) === "relay" && await this.toEstablishConnection();
    const n3 = typeof ((s3 = t3 == null ? void 0 : t3.internal) == null ? void 0 : s3.throwOnFailedPublish) > "u" ? true : (i6 = t3 == null ? void 0 : t3.internal) == null ? void 0 : i6.throwOnFailedPublish;
    let a4 = ((r5 = this.subscriber.topicMap.get(e3)) == null ? void 0 : r5[0]) || "", h5;
    const c5 = (l3) => {
      l3.topic === e3 && (this.subscriber.off(O3.created, c5), h5());
    };
    return await Promise.all([new Promise((l3) => {
      h5 = l3, this.subscriber.on(O3.created, c5);
    }), new Promise(async (l3, p4) => {
      a4 = await this.subscriber.subscribe(e3, ei({ internal: { throwOnFailedPublish: n3 } }, t3)).catch((D5) => {
        n3 && p4(D5);
      }) || a4, l3();
    })]), a4;
  }
  async unsubscribe(e3, t3) {
    this.isInitialized(), await this.subscriber.unsubscribe(e3, t3);
  }
  on(e3, t3) {
    this.events.on(e3, t3);
  }
  once(e3, t3) {
    this.events.once(e3, t3);
  }
  off(e3, t3) {
    this.events.off(e3, t3);
  }
  removeListener(e3, t3) {
    this.events.removeListener(e3, t3);
  }
  async transportDisconnect() {
    if (!this.hasExperiencedNetworkDisruption && this.connected && this.requestsInFlight.size > 0) try {
      await Promise.all(Array.from(this.requestsInFlight.values()).map((e3) => e3.promise));
    } catch (e3) {
      this.logger.warn(e3);
    }
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await kt(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e3) {
    await this.confirmOnlineStateOrThrow(), e3 && e3 !== this.relayUrl && (this.relayUrl = e3, await this.transportDisconnect()), await this.createProvider(), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    try {
      await new Promise(async (t3, s3) => {
        const i6 = () => {
          this.provider.off(I4.disconnect, i6), s3(new Error("Connection interrupted while trying to subscribe"));
        };
        this.provider.on(I4.disconnect, i6), await kt(this.provider.connect(), (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE), `Socket stalled when trying to connect to ${this.relayUrl}`).catch((r5) => {
          s3(r5);
        }).finally(() => {
          clearTimeout(this.reconnectTimeout), this.reconnectTimeout = void 0;
        }), this.subscriber.start().catch((r5) => {
          this.logger.error(r5), this.onDisconnectHandler();
        }), this.hasExperiencedNetworkDisruption = false, t3();
      });
    } catch (t3) {
      this.logger.error(t3);
      const s3 = t3;
      if (this.hasExperiencedNetworkDisruption = true, !this.isConnectionStalled(s3.message)) throw t3;
    } finally {
      this.connectionAttemptInProgress = false;
    }
  }
  async restartTransport(e3) {
    this.connectionAttemptInProgress || (this.relayUrl = e3 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await mo()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e3) {
    if ((e3 == null ? void 0 : e3.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t3 = e3.sort((s3, i6) => s3.publishedAt - i6.publishedAt);
    this.logger.trace(`Batch of ${t3.length} message events sorted`);
    for (const s3 of t3) try {
      await this.onMessageEvent(s3);
    } catch (i6) {
      this.logger.warn(i6);
    }
    this.logger.trace(`Batch of ${t3.length} message events processed`);
  }
  async onLinkMessageEvent(e3, t3) {
    const { topic: s3 } = e3;
    if (!t3.sessionExists) {
      const i6 = Mt(import_time2.FIVE_MINUTES), r5 = { topic: s3, expiry: i6, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(s3, r5);
    }
    this.events.emit(v4.message, e3), await this.recordMessageEvent(e3);
  }
  startPingTimeout() {
    var e3, t3, s3, i6, r5;
    if (ce()) try {
      (t3 = (e3 = this.provider) == null ? void 0 : e3.connection) != null && t3.socket && ((r5 = (i6 = (s3 = this.provider) == null ? void 0 : s3.connection) == null ? void 0 : i6.socket) == null || r5.once("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (n3) {
      this.logger.warn(n3);
    }
  }
  isConnectionStalled(e3) {
    return this.staleConnectionErrors.some((t3) => e3.includes(t3));
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e3 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o(new f($t({ sdkVersion: se, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e3, useOnCloseEvent: true, bundleId: this.bundleId }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e3) {
    const { topic: t3, message: s3 } = e3;
    await this.messages.set(t3, s3);
  }
  async shouldIgnoreMessageEvent(e3) {
    const { topic: t3, message: s3 } = e3;
    if (!s3 || s3.length === 0) return this.logger.debug(`Ignoring invalid/empty message: ${s3}`), true;
    if (!await this.subscriber.isSubscribed(t3)) return this.logger.debug(`Ignoring message for non-subscribed topic ${t3}`), true;
    const i6 = this.messages.has(t3, s3);
    return i6 && this.logger.debug(`Ignoring duplicate message: ${s3}`), i6;
  }
  async onProviderPayload(e3) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e3 }), isJsonRpcRequest(e3)) {
      if (!e3.method.endsWith(at2)) return;
      const t3 = e3.params, { topic: s3, message: i6, publishedAt: r5, attestation: n3 } = t3.data, a4 = { topic: s3, message: i6, publishedAt: r5, transportType: M4.relay, attestation: n3 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(ei({ type: "event", event: t3.id }, a4)), this.events.emit(t3.id, a4), await this.acknowledgePayload(e3), await this.onMessageEvent(a4);
    } else isJsonRpcResponse(e3) && this.events.emit(v4.message_ack, e3);
  }
  async onMessageEvent(e3) {
    await this.shouldIgnoreMessageEvent(e3) || (this.events.emit(v4.message, e3), await this.recordMessageEvent(e3));
  }
  async acknowledgePayload(e3) {
    const t3 = formatJsonRpcResult(e3.id, true);
    await this.provider.connection.send(t3);
  }
  unregisterProviderListeners() {
    this.provider.off(I4.payload, this.onPayloadHandler), this.provider.off(I4.connect, this.onConnectHandler), this.provider.off(I4.disconnect, this.onDisconnectHandler), this.provider.off(I4.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e3 = await mo();
    ho(async (t3) => {
      e3 !== t3 && (e3 = t3, t3 ? await this.restartTransport().catch((s3) => this.logger.error(s3)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    });
  }
  async onProviderDisconnect() {
    await this.subscriber.stop(), this.requestsInFlight.clear(), clearTimeout(this.pingTimeout), this.events.emit(v4.disconnect), this.connectionAttemptInProgress = false, !this.transportExplicitlyClosed && (this.reconnectTimeout || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e3) => this.logger.error(e3));
    }, (0, import_time2.toMiliseconds)(ht))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async toEstablishConnection() {
    await this.confirmOnlineStateOrThrow(), !this.connected && (this.connectionAttemptInProgress && await new Promise((e3) => {
      const t3 = setInterval(() => {
        this.connected && (clearInterval(t3), e3());
      }, this.connectionStatusPollingInterval);
    }), await this.transportOpen());
  }
};
var cn2 = Object.defineProperty;
var ii = Object.getOwnPropertySymbols;
var ln2 = Object.prototype.hasOwnProperty;
var un2 = Object.prototype.propertyIsEnumerable;
var si = (o4, e3, t3) => e3 in o4 ? cn2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
var ri = (o4, e3) => {
  for (var t3 in e3 || (e3 = {})) ln2.call(e3, t3) && si(o4, t3, e3[t3]);
  if (ii) for (var t3 of ii(e3)) un2.call(e3, t3) && si(o4, t3, e3[t3]);
  return o4;
};
var ni = class extends p3 {
  constructor(e3, t3, s3, i6 = x4, r5 = void 0) {
    super(e3, t3, s3, i6), this.core = e3, this.logger = t3, this.name = s3, this.map = /* @__PURE__ */ new Map(), this.version = ct, this.cached = [], this.initialized = false, this.storagePrefix = x4, this.recentlyDeleted = [], this.recentlyDeletedLimit = 200, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((n3) => {
        this.getKey && n3 !== null && !I3(n3) ? this.map.set(this.getKey(n3), n3) : Yr(n3) ? this.map.set(n3.id, n3) : Qr(n3) && this.map.set(n3.topic, n3);
      }), this.cached = [], this.initialized = true);
    }, this.set = async (n3, a4) => {
      this.isInitialized(), this.map.has(n3) ? await this.update(n3, a4) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: n3, value: a4 }), this.map.set(n3, a4), await this.persist());
    }, this.get = (n3) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: n3 }), this.getData(n3)), this.getAll = (n3) => (this.isInitialized(), n3 ? this.values.filter((a4) => Object.keys(n3).every((h5) => (0, import_lodash.default)(a4[h5], n3[h5]))) : this.values), this.update = async (n3, a4) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: n3, update: a4 });
      const h5 = ri(ri({}, this.getData(n3)), a4);
      this.map.set(n3, h5), await this.persist();
    }, this.delete = async (n3, a4) => {
      this.isInitialized(), this.map.has(n3) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: n3, reason: a4 }), this.map.delete(n3), this.addToRecentlyDeleted(n3), await this.persist());
    }, this.logger = E(t3, this.name), this.storagePrefix = i6, this.getKey = r5;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e3) {
    this.recentlyDeleted.push(e3), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e3) {
    const t3 = this.map.get(e3);
    if (!t3) {
      if (this.recentlyDeleted.includes(e3)) {
        const { message: i6 } = S2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e3}`);
        throw this.logger.error(i6), new Error(i6);
      }
      const { message: s3 } = S2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.error(s3), new Error(s3);
    }
    return t3;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e3 = await this.getDataStore();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.map.size) {
        const { message: t3 } = S2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t3), new Error(t3);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var oi = class {
  constructor(e3, t3) {
    this.core = e3, this.logger = t3, this.name = gt2, this.version = yt, this.events = new import_events3.default(), this.initialized = false, this.storagePrefix = x4, this.ignoredPayloadTypes = [D3], this.registeredMethods = [], this.init = async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }, this.register = ({ methods: s3 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s3])];
    }, this.create = async (s3) => {
      this.isInitialized();
      const i6 = pr(), r5 = await this.core.crypto.setSymKey(i6), n3 = Mt(import_time2.FIVE_MINUTES), a4 = { protocol: rt }, h5 = { topic: r5, expiry: n3, relay: a4, active: false, methods: s3 == null ? void 0 : s3.methods }, c5 = Dr({ protocol: this.core.protocol, version: this.core.version, topic: r5, symKey: i6, relay: a4, expiryTimestamp: n3, methods: s3 == null ? void 0 : s3.methods });
      return this.events.emit(V3.create, h5), this.core.expirer.set(r5, n3), await this.pairings.set(r5, h5), await this.core.relayer.subscribe(r5, { transportType: s3 == null ? void 0 : s3.transportType }), { topic: r5, uri: c5 };
    }, this.pair = async (s3) => {
      this.isInitialized();
      const i6 = this.core.eventClient.createEvent({ properties: { topic: s3 == null ? void 0 : s3.uri, trace: [z4.pairing_started] } });
      this.isValidPair(s3, i6);
      const { topic: r5, symKey: n3, relay: a4, expiryTimestamp: h5, methods: c5 } = kr(s3.uri);
      i6.props.properties.topic = r5, i6.addTrace(z4.pairing_uri_validation_success), i6.addTrace(z4.pairing_uri_not_expired);
      let l3;
      if (this.pairings.keys.includes(r5)) {
        if (l3 = this.pairings.get(r5), i6.addTrace(z4.existing_pairing), l3.active) throw i6.setError($4.active_pairing_already_exists), new Error(`Pairing already exists: ${r5}. Please try again with a new connection URI.`);
        i6.addTrace(z4.pairing_not_expired);
      }
      const p4 = h5 || Mt(import_time2.FIVE_MINUTES), D5 = { topic: r5, relay: a4, expiry: p4, active: false, methods: c5 };
      this.core.expirer.set(r5, p4), await this.pairings.set(r5, D5), i6.addTrace(z4.store_new_pairing), s3.activatePairing && await this.activate({ topic: r5 }), this.events.emit(V3.create, D5), i6.addTrace(z4.emit_inactive_pairing), this.core.crypto.keychain.has(r5) || await this.core.crypto.setSymKey(n3, r5), i6.addTrace(z4.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        i6.setError($4.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(r5, { relay: a4 });
      } catch (m3) {
        throw i6.setError($4.subscribe_pairing_topic_failure), m3;
      }
      return i6.addTrace(z4.subscribe_pairing_topic_success), D5;
    }, this.activate = async ({ topic: s3 }) => {
      this.isInitialized();
      const i6 = Mt(import_time2.THIRTY_DAYS);
      this.core.expirer.set(s3, i6), await this.pairings.update(s3, { active: true, expiry: i6 });
    }, this.ping = async (s3) => {
      this.isInitialized(), await this.isValidPing(s3);
      const { topic: i6 } = s3;
      if (this.pairings.keys.includes(i6)) {
        const r5 = await this.sendRequest(i6, "wc_pairingPing", {}), { done: n3, resolve: a4, reject: h5 } = _t();
        this.events.once(Lt("pairing_ping", r5), ({ error: c5 }) => {
          c5 ? h5(c5) : a4();
        }), await n3();
      }
    }, this.updateExpiry = async ({ topic: s3, expiry: i6 }) => {
      this.isInitialized(), await this.pairings.update(s3, { expiry: i6 });
    }, this.updateMetadata = async ({ topic: s3, metadata: i6 }) => {
      this.isInitialized(), await this.pairings.update(s3, { peerMetadata: i6 });
    }, this.getPairings = () => (this.isInitialized(), this.pairings.values), this.disconnect = async (s3) => {
      this.isInitialized(), await this.isValidDisconnect(s3);
      const { topic: i6 } = s3;
      this.pairings.keys.includes(i6) && (await this.sendRequest(i6, "wc_pairingDelete", U2("USER_DISCONNECTED")), await this.deletePairing(i6));
    }, this.formatUriFromPairing = (s3) => {
      this.isInitialized();
      const { topic: i6, relay: r5, expiry: n3, methods: a4 } = s3, h5 = this.core.crypto.keychain.get(i6);
      return Dr({ protocol: this.core.protocol, version: this.core.version, topic: i6, symKey: h5, relay: r5, expiryTimestamp: n3, methods: a4 });
    }, this.sendRequest = async (s3, i6, r5) => {
      const n3 = formatJsonRpcRequest(i6, r5), a4 = await this.core.crypto.encode(s3, n3), h5 = B3[i6].req;
      return this.core.history.set(s3, n3), this.core.relayer.publish(s3, a4, h5), n3.id;
    }, this.sendResult = async (s3, i6, r5) => {
      const n3 = formatJsonRpcResult(s3, r5), a4 = await this.core.crypto.encode(i6, n3), h5 = await this.core.history.get(i6, s3), c5 = B3[h5.request.method].res;
      await this.core.relayer.publish(i6, a4, c5), await this.core.history.resolve(n3);
    }, this.sendError = async (s3, i6, r5) => {
      const n3 = formatJsonRpcError(s3, r5), a4 = await this.core.crypto.encode(i6, n3), h5 = await this.core.history.get(i6, s3), c5 = B3[h5.request.method] ? B3[h5.request.method].res : B3.unregistered_method.res;
      await this.core.relayer.publish(i6, a4, c5), await this.core.history.resolve(n3);
    }, this.deletePairing = async (s3, i6) => {
      await this.core.relayer.unsubscribe(s3), await Promise.all([this.pairings.delete(s3, U2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(s3), i6 ? Promise.resolve() : this.core.expirer.del(s3)]);
    }, this.cleanup = async () => {
      const s3 = this.pairings.getAll().filter((i6) => Kt(i6.expiry));
      await Promise.all(s3.map((i6) => this.deletePairing(i6.topic)));
    }, this.onRelayEventRequest = (s3) => {
      const { topic: i6, payload: r5 } = s3;
      switch (r5.method) {
        case "wc_pairingPing":
          return this.onPairingPingRequest(i6, r5);
        case "wc_pairingDelete":
          return this.onPairingDeleteRequest(i6, r5);
        default:
          return this.onUnknownRpcMethodRequest(i6, r5);
      }
    }, this.onRelayEventResponse = async (s3) => {
      const { topic: i6, payload: r5 } = s3, n3 = (await this.core.history.get(i6, r5.id)).request.method;
      switch (n3) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(i6, r5);
        default:
          return this.onUnknownRpcMethodResponse(n3);
      }
    }, this.onPairingPingRequest = async (s3, i6) => {
      const { id: r5 } = i6;
      try {
        this.isValidPing({ topic: s3 }), await this.sendResult(r5, s3, true), this.events.emit(V3.ping, { id: r5, topic: s3 });
      } catch (n3) {
        await this.sendError(r5, s3, n3), this.logger.error(n3);
      }
    }, this.onPairingPingResponse = (s3, i6) => {
      const { id: r5 } = i6;
      setTimeout(() => {
        isJsonRpcResult(i6) ? this.events.emit(Lt("pairing_ping", r5), {}) : isJsonRpcError(i6) && this.events.emit(Lt("pairing_ping", r5), { error: i6.error });
      }, 500);
    }, this.onPairingDeleteRequest = async (s3, i6) => {
      const { id: r5 } = i6;
      try {
        this.isValidDisconnect({ topic: s3 }), await this.deletePairing(s3), this.events.emit(V3.delete, { id: r5, topic: s3 });
      } catch (n3) {
        await this.sendError(r5, s3, n3), this.logger.error(n3);
      }
    }, this.onUnknownRpcMethodRequest = async (s3, i6) => {
      const { id: r5, method: n3 } = i6;
      try {
        if (this.registeredMethods.includes(n3)) return;
        const a4 = U2("WC_METHOD_UNSUPPORTED", n3);
        await this.sendError(r5, s3, a4), this.logger.error(a4);
      } catch (a4) {
        await this.sendError(r5, s3, a4), this.logger.error(a4);
      }
    }, this.onUnknownRpcMethodResponse = (s3) => {
      this.registeredMethods.includes(s3) || this.logger.error(U2("WC_METHOD_UNSUPPORTED", s3));
    }, this.isValidPair = (s3, i6) => {
      var r5;
      if (!to(s3)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `pair() params: ${s3}`);
        throw i6.setError($4.malformed_pairing_uri), new Error(a4);
      }
      if (!Gr(s3.uri)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `pair() uri: ${s3.uri}`);
        throw i6.setError($4.malformed_pairing_uri), new Error(a4);
      }
      const n3 = kr(s3 == null ? void 0 : s3.uri);
      if (!((r5 = n3 == null ? void 0 : n3.relay) != null && r5.protocol)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw i6.setError($4.malformed_pairing_uri), new Error(a4);
      }
      if (!(n3 != null && n3.symKey)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw i6.setError($4.malformed_pairing_uri), new Error(a4);
      }
      if (n3 != null && n3.expiryTimestamp && (0, import_time2.toMiliseconds)(n3 == null ? void 0 : n3.expiryTimestamp) < Date.now()) {
        i6.setError($4.pairing_expired);
        const { message: a4 } = S2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a4);
      }
    }, this.isValidPing = async (s3) => {
      if (!to(s3)) {
        const { message: r5 } = S2("MISSING_OR_INVALID", `ping() params: ${s3}`);
        throw new Error(r5);
      }
      const { topic: i6 } = s3;
      await this.isValidPairingTopic(i6);
    }, this.isValidDisconnect = async (s3) => {
      if (!to(s3)) {
        const { message: r5 } = S2("MISSING_OR_INVALID", `disconnect() params: ${s3}`);
        throw new Error(r5);
      }
      const { topic: i6 } = s3;
      await this.isValidPairingTopic(i6);
    }, this.isValidPairingTopic = async (s3) => {
      if (!b2(s3, false)) {
        const { message: i6 } = S2("MISSING_OR_INVALID", `pairing topic should be a string: ${s3}`);
        throw new Error(i6);
      }
      if (!this.pairings.keys.includes(s3)) {
        const { message: i6 } = S2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${s3}`);
        throw new Error(i6);
      }
      if (Kt(this.pairings.get(s3).expiry)) {
        await this.deletePairing(s3);
        const { message: i6 } = S2("EXPIRED", `pairing topic: ${s3}`);
        throw new Error(i6);
      }
    }, this.core = e3, this.logger = E(t3, this.name), this.pairings = new ni(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(v4.message, async (e3) => {
      const { topic: t3, message: s3, transportType: i6 } = e3;
      if (!this.pairings.keys.includes(t3) || i6 === M4.link_mode || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s3))) return;
      const r5 = await this.core.crypto.decode(t3, s3);
      try {
        isJsonRpcRequest(r5) ? (this.core.history.set(t3, r5), this.onRelayEventRequest({ topic: t3, payload: r5 })) : isJsonRpcResponse(r5) && (await this.core.history.resolve(r5), await this.onRelayEventResponse({ topic: t3, payload: r5 }), this.core.history.delete(t3, r5.id));
      } catch (n3) {
        this.logger.error(n3);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(S3.expired, async (e3) => {
      const { topic: t3 } = Vt(e3.target);
      t3 && this.pairings.keys.includes(t3) && (await this.deletePairing(t3, true), this.events.emit(V3.expire, { topic: t3 }));
    });
  }
};
var ai = class extends h4 {
  constructor(e3, t3) {
    super(e3, t3), this.core = e3, this.logger = t3, this.records = /* @__PURE__ */ new Map(), this.events = new import_events3.EventEmitter(), this.name = Dt2, this.version = mt, this.cached = [], this.initialized = false, this.storagePrefix = x4, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s3) => this.records.set(s3.id, s3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }, this.set = (s3, i6, r5) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: s3, request: i6, chainId: r5 }), this.records.has(i6.id)) return;
      const n3 = { id: i6.id, topic: s3, request: { method: i6.method, params: i6.params || null }, chainId: r5, expiry: Mt(import_time2.THIRTY_DAYS) };
      this.records.set(n3.id, n3), this.persist(), this.events.emit(P4.created, n3);
    }, this.resolve = async (s3) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: s3 }), !this.records.has(s3.id)) return;
      const i6 = await this.getRecord(s3.id);
      typeof i6.response > "u" && (i6.response = isJsonRpcError(s3) ? { error: s3.error } : { result: s3.result }, this.records.set(i6.id, i6), this.persist(), this.events.emit(P4.updated, i6));
    }, this.get = async (s3, i6) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: s3, id: i6 }), await this.getRecord(i6)), this.delete = (s3, i6) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: i6 }), this.values.forEach((r5) => {
        if (r5.topic === s3) {
          if (typeof i6 < "u" && r5.id !== i6) return;
          this.records.delete(r5.id), this.events.emit(P4.deleted, r5);
        }
      }), this.persist();
    }, this.exists = async (s3, i6) => (this.isInitialized(), this.records.has(i6) ? (await this.getRecord(i6)).topic === s3 : false), this.on = (s3, i6) => {
      this.events.on(s3, i6);
    }, this.once = (s3, i6) => {
      this.events.once(s3, i6);
    }, this.off = (s3, i6) => {
      this.events.off(s3, i6);
    }, this.removeListener = (s3, i6) => {
      this.events.removeListener(s3, i6);
    }, this.logger = E(t3, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e3 = [];
    return this.values.forEach((t3) => {
      if (typeof t3.response < "u") return;
      const s3 = { topic: t3.topic, request: formatJsonRpcRequest(t3.request.method, t3.request.params, t3.id), chainId: t3.chainId };
      return e3.push(s3);
    }), e3;
  }
  async setJsonRpcRecords(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e3) {
    this.isInitialized();
    const t3 = this.records.get(e3);
    if (!t3) {
      const { message: s3 } = S2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(s3);
    }
    return t3;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(P4.sync);
  }
  async restore() {
    try {
      const e3 = await this.getJsonRpcRecords();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.records.size) {
        const { message: t3 } = S2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t3), new Error(t3);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e3);
    }
  }
  registerEventListeners() {
    this.events.on(P4.created, (e3) => {
      const t3 = P4.created;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, record: e3 });
    }), this.events.on(P4.updated, (e3) => {
      const t3 = P4.updated;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, record: e3 });
    }), this.events.on(P4.deleted, (e3) => {
      const t3 = P4.deleted;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, record: e3 });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e3 = false;
      this.records.forEach((t3) => {
        (0, import_time2.toMiliseconds)(t3.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t3.id}`), this.records.delete(t3.id), this.events.emit(P4.deleted, t3, false), e3 = true);
      }), e3 && this.persist();
    } catch (e3) {
      this.logger.warn(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var hi = class extends x3 {
  constructor(e3, t3) {
    super(e3, t3), this.core = e3, this.logger = t3, this.expirations = /* @__PURE__ */ new Map(), this.events = new import_events3.EventEmitter(), this.name = bt2, this.version = ft, this.cached = [], this.initialized = false, this.storagePrefix = x4, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s3) => this.expirations.set(s3.target, s3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }, this.has = (s3) => {
      try {
        const i6 = this.formatTarget(s3);
        return typeof this.getExpiration(i6) < "u";
      } catch {
        return false;
      }
    }, this.set = (s3, i6) => {
      this.isInitialized();
      const r5 = this.formatTarget(s3), n3 = { target: r5, expiry: i6 };
      this.expirations.set(r5, n3), this.checkExpiry(r5, n3), this.events.emit(S3.created, { target: r5, expiration: n3 });
    }, this.get = (s3) => {
      this.isInitialized();
      const i6 = this.formatTarget(s3);
      return this.getExpiration(i6);
    }, this.del = (s3) => {
      if (this.isInitialized(), this.has(s3)) {
        const i6 = this.formatTarget(s3), r5 = this.getExpiration(i6);
        this.expirations.delete(i6), this.events.emit(S3.deleted, { target: i6, expiration: r5 });
      }
    }, this.on = (s3, i6) => {
      this.events.on(s3, i6);
    }, this.once = (s3, i6) => {
      this.events.once(s3, i6);
    }, this.off = (s3, i6) => {
      this.events.off(s3, i6);
    }, this.removeListener = (s3, i6) => {
      this.events.removeListener(s3, i6);
    }, this.logger = E(t3, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e3) {
    if (typeof e3 == "string") return Dt(e3);
    if (typeof e3 == "number") return xt(e3);
    const { message: t3 } = S2("UNKNOWN_TYPE", `Target type: ${typeof e3}`);
    throw new Error(t3);
  }
  async setExpirations(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(S3.sync);
  }
  async restore() {
    try {
      const e3 = await this.getExpirations();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.expirations.size) {
        const { message: t3 } = S2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t3), new Error(t3);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e3);
    }
  }
  getExpiration(e3) {
    const t3 = this.expirations.get(e3);
    if (!t3) {
      const { message: s3 } = S2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.warn(s3), new Error(s3);
    }
    return t3;
  }
  checkExpiry(e3, t3) {
    const { expiry: s3 } = t3;
    (0, import_time2.toMiliseconds)(s3) - Date.now() <= 0 && this.expire(e3, t3);
  }
  expire(e3, t3) {
    this.expirations.delete(e3), this.events.emit(S3.expired, { target: e3, expiration: t3 });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e3, t3) => this.checkExpiry(t3, e3));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(S3.created, (e3) => {
      const t3 = S3.created;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e3 }), this.persist();
    }), this.events.on(S3.expired, (e3) => {
      const t3 = S3.expired;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e3 }), this.persist();
    }), this.events.on(S3.deleted, (e3) => {
      const t3 = S3.deleted;
      this.logger.info(`Emitting ${t3}`), this.logger.debug({ type: "event", event: t3, data: e3 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var ci = class extends y4 {
  constructor(e3, t3, s3) {
    super(e3, t3, s3), this.core = e3, this.logger = t3, this.store = s3, this.name = _t2, this.verifyUrlV3 = vt2, this.storagePrefix = x4, this.version = De, this.init = async () => {
      var i6;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time2.toMiliseconds)((i6 = this.publicKey) == null ? void 0 : i6.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }, this.register = async (i6) => {
      if (!V2() || this.isDevEnv) return;
      const r5 = window.location.origin, { id: n3, decryptedId: a4 } = i6, h5 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${r5}&id=${n3}&decryptedId=${a4}`;
      try {
        const c5 = (0, import_window_getters2.getDocument)(), l3 = this.startAbortTimer(import_time2.ONE_SECOND * 5), p4 = await new Promise((D5, m3) => {
          const u4 = () => {
            window.removeEventListener("message", _5), c5.body.removeChild(g5), m3("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u4);
          const g5 = c5.createElement("iframe");
          g5.src = h5, g5.style.display = "none", g5.addEventListener("error", u4, { signal: this.abortController.signal });
          const _5 = (y6) => {
            if (y6.data && typeof y6.data == "string") try {
              const b4 = JSON.parse(y6.data);
              if (b4.type === "verify_attestation") {
                if (decodeJWT(b4.attestation).payload.id !== n3) return;
                clearInterval(l3), c5.body.removeChild(g5), this.abortController.signal.removeEventListener("abort", u4), window.removeEventListener("message", _5), D5(b4.attestation === null ? "" : b4.attestation);
              }
            } catch (b4) {
              this.logger.warn(b4);
            }
          };
          c5.body.appendChild(g5), window.addEventListener("message", _5, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", p4), p4;
      } catch (c5) {
        this.logger.warn(c5);
      }
      return "";
    }, this.resolve = async (i6) => {
      if (this.isDevEnv) return "";
      const { attestationId: r5, hash: n3, encryptedId: a4 } = i6;
      if (r5 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (r5) {
        if (decodeJWT(r5).payload.id !== a4) return;
        const c5 = await this.isValidJwtAttestation(r5);
        if (c5) {
          if (!c5.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return c5;
        }
      }
      if (!n3) return;
      const h5 = this.getVerifyUrl(i6 == null ? void 0 : i6.verifyUrl);
      return this.fetchAttestation(n3, h5);
    }, this.fetchAttestation = async (i6, r5) => {
      this.logger.debug(`resolving attestation: ${i6} from url: ${r5}`);
      const n3 = this.startAbortTimer(import_time2.ONE_SECOND * 5), a4 = await fetch(`${r5}/attestation/${i6}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(n3), a4.status === 200 ? await a4.json() : void 0;
    }, this.getVerifyUrl = (i6) => {
      let r5 = i6 || J2;
      return wt.includes(r5) || (this.logger.info(`verify url: ${r5}, not included in trusted list, assigning default: ${J2}`), r5 = J2), r5;
    }, this.fetchPublicKey = async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const i6 = this.startAbortTimer(import_time2.FIVE_SECONDS), r5 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(i6), await r5.json();
      } catch (i6) {
        this.logger.warn(i6);
      }
    }, this.persistPublicKey = async (i6) => {
      this.logger.debug("persisting public key to local storage", i6), await this.store.setItem(this.storeKey, i6), this.publicKey = i6;
    }, this.removePublicKey = async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }, this.isValidJwtAttestation = async (i6) => {
      const r5 = await this.getPublicKey();
      try {
        if (r5) return this.validateAttestation(i6, r5);
      } catch (a4) {
        this.logger.error(a4), this.logger.warn("error validating attestation");
      }
      const n3 = await this.fetchAndPersistPublicKey();
      try {
        if (n3) return this.validateAttestation(i6, n3);
      } catch (a4) {
        this.logger.error(a4), this.logger.warn("error validating attestation");
      }
    }, this.getPublicKey = async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey(), this.fetchAndPersistPublicKey = async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (r5) => {
        const n3 = await this.fetchPublicKey();
        n3 && (await this.persistPublicKey(n3), r5(n3));
      });
      const i6 = await this.fetchPromise;
      return this.fetchPromise = void 0, i6;
    }, this.validateAttestation = (i6, r5) => {
      const n3 = Rr(i6, r5.publicKey), a4 = { hasExpired: (0, import_time2.toMiliseconds)(n3.exp) < Date.now(), payload: n3 };
      if (a4.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a4.payload.origin, isScam: a4.payload.isScam, isVerified: a4.payload.isVerified };
    }, this.logger = E(t3, this.name), this.abortController = new AbortController(), this.isDevEnv = Wt(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y(this.logger);
  }
  startAbortTimer(e3) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time2.toMiliseconds)(e3));
  }
};
var li = class extends v3 {
  constructor(e3, t3) {
    super(e3, t3), this.projectId = e3, this.logger = t3, this.context = It, this.registerDeviceToken = async (s3) => {
      const { clientId: i6, token: r5, notificationType: n3, enableEncrypted: a4 = false } = s3, h5 = `${Tt2}/${this.projectId}/clients`;
      await fetch(h5, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: i6, type: n3, token: r5, always_raw: a4 }) });
    }, this.logger = E(t3, this.context);
  }
};
var dn2 = Object.defineProperty;
var ui = Object.getOwnPropertySymbols;
var pn = Object.prototype.hasOwnProperty;
var gn2 = Object.prototype.propertyIsEnumerable;
var di = (o4, e3, t3) => e3 in o4 ? dn2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
var Z3 = (o4, e3) => {
  for (var t3 in e3 || (e3 = {})) pn.call(e3, t3) && di(o4, t3, e3[t3]);
  if (ui) for (var t3 of ui(e3)) gn2.call(e3, t3) && di(o4, t3, e3[t3]);
  return o4;
};
var pi = class extends C4 {
  constructor(e3, t3, s3 = true) {
    super(e3, t3, s3), this.core = e3, this.logger = t3, this.context = Pt2, this.storagePrefix = x4, this.storageVersion = Ct, this.events = /* @__PURE__ */ new Map(), this.shouldPersist = false, this.init = async () => {
      if (!Wt()) try {
        const i6 = { eventId: Ht(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: Ge(this.core.relayer.protocol, this.core.relayer.version, se) } } };
        await this.sendEvent([i6]);
      } catch (i6) {
        this.logger.warn(i6);
      }
    }, this.createEvent = (i6) => {
      const { event: r5 = "ERROR", type: n3 = "", properties: { topic: a4, trace: h5 } } = i6, c5 = Ht(), l3 = this.core.projectId || "", p4 = Date.now(), D5 = Z3({ eventId: c5, timestamp: p4, props: { event: r5, type: n3, properties: { topic: a4, trace: h5 } }, bundleId: l3, domain: this.getAppDomain() }, this.setMethods(c5));
      return this.telemetryEnabled && (this.events.set(c5, D5), this.shouldPersist = true), D5;
    }, this.getEvent = (i6) => {
      const { eventId: r5, topic: n3 } = i6;
      if (r5) return this.events.get(r5);
      const a4 = Array.from(this.events.values()).find((h5) => h5.props.properties.topic === n3);
      if (a4) return Z3(Z3({}, a4), this.setMethods(a4.eventId));
    }, this.deleteEvent = (i6) => {
      const { eventId: r5 } = i6;
      this.events.delete(r5), this.shouldPersist = true;
    }, this.setEventListeners = () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((i6) => {
          (0, import_time2.fromMiliseconds)(Date.now()) - (0, import_time2.fromMiliseconds)(i6.timestamp) > St && (this.events.delete(i6.eventId), this.shouldPersist = true);
        });
      });
    }, this.setMethods = (i6) => ({ addTrace: (r5) => this.addTrace(i6, r5), setError: (r5) => this.setError(i6, r5) }), this.addTrace = (i6, r5) => {
      const n3 = this.events.get(i6);
      n3 && (n3.props.properties.trace.push(r5), this.events.set(i6, n3), this.shouldPersist = true);
    }, this.setError = (i6, r5) => {
      const n3 = this.events.get(i6);
      n3 && (n3.props.type = r5, n3.timestamp = Date.now(), this.events.set(i6, n3), this.shouldPersist = true);
    }, this.persist = async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }, this.restore = async () => {
      try {
        const i6 = await this.core.storage.getItem(this.storageKey) || [];
        if (!i6.length) return;
        i6.forEach((r5) => {
          this.events.set(r5.eventId, Z3(Z3({}, r5), this.setMethods(r5.eventId)));
        });
      } catch (i6) {
        this.logger.warn(i6);
      }
    }, this.submit = async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const i6 = [];
      for (const [r5, n3] of this.events) n3.props.type && i6.push(n3);
      if (i6.length !== 0) try {
        if ((await this.sendEvent(i6)).ok) for (const r5 of i6) this.events.delete(r5.eventId), this.shouldPersist = true;
      } catch (r5) {
        this.logger.warn(r5);
      }
    }, this.sendEvent = async (i6) => {
      const r5 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${Rt}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${se}${r5}`, { method: "POST", body: JSON.stringify(i6) });
    }, this.getAppDomain = () => Nt().url, this.logger = E(t3, this.context), this.telemetryEnabled = s3, s3 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var yn2 = Object.defineProperty;
var gi = Object.getOwnPropertySymbols;
var Dn = Object.prototype.hasOwnProperty;
var mn = Object.prototype.propertyIsEnumerable;
var yi = (o4, e3, t3) => e3 in o4 ? yn2(o4, e3, { enumerable: true, configurable: true, writable: true, value: t3 }) : o4[e3] = t3;
var Di = (o4, e3) => {
  for (var t3 in e3 || (e3 = {})) Dn.call(e3, t3) && yi(o4, t3, e3[t3]);
  if (gi) for (var t3 of gi(e3)) mn.call(e3, t3) && yi(o4, t3, e3[t3]);
  return o4;
};
var ne2 = class _ne extends n2 {
  constructor(e3) {
    var t3;
    super(e3), this.protocol = ye2, this.version = De, this.name = ie, this.events = new import_events3.EventEmitter(), this.initialized = false, this.on = (n3, a4) => this.events.on(n3, a4), this.once = (n3, a4) => this.events.once(n3, a4), this.off = (n3, a4) => this.events.off(n3, a4), this.removeListener = (n3, a4) => this.events.removeListener(n3, a4), this.dispatchEnvelope = ({ topic: n3, message: a4, sessionExists: h5 }) => {
      if (!n3 || !a4) return;
      const c5 = { topic: n3, message: a4, publishedAt: Date.now(), transportType: M4.link_mode };
      this.relayer.onLinkMessageEvent(c5, { sessionExists: h5 });
    }, this.projectId = e3 == null ? void 0 : e3.projectId, this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || be2, this.customStoragePrefix = e3 != null && e3.customStoragePrefix ? `:${e3.customStoragePrefix}` : "";
    const s3 = k({ level: typeof (e3 == null ? void 0 : e3.logger) == "string" && e3.logger ? e3.logger : Ye.logger }), { logger: i6, chunkLoggerController: r5 } = A({ opts: s3, maxSizeInBytes: e3 == null ? void 0 : e3.maxLogBlobSizeInBytes, loggerOverride: e3 == null ? void 0 : e3.logger });
    this.logChunkController = r5, (t3 = this.logChunkController) != null && t3.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var n3, a4;
      (n3 = this.logChunkController) != null && n3.downloadLogsBlobInBrowser && ((a4 = this.logChunkController) == null || a4.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E(i6, this.name), this.heartbeat = new i(), this.crypto = new Ht2(this, this.logger, e3 == null ? void 0 : e3.keychain), this.history = new ai(this, this.logger), this.expirer = new hi(this, this.logger), this.storage = e3 != null && e3.storage ? e3.storage : new h(Di(Di({}, Je2), e3 == null ? void 0 : e3.storageOptions)), this.relayer = new ti({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new oi(this, this.logger), this.verify = new ci(this, this.logger, this.storage), this.echoClient = new li(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new pi(this, this.logger, e3 == null ? void 0 : e3.telemetryEnabled);
  }
  static async init(e3) {
    const t3 = new _ne(e3);
    await t3.initialize();
    const s3 = await t3.crypto.getClientId();
    return await t3.storage.setItem(lt, s3), t3;
  }
  get context() {
    return y(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e3;
    return (e3 = this.logChunkController) == null ? void 0 : e3.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e3) {
    this.linkModeSupportedApps.includes(e3) || (this.linkModeSupportedApps.push(e3), await this.storage.setItem(fe2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.eventClient.init(), this.linkModeSupportedApps = await this.storage.getItem(fe2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e3) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e3), this.logger.error(e3.message), e3;
    }
  }
};
var bn2 = ne2;

// node_modules/@walletconnect/sign-client/node_modules/@walletconnect/types/dist/index.es.js
var import_dist172 = __toESM(require_dist());
var import_dist173 = __toESM(require_dist2());
var import_dist174 = __toESM(require_dist3());
var import_events5 = __toESM(require_events());
var S4 = class {
  constructor(s3) {
    this.opts = s3, this.protocol = "wc", this.version = 2;
  }
};
var M5 = class {
  constructor(s3) {
    this.client = s3;
  }
};

// node_modules/@walletconnect/sign-client/dist/index.es.js
var import_events6 = __toESM(require_events());
var import_time3 = __toESM(require_cjs());
var be3 = "wc";
var Ce3 = 2;
var Le2 = "client";
var ye3 = `${be3}@${Ce3}:${Le2}:`;
var we3 = { name: Le2, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var xe = "WALLETCONNECT_DEEPLINK_CHOICE";
var st3 = "proposal";
var it3 = "Proposal expired";
var rt2 = "session";
var z5 = import_time3.SEVEN_DAYS;
var nt2 = "engine";
var v5 = { wc_sessionPropose: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time3.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time3.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var me3 = { min: import_time3.FIVE_MINUTES, max: import_time3.SEVEN_DAYS };
var x5 = { idle: "IDLE", active: "ACTIVE" };
var ot2 = "request";
var at3 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var ct2 = "wc";
var lt2 = "auth";
var pt2 = "authKeys";
var ht2 = "pairingTopics";
var dt2 = "requests";
var oe3 = `${ct2}@${1.5}:${lt2}:`;
var ae3 = `${oe3}:PUB_KEY`;
var ys2 = Object.defineProperty;
var ws = Object.defineProperties;
var ms = Object.getOwnPropertyDescriptors;
var ut3 = Object.getOwnPropertySymbols;
var _s = Object.prototype.hasOwnProperty;
var Es = Object.prototype.propertyIsEnumerable;
var gt3 = (q5, o4, e3) => o4 in q5 ? ys2(q5, o4, { enumerable: true, configurable: true, writable: true, value: e3 }) : q5[o4] = e3;
var I5 = (q5, o4) => {
  for (var e3 in o4 || (o4 = {})) _s.call(o4, e3) && gt3(q5, e3, o4[e3]);
  if (ut3) for (var e3 of ut3(o4)) Es.call(o4, e3) && gt3(q5, e3, o4[e3]);
  return q5;
};
var D4 = (q5, o4) => ws(q5, ms(o4));
var Rs2 = class extends M5 {
  constructor(o4) {
    super(o4), this.name = nt2, this.events = new import_events6.default(), this.initialized = false, this.requestQueue = { state: x5.idle, queue: [] }, this.sessionRequestQueue = { state: x5.idle, queue: [] }, this.requestQueueDelay = import_time3.ONE_SECOND, this.expectedPairingMethodMap = /* @__PURE__ */ new Map(), this.recentlyDeletedMap = /* @__PURE__ */ new Map(), this.recentlyDeletedLimit = 200, this.relayMessageCache = [], this.init = async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(v5) }), this.initialized = true, setTimeout(() => {
        this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay)));
    }, this.connect = async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const t3 = D4(I5({}, e3), { requiredNamespaces: e3.requiredNamespaces || {}, optionalNamespaces: e3.optionalNamespaces || {} });
      await this.isValidConnect(t3);
      const { pairingTopic: s3, requiredNamespaces: i6, optionalNamespaces: r5, sessionProperties: n3, relays: a4 } = t3;
      let c5 = s3, h5, p4 = false;
      try {
        c5 && (p4 = this.client.core.pairing.pairings.get(c5).active);
      } catch (E5) {
        throw this.client.logger.error(`connect() -> pairing.get(${c5}) failed`), E5;
      }
      if (!c5 || !p4) {
        const { topic: E5, uri: S5 } = await this.client.core.pairing.create();
        c5 = E5, h5 = S5;
      }
      if (!c5) {
        const { message: E5 } = S2("NO_MATCHING_KEY", `connect() pairing topic: ${c5}`);
        throw new Error(E5);
      }
      const d4 = await this.client.core.crypto.generateKeyPair(), l3 = v5.wc_sessionPropose.req.ttl || import_time3.FIVE_MINUTES, w5 = Mt(l3), m3 = I5({ requiredNamespaces: i6, optionalNamespaces: r5, relays: a4 ?? [{ protocol: rt }], proposer: { publicKey: d4, metadata: this.client.metadata }, expiryTimestamp: w5, pairingTopic: c5 }, n3 && { sessionProperties: n3 }), { reject: y6, resolve: _5, done: R3 } = _t(l3, it3);
      this.events.once(Lt("session_connect"), async ({ error: E5, session: S5 }) => {
        if (E5) y6(E5);
        else if (S5) {
          S5.self.publicKey = d4;
          const M6 = D4(I5({}, S5), { pairingTopic: m3.pairingTopic, requiredNamespaces: m3.requiredNamespaces, optionalNamespaces: m3.optionalNamespaces, transportType: M4.relay });
          await this.client.session.set(S5.topic, M6), await this.setExpiry(S5.topic, S5.expiry), c5 && await this.client.core.pairing.updateMetadata({ topic: c5, metadata: S5.peer.metadata }), this.cleanupDuplicatePairings(M6), _5(M6);
        }
      });
      const V4 = await this.sendRequest({ topic: c5, method: "wc_sessionPropose", params: m3, throwOnFailedPublish: true });
      return await this.setProposal(V4, I5({ id: V4 }, m3)), { uri: h5, approval: R3 };
    }, this.pair = async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(e3);
      } catch (t3) {
        throw this.client.logger.error("pair() failed"), t3;
      }
    }, this.approve = async (e3) => {
      var t3, s3, i6;
      const r5 = this.client.core.eventClient.createEvent({ properties: { topic: (t3 = e3 == null ? void 0 : e3.id) == null ? void 0 : t3.toString(), trace: [Is.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (N4) {
        throw r5.setError(Ts.no_internet_connection), N4;
      }
      try {
        await this.isValidProposalId(e3 == null ? void 0 : e3.id);
      } catch (N4) {
        throw this.client.logger.error(`approve() -> proposal.get(${e3 == null ? void 0 : e3.id}) failed`), r5.setError(Ts.proposal_not_found), N4;
      }
      try {
        await this.isValidApprove(e3);
      } catch (N4) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r5.setError(Ts.session_approve_namespace_validation_failure), N4;
      }
      const { id: n3, relayProtocol: a4, namespaces: c5, sessionProperties: h5, sessionConfig: p4 } = e3, d4 = this.client.proposal.get(n3);
      this.client.core.eventClient.deleteEvent({ eventId: r5.eventId });
      const { pairingTopic: l3, proposer: w5, requiredNamespaces: m3, optionalNamespaces: y6 } = d4;
      let _5 = (s3 = this.client.core.eventClient) == null ? void 0 : s3.getEvent({ topic: l3 });
      _5 || (_5 = (i6 = this.client.core.eventClient) == null ? void 0 : i6.createEvent({ type: Is.session_approve_started, properties: { topic: l3, trace: [Is.session_approve_started, Is.session_namespaces_validation_success] } }));
      const R3 = await this.client.core.crypto.generateKeyPair(), V4 = w5.publicKey, E5 = await this.client.core.crypto.generateSharedKey(R3, V4), S5 = I5(I5({ relay: { protocol: a4 ?? "irn" }, namespaces: c5, controller: { publicKey: R3, metadata: this.client.metadata }, expiry: Mt(z5) }, h5 && { sessionProperties: h5 }), p4 && { sessionConfig: p4 }), M6 = M4.relay;
      _5.addTrace(Is.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(E5, { transportType: M6 });
      } catch (N4) {
        throw _5.setError(Ts.subscribe_session_topic_failure), N4;
      }
      _5.addTrace(Is.subscribe_session_topic_success);
      const W4 = D4(I5({}, S5), { topic: E5, requiredNamespaces: m3, optionalNamespaces: y6, pairingTopic: l3, acknowledged: false, self: S5.controller, peer: { publicKey: w5.publicKey, metadata: w5.metadata }, controller: R3, transportType: M4.relay });
      await this.client.session.set(E5, W4), _5.addTrace(Is.store_session);
      try {
        _5.addTrace(Is.publishing_session_settle), await this.sendRequest({ topic: E5, method: "wc_sessionSettle", params: S5, throwOnFailedPublish: true }).catch((N4) => {
          throw _5 == null ? void 0 : _5.setError(Ts.session_settle_publish_failure), N4;
        }), _5.addTrace(Is.session_settle_publish_success), _5.addTrace(Is.publishing_session_approve), await this.sendResult({ id: n3, topic: l3, result: { relay: { protocol: a4 ?? "irn" }, responderPublicKey: R3 }, throwOnFailedPublish: true }).catch((N4) => {
          throw _5 == null ? void 0 : _5.setError(Ts.session_approve_publish_failure), N4;
        }), _5.addTrace(Is.session_approve_publish_success);
      } catch (N4) {
        throw this.client.logger.error(N4), this.client.session.delete(E5, U2("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(E5), N4;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _5.eventId }), await this.client.core.pairing.updateMetadata({ topic: l3, metadata: w5.metadata }), await this.client.proposal.delete(n3, U2("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: l3 }), await this.setExpiry(E5, Mt(z5)), { topic: E5, acknowledged: () => Promise.resolve(this.client.session.get(E5)) };
    }, this.reject = async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(e3);
      } catch (r5) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r5;
      }
      const { id: t3, reason: s3 } = e3;
      let i6;
      try {
        i6 = this.client.proposal.get(t3).pairingTopic;
      } catch (r5) {
        throw this.client.logger.error(`reject() -> proposal.get(${t3}) failed`), r5;
      }
      i6 && (await this.sendError({ id: t3, topic: i6, error: s3, rpcOpts: v5.wc_sessionPropose.reject }), await this.client.proposal.delete(t3, U2("USER_DISCONNECTED")));
    }, this.update = async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(e3);
      } catch (p4) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), p4;
      }
      const { topic: t3, namespaces: s3 } = e3, { done: i6, resolve: r5, reject: n3 } = _t(), a4 = payloadId(), c5 = getBigIntRpcId().toString(), h5 = this.client.session.get(t3).namespaces;
      return this.events.once(Lt("session_update", a4), ({ error: p4 }) => {
        p4 ? n3(p4) : r5();
      }), await this.client.session.update(t3, { namespaces: s3 }), await this.sendRequest({ topic: t3, method: "wc_sessionUpdate", params: { namespaces: s3 }, throwOnFailedPublish: true, clientRpcId: a4, relayRpcId: c5 }).catch((p4) => {
        this.client.logger.error(p4), this.client.session.update(t3, { namespaces: h5 }), n3(p4);
      }), { acknowledged: i6 };
    }, this.extend = async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(e3);
      } catch (a4) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a4;
      }
      const { topic: t3 } = e3, s3 = payloadId(), { done: i6, resolve: r5, reject: n3 } = _t();
      return this.events.once(Lt("session_extend", s3), ({ error: a4 }) => {
        a4 ? n3(a4) : r5();
      }), await this.setExpiry(t3, Mt(z5)), this.sendRequest({ topic: t3, method: "wc_sessionExtend", params: {}, clientRpcId: s3, throwOnFailedPublish: true }).catch((a4) => {
        n3(a4);
      }), { acknowledged: i6 };
    }, this.request = async (e3) => {
      this.isInitialized();
      try {
        await this.isValidRequest(e3);
      } catch (w5) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), w5;
      }
      const { chainId: t3, request: s3, topic: i6, expiry: r5 = v5.wc_sessionRequest.req.ttl } = e3, n3 = this.client.session.get(i6);
      (n3 == null ? void 0 : n3.transportType) === M4.relay && await this.confirmOnlineStateOrThrow();
      const a4 = payloadId(), c5 = getBigIntRpcId().toString(), { done: h5, resolve: p4, reject: d4 } = _t(r5, "Request expired. Please try again.");
      this.events.once(Lt("session_request", a4), ({ error: w5, result: m3 }) => {
        w5 ? d4(w5) : p4(m3);
      });
      const l3 = this.getAppLinkIfEnabled(n3.peer.metadata, n3.transportType);
      return l3 ? (await this.sendRequest({ clientRpcId: a4, relayRpcId: c5, topic: i6, method: "wc_sessionRequest", params: { request: D4(I5({}, s3), { expiryTimestamp: Mt(r5) }), chainId: t3 }, expiry: r5, throwOnFailedPublish: true, appLink: l3 }).catch((w5) => d4(w5)), this.client.events.emit("session_request_sent", { topic: i6, request: s3, chainId: t3, id: a4 }), await h5()) : await Promise.all([new Promise(async (w5) => {
        await this.sendRequest({ clientRpcId: a4, relayRpcId: c5, topic: i6, method: "wc_sessionRequest", params: { request: D4(I5({}, s3), { expiryTimestamp: Mt(r5) }), chainId: t3 }, expiry: r5, throwOnFailedPublish: true }).catch((m3) => d4(m3)), this.client.events.emit("session_request_sent", { topic: i6, request: s3, chainId: t3, id: a4 }), w5();
      }), new Promise(async (w5) => {
        var m3;
        if (!((m3 = n3.sessionConfig) != null && m3.disableDeepLink)) {
          const y6 = await qt(this.client.core.storage, xe);
          await Ft({ id: a4, topic: i6, wcDeepLink: y6 });
        }
        w5();
      }), h5()]).then((w5) => w5[2]);
    }, this.respond = async (e3) => {
      this.isInitialized(), await this.isValidRespond(e3);
      const { topic: t3, response: s3 } = e3, { id: i6 } = s3, r5 = this.client.session.get(t3);
      r5.transportType === M4.relay && await this.confirmOnlineStateOrThrow();
      const n3 = this.getAppLinkIfEnabled(r5.peer.metadata, r5.transportType);
      isJsonRpcResult(s3) ? await this.sendResult({ id: i6, topic: t3, result: s3.result, throwOnFailedPublish: true, appLink: n3 }) : isJsonRpcError(s3) && await this.sendError({ id: i6, topic: t3, error: s3.error, appLink: n3 }), this.cleanupAfterResponse(e3);
    }, this.ping = async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(e3);
      } catch (s3) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s3;
      }
      const { topic: t3 } = e3;
      if (this.client.session.keys.includes(t3)) {
        const s3 = payloadId(), i6 = getBigIntRpcId().toString(), { done: r5, resolve: n3, reject: a4 } = _t();
        this.events.once(Lt("session_ping", s3), ({ error: c5 }) => {
          c5 ? a4(c5) : n3();
        }), await Promise.all([this.sendRequest({ topic: t3, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s3, relayRpcId: i6 }), r5()]);
      } else this.client.core.pairing.pairings.keys.includes(t3) && await this.client.core.pairing.ping({ topic: t3 });
    }, this.emit = async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e3);
      const { topic: t3, event: s3, chainId: i6 } = e3, r5 = getBigIntRpcId().toString();
      await this.sendRequest({ topic: t3, method: "wc_sessionEvent", params: { event: s3, chainId: i6 }, throwOnFailedPublish: true, relayRpcId: r5 });
    }, this.disconnect = async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e3);
      const { topic: t3 } = e3;
      if (this.client.session.keys.includes(t3)) await this.sendRequest({ topic: t3, method: "wc_sessionDelete", params: U2("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: t3, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(t3)) await this.client.core.pairing.disconnect({ topic: t3 });
      else {
        const { message: s3 } = S2("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t3}`);
        throw new Error(s3);
      }
    }, this.find = (e3) => (this.isInitialized(), this.client.session.getAll().filter((t3) => zr(t3, e3))), this.getPendingSessionRequests = () => this.client.pendingRequest.getAll(), this.authenticate = async (e3, t3) => {
      var s3;
      this.isInitialized(), this.isValidAuthenticate(e3);
      const i6 = t3 && this.client.core.linkModeSupportedApps.includes(t3) && ((s3 = this.client.metadata.redirect) == null ? void 0 : s3.linkMode), r5 = i6 ? M4.link_mode : M4.relay;
      r5 === M4.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n3, statement: a4 = "", uri: c5, domain: h5, nonce: p4, type: d4, exp: l3, nbf: w5, methods: m3 = [], expiry: y6 } = e3, _5 = [...e3.resources || []], { topic: R3, uri: V4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r5 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: R3, uri: V4 } });
      const E5 = await this.client.core.crypto.generateKeyPair(), S5 = hr(E5);
      if (await Promise.all([this.client.auth.authKeys.set(ae3, { responseTopic: S5, publicKey: E5 }), this.client.auth.pairingTopics.set(S5, { topic: S5, pairingTopic: R3 })]), await this.client.core.relayer.subscribe(S5, { transportType: r5 }), this.client.logger.info(`sending request to new pairing topic: ${R3}`), m3.length > 0) {
        const { namespace: O4 } = re(n3[0]);
        let T4 = ir(O4, "request", m3);
        Y2(_5) && (T4 = cr(T4, _5.pop())), _5.push(T4);
      }
      const M6 = y6 && y6 > v5.wc_sessionAuthenticate.req.ttl ? y6 : v5.wc_sessionAuthenticate.req.ttl, W4 = { authPayload: { type: d4 ?? "caip122", chains: n3, statement: a4, aud: c5, domain: h5, version: "1", nonce: p4, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: l3, nbf: w5, resources: _5 }, requester: { publicKey: E5, metadata: this.client.metadata }, expiryTimestamp: Mt(M6) }, N4 = { eip155: { chains: n3, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m3])], events: ["chainChanged", "accountsChanged"] } }, De2 = { requiredNamespaces: {}, optionalNamespaces: N4, relays: [{ protocol: "irn" }], pairingTopic: R3, proposer: { publicKey: E5, metadata: this.client.metadata }, expiryTimestamp: Mt(v5.wc_sessionPropose.req.ttl) }, { done: wt2, resolve: Ve, reject: Ee3 } = _t(M6, "Request expired"), ce2 = async ({ error: O4, session: T4 }) => {
        if (this.events.off(Lt("session_request", G3), Re2), O4) Ee3(O4);
        else if (T4) {
          T4.self.publicKey = E5, await this.client.session.set(T4.topic, T4), await this.setExpiry(T4.topic, T4.expiry), R3 && await this.client.core.pairing.updateMetadata({ topic: R3, metadata: T4.peer.metadata });
          const le2 = this.client.session.get(T4.topic);
          await this.deleteProposal(Z4), Ve({ session: le2 });
        }
      }, Re2 = async (O4) => {
        var T4, le2, Me;
        if (await this.deletePendingAuthRequest(G3, { message: "fulfilled", code: 0 }), O4.error) {
          const te = U2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return O4.error.code === te.code ? void 0 : (this.events.off(Lt("session_connect"), ce2), Ee3(O4.error.message));
        }
        await this.deleteProposal(Z4), this.events.off(Lt("session_connect"), ce2);
        const { cacaos: ke, responder: j3 } = O4.result, Ie2 = [], $e2 = [];
        for (const te of ke) {
          await nr({ cacao: te, projectId: this.client.core.projectId }) || (this.client.logger.error(te, "Signature verification failed"), Ee3(U2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: fe3 } = te, ve3 = Y2(fe3.resources), Ke2 = [ln(fe3.iss)], mt2 = fe(fe3.iss);
          if (ve3) {
            const qe2 = ar(ve3), _t3 = ur(ve3);
            Ie2.push(...qe2), Ke2.push(..._t3);
          }
          for (const qe2 of Ke2) $e2.push(`${qe2}:${mt2}`);
        }
        const ee3 = await this.client.core.crypto.generateSharedKey(E5, j3.publicKey);
        let pe2;
        Ie2.length > 0 && (pe2 = { topic: ee3, acknowledged: true, self: { publicKey: E5, metadata: this.client.metadata }, peer: j3, controller: j3.publicKey, expiry: Mt(z5), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: R3, namespaces: Jr([...new Set(Ie2)], [...new Set($e2)]), transportType: r5 }, await this.client.core.relayer.subscribe(ee3, { transportType: r5 }), await this.client.session.set(ee3, pe2), R3 && await this.client.core.pairing.updateMetadata({ topic: R3, metadata: j3.metadata }), pe2 = this.client.session.get(ee3)), (T4 = this.client.metadata.redirect) != null && T4.linkMode && (le2 = j3.metadata.redirect) != null && le2.linkMode && (Me = j3.metadata.redirect) != null && Me.universal && t3 && (this.client.core.addLinkModeSupportedApp(j3.metadata.redirect.universal), this.client.session.update(ee3, { transportType: M4.link_mode })), Ve({ auths: ke, session: pe2 });
      }, G3 = payloadId(), Z4 = payloadId();
      this.events.once(Lt("session_connect"), ce2), this.events.once(Lt("session_request", G3), Re2);
      let Se2;
      try {
        if (i6) {
          const O4 = formatJsonRpcRequest("wc_sessionAuthenticate", W4, G3);
          this.client.core.history.set(R3, O4);
          const T4 = await this.client.core.crypto.encode("", O4, { type: M3, encoding: lr });
          Se2 = xr(t3, R3, T4);
        } else await Promise.all([this.sendRequest({ topic: R3, method: "wc_sessionAuthenticate", params: W4, expiry: e3.expiry, throwOnFailedPublish: true, clientRpcId: G3 }), this.sendRequest({ topic: R3, method: "wc_sessionPropose", params: De2, expiry: v5.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: Z4 })]);
      } catch (O4) {
        throw this.events.off(Lt("session_connect"), ce2), this.events.off(Lt("session_request", G3), Re2), O4;
      }
      return await this.setProposal(Z4, I5({ id: Z4 }, De2)), await this.setAuthRequest(G3, { request: D4(I5({}, W4), { verifyContext: {} }), pairingTopic: R3, transportType: r5 }), { uri: Se2 ?? V4, response: wt2 };
    }, this.approveSessionAuthenticate = async (e3) => {
      const { id: t3, auths: s3 } = e3, i6 = this.client.core.eventClient.createEvent({ properties: { topic: t3.toString(), trace: [Cs.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (y6) {
        throw i6.setError(Ps.no_internet_connection), y6;
      }
      const r5 = this.getPendingAuthRequest(t3);
      if (!r5) throw i6.setError(Ps.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t3}`);
      const n3 = r5.transportType || M4.relay;
      n3 === M4.relay && await this.confirmOnlineStateOrThrow();
      const a4 = r5.requester.publicKey, c5 = await this.client.core.crypto.generateKeyPair(), h5 = hr(a4), p4 = { type: D3, receiverPublicKey: a4, senderPublicKey: c5 }, d4 = [], l3 = [];
      for (const y6 of s3) {
        if (!await nr({ cacao: y6, projectId: this.client.core.projectId })) {
          i6.setError(Ps.invalid_cacao);
          const S5 = U2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: t3, topic: h5, error: S5, encodeOpts: p4 }), new Error(S5.message);
        }
        i6.addTrace(Cs.cacaos_verified);
        const { p: _5 } = y6, R3 = Y2(_5.resources), V4 = [ln(_5.iss)], E5 = fe(_5.iss);
        if (R3) {
          const S5 = ar(R3), M6 = ur(R3);
          d4.push(...S5), V4.push(...M6);
        }
        for (const S5 of V4) l3.push(`${S5}:${E5}`);
      }
      const w5 = await this.client.core.crypto.generateSharedKey(c5, a4);
      i6.addTrace(Cs.create_authenticated_session_topic);
      let m3;
      if ((d4 == null ? void 0 : d4.length) > 0) {
        m3 = { topic: w5, acknowledged: true, self: { publicKey: c5, metadata: this.client.metadata }, peer: { publicKey: a4, metadata: r5.requester.metadata }, controller: a4, expiry: Mt(z5), authentication: s3, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r5.pairingTopic, namespaces: Jr([...new Set(d4)], [...new Set(l3)]), transportType: n3 }, i6.addTrace(Cs.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w5, { transportType: n3 });
        } catch (y6) {
          throw i6.setError(Ps.subscribe_authenticated_session_topic_failure), y6;
        }
        i6.addTrace(Cs.subscribe_authenticated_session_topic_success), await this.client.session.set(w5, m3), i6.addTrace(Cs.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r5.pairingTopic, metadata: r5.requester.metadata });
      }
      i6.addTrace(Cs.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: h5, id: t3, result: { cacaos: s3, responder: { publicKey: c5, metadata: this.client.metadata } }, encodeOpts: p4, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r5.requester.metadata, n3) });
      } catch (y6) {
        throw i6.setError(Ps.authenticated_session_approve_publish_failure), y6;
      }
      return await this.client.auth.requests.delete(t3, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r5.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i6.eventId }), { session: m3 };
    }, this.rejectSessionAuthenticate = async (e3) => {
      this.isInitialized();
      const { id: t3, reason: s3 } = e3, i6 = this.getPendingAuthRequest(t3);
      if (!i6) throw new Error(`Could not find pending auth request with id ${t3}`);
      i6.transportType === M4.relay && await this.confirmOnlineStateOrThrow();
      const r5 = i6.requester.publicKey, n3 = await this.client.core.crypto.generateKeyPair(), a4 = hr(r5), c5 = { type: D3, receiverPublicKey: r5, senderPublicKey: n3 };
      await this.sendError({ id: t3, topic: a4, error: s3, encodeOpts: c5, rpcOpts: v5.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i6.requester.metadata, i6.transportType) }), await this.client.auth.requests.delete(t3, { message: "rejected", code: 0 }), await this.client.proposal.delete(t3, U2("USER_DISCONNECTED"));
    }, this.formatAuthMessage = (e3) => {
      this.isInitialized();
      const { request: t3, iss: s3 } = e3;
      return dn(t3, s3);
    }, this.processRelayMessageCache = () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const e3 = this.relayMessageCache.shift();
          e3 && await this.onRelayMessage(e3);
        } catch (e3) {
          this.client.logger.error(e3);
        }
      }, 50);
    }, this.cleanupDuplicatePairings = async (e3) => {
      if (e3.pairingTopic) try {
        const t3 = this.client.core.pairing.pairings.get(e3.pairingTopic), s3 = this.client.core.pairing.pairings.getAll().filter((i6) => {
          var r5, n3;
          return ((r5 = i6.peerMetadata) == null ? void 0 : r5.url) && ((n3 = i6.peerMetadata) == null ? void 0 : n3.url) === e3.peer.metadata.url && i6.topic && i6.topic !== t3.topic;
        });
        if (s3.length === 0) return;
        this.client.logger.info(`Cleaning up ${s3.length} duplicate pairing(s)`), await Promise.all(s3.map((i6) => this.client.core.pairing.disconnect({ topic: i6.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (t3) {
        this.client.logger.error(t3);
      }
    }, this.deleteSession = async (e3) => {
      var t3;
      const { topic: s3, expirerHasDeleted: i6 = false, emitEvent: r5 = true, id: n3 = 0 } = e3, { self: a4 } = this.client.session.get(s3);
      await this.client.core.relayer.unsubscribe(s3), await this.client.session.delete(s3, U2("USER_DISCONNECTED")), this.addToRecentlyDeleted(s3, "session"), this.client.core.crypto.keychain.has(a4.publicKey) && await this.client.core.crypto.deleteKeyPair(a4.publicKey), this.client.core.crypto.keychain.has(s3) && await this.client.core.crypto.deleteSymKey(s3), i6 || this.client.core.expirer.del(s3), this.client.core.storage.removeItem(xe).catch((c5) => this.client.logger.warn(c5)), this.getPendingSessionRequests().forEach((c5) => {
        c5.topic === s3 && this.deletePendingSessionRequest(c5.id, U2("USER_DISCONNECTED"));
      }), s3 === ((t3 = this.sessionRequestQueue.queue[0]) == null ? void 0 : t3.topic) && (this.sessionRequestQueue.state = x5.idle), r5 && this.client.events.emit("session_delete", { id: n3, topic: s3 });
    }, this.deleteProposal = async (e3, t3) => {
      if (t3) try {
        const s3 = this.client.proposal.get(e3), i6 = this.client.core.eventClient.getEvent({ topic: s3.pairingTopic });
        i6 == null ? void 0 : i6.setError(Ts.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(e3, U2("USER_DISCONNECTED")), t3 ? Promise.resolve() : this.client.core.expirer.del(e3)]), this.addToRecentlyDeleted(e3, "proposal");
    }, this.deletePendingSessionRequest = async (e3, t3, s3 = false) => {
      await Promise.all([this.client.pendingRequest.delete(e3, t3), s3 ? Promise.resolve() : this.client.core.expirer.del(e3)]), this.addToRecentlyDeleted(e3, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i6) => i6.id !== e3), s3 && (this.sessionRequestQueue.state = x5.idle, this.client.events.emit("session_request_expire", { id: e3 }));
    }, this.deletePendingAuthRequest = async (e3, t3, s3 = false) => {
      await Promise.all([this.client.auth.requests.delete(e3, t3), s3 ? Promise.resolve() : this.client.core.expirer.del(e3)]);
    }, this.setExpiry = async (e3, t3) => {
      this.client.session.keys.includes(e3) && (this.client.core.expirer.set(e3, t3), await this.client.session.update(e3, { expiry: t3 }));
    }, this.setProposal = async (e3, t3) => {
      this.client.core.expirer.set(e3, Mt(v5.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e3, t3);
    }, this.setAuthRequest = async (e3, t3) => {
      const { request: s3, pairingTopic: i6, transportType: r5 = M4.relay } = t3;
      this.client.core.expirer.set(e3, s3.expiryTimestamp), await this.client.auth.requests.set(e3, { authPayload: s3.authPayload, requester: s3.requester, expiryTimestamp: s3.expiryTimestamp, id: e3, pairingTopic: i6, verifyContext: s3.verifyContext, transportType: r5 });
    }, this.setPendingSessionRequest = async (e3) => {
      const { id: t3, topic: s3, params: i6, verifyContext: r5 } = e3, n3 = i6.request.expiryTimestamp || Mt(v5.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(t3, n3), await this.client.pendingRequest.set(t3, { id: t3, topic: s3, params: i6, verifyContext: r5 });
    }, this.sendRequest = async (e3) => {
      const { topic: t3, method: s3, params: i6, expiry: r5, relayRpcId: n3, clientRpcId: a4, throwOnFailedPublish: c5, appLink: h5 } = e3, p4 = formatJsonRpcRequest(s3, i6, a4);
      let d4;
      const l3 = !!h5;
      try {
        const y6 = l3 ? lr : ge;
        d4 = await this.client.core.crypto.encode(t3, p4, { encoding: y6 });
      } catch (y6) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t3} failed`), y6;
      }
      let w5;
      if (at3.includes(s3)) {
        const y6 = yr(JSON.stringify(p4)), _5 = yr(d4);
        w5 = await this.client.core.verify.register({ id: _5, decryptedId: y6 });
      }
      const m3 = v5[s3].req;
      if (m3.attestation = w5, r5 && (m3.ttl = r5), n3 && (m3.id = n3), this.client.core.history.set(t3, p4), l3) {
        const y6 = xr(h5, t3, d4);
        await global.Linking.openURL(y6, this.client.name);
      } else {
        const y6 = v5[s3].req;
        r5 && (y6.ttl = r5), n3 && (y6.id = n3), c5 ? (y6.internal = D4(I5({}, y6.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(t3, d4, y6)) : this.client.core.relayer.publish(t3, d4, y6).catch((_5) => this.client.logger.error(_5));
      }
      return p4.id;
    }, this.sendResult = async (e3) => {
      const { id: t3, topic: s3, result: i6, throwOnFailedPublish: r5, encodeOpts: n3, appLink: a4 } = e3, c5 = formatJsonRpcResult(t3, i6);
      let h5;
      const p4 = a4 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const l3 = p4 ? lr : ge;
        h5 = await this.client.core.crypto.encode(s3, c5, D4(I5({}, n3 || {}), { encoding: l3 }));
      } catch (l3) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s3} failed`), l3;
      }
      let d4;
      try {
        d4 = await this.client.core.history.get(s3, t3);
      } catch (l3) {
        throw this.client.logger.error(`sendResult() -> history.get(${s3}, ${t3}) failed`), l3;
      }
      if (p4) {
        const l3 = xr(a4, s3, h5);
        await global.Linking.openURL(l3, this.client.name);
      } else {
        const l3 = v5[d4.request.method].res;
        r5 ? (l3.internal = D4(I5({}, l3.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s3, h5, l3)) : this.client.core.relayer.publish(s3, h5, l3).catch((w5) => this.client.logger.error(w5));
      }
      await this.client.core.history.resolve(c5);
    }, this.sendError = async (e3) => {
      const { id: t3, topic: s3, error: i6, encodeOpts: r5, rpcOpts: n3, appLink: a4 } = e3, c5 = formatJsonRpcError(t3, i6);
      let h5;
      const p4 = a4 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const l3 = p4 ? lr : ge;
        h5 = await this.client.core.crypto.encode(s3, c5, D4(I5({}, r5 || {}), { encoding: l3 }));
      } catch (l3) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s3} failed`), l3;
      }
      let d4;
      try {
        d4 = await this.client.core.history.get(s3, t3);
      } catch (l3) {
        throw this.client.logger.error(`sendError() -> history.get(${s3}, ${t3}) failed`), l3;
      }
      if (p4) {
        const l3 = xr(a4, s3, h5);
        await global.Linking.openURL(l3, this.client.name);
      } else {
        const l3 = n3 || v5[d4.request.method].res;
        this.client.core.relayer.publish(s3, h5, l3);
      }
      await this.client.core.history.resolve(c5);
    }, this.cleanup = async () => {
      const e3 = [], t3 = [];
      this.client.session.getAll().forEach((s3) => {
        let i6 = false;
        Kt(s3.expiry) && (i6 = true), this.client.core.crypto.keychain.has(s3.topic) || (i6 = true), i6 && e3.push(s3.topic);
      }), this.client.proposal.getAll().forEach((s3) => {
        Kt(s3.expiryTimestamp) && t3.push(s3.id);
      }), await Promise.all([...e3.map((s3) => this.deleteSession({ topic: s3 })), ...t3.map((s3) => this.deleteProposal(s3))]);
    }, this.onRelayEventRequest = async (e3) => {
      this.requestQueue.queue.push(e3), await this.processRequestsQueue();
    }, this.processRequestsQueue = async () => {
      if (this.requestQueue.state === x5.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = x5.active;
        const e3 = this.requestQueue.queue.shift();
        if (e3) try {
          await this.processRequest(e3);
        } catch (t3) {
          this.client.logger.warn(t3);
        }
      }
      this.requestQueue.state = x5.idle;
    }, this.processRequest = async (e3) => {
      const { topic: t3, payload: s3, attestation: i6, transportType: r5, encryptedId: n3 } = e3, a4 = s3.method;
      if (!this.shouldIgnorePairingRequest({ topic: t3, requestMethod: a4 })) switch (a4) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: t3, payload: s3, attestation: i6, encryptedId: n3 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(t3, s3);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(t3, s3);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(t3, s3);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(t3, s3);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(t3, s3);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: t3, payload: s3, attestation: i6, encryptedId: n3, transportType: r5 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(t3, s3);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: t3, payload: s3, attestation: i6, encryptedId: n3, transportType: r5 });
        default:
          return this.client.logger.info(`Unsupported request method ${a4}`);
      }
    }, this.onRelayEventResponse = async (e3) => {
      const { topic: t3, payload: s3, transportType: i6 } = e3, r5 = (await this.client.core.history.get(t3, s3.id)).request.method;
      switch (r5) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(t3, s3, i6);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(t3, s3);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(t3, s3);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(t3, s3);
        case "wc_sessionPing":
          return this.onSessionPingResponse(t3, s3);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(t3, s3);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(t3, s3);
        default:
          return this.client.logger.info(`Unsupported response method ${r5}`);
      }
    }, this.onRelayEventUnknownPayload = (e3) => {
      const { topic: t3 } = e3, { message: s3 } = S2("MISSING_OR_INVALID", `Decoded payload on topic ${t3} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s3);
    }, this.shouldIgnorePairingRequest = (e3) => {
      const { topic: t3, requestMethod: s3 } = e3, i6 = this.expectedPairingMethodMap.get(t3);
      return !i6 || i6.includes(s3) ? false : !!(i6.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }, this.onSessionProposeRequest = async (e3) => {
      const { topic: t3, payload: s3, attestation: i6, encryptedId: r5 } = e3, { params: n3, id: a4 } = s3;
      try {
        const c5 = this.client.core.eventClient.getEvent({ topic: t3 });
        this.isValidConnect(I5({}, s3.params));
        const h5 = n3.expiryTimestamp || Mt(v5.wc_sessionPropose.req.ttl), p4 = I5({ id: a4, pairingTopic: t3, expiryTimestamp: h5 }, n3);
        await this.setProposal(a4, p4);
        const d4 = await this.getVerifyContext({ attestationId: i6, hash: yr(JSON.stringify(s3)), encryptedId: r5, metadata: p4.proposer.metadata });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), c5 == null ? void 0 : c5.setError($4.proposal_listener_not_found)), c5 == null ? void 0 : c5.addTrace(z4.emit_session_proposal), this.client.events.emit("session_proposal", { id: a4, params: p4, verifyContext: d4 });
      } catch (c5) {
        await this.sendError({ id: a4, topic: t3, error: c5, rpcOpts: v5.wc_sessionPropose.autoReject }), this.client.logger.error(c5);
      }
    }, this.onSessionProposeResponse = async (e3, t3, s3) => {
      const { id: i6 } = t3;
      if (isJsonRpcResult(t3)) {
        const { result: r5 } = t3;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r5 });
        const n3 = this.client.proposal.get(i6);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n3 });
        const a4 = n3.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a4 });
        const c5 = r5.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: c5 });
        const h5 = await this.client.core.crypto.generateSharedKey(a4, c5);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", sessionTopic: h5 });
        const p4 = await this.client.core.relayer.subscribe(h5, { transportType: s3 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: p4 }), await this.client.core.pairing.activate({ topic: e3 });
      } else if (isJsonRpcError(t3)) {
        await this.client.proposal.delete(i6, U2("USER_DISCONNECTED"));
        const r5 = Lt("session_connect");
        if (this.events.listenerCount(r5) === 0) throw new Error(`emitting ${r5} without any listeners, 954`);
        this.events.emit(Lt("session_connect"), { error: t3.error });
      }
    }, this.onSessionSettleRequest = async (e3, t3) => {
      const { id: s3, params: i6 } = t3;
      try {
        this.isValidSessionSettleRequest(i6);
        const { relay: r5, controller: n3, expiry: a4, namespaces: c5, sessionProperties: h5, sessionConfig: p4 } = t3.params, d4 = D4(I5(I5({ topic: e3, relay: r5, expiry: a4, namespaces: c5, acknowledged: true, pairingTopic: "", requiredNamespaces: {}, optionalNamespaces: {}, controller: n3.publicKey, self: { publicKey: "", metadata: this.client.metadata }, peer: { publicKey: n3.publicKey, metadata: n3.metadata } }, h5 && { sessionProperties: h5 }), p4 && { sessionConfig: p4 }), { transportType: M4.relay }), l3 = Lt("session_connect");
        if (this.events.listenerCount(l3) === 0) throw new Error(`emitting ${l3} without any listeners 997`);
        this.events.emit(Lt("session_connect"), { session: d4 }), await this.sendResult({ id: t3.id, topic: e3, result: true, throwOnFailedPublish: true });
      } catch (r5) {
        await this.sendError({ id: s3, topic: e3, error: r5 }), this.client.logger.error(r5);
      }
    }, this.onSessionSettleResponse = async (e3, t3) => {
      const { id: s3 } = t3;
      isJsonRpcResult(t3) ? (await this.client.session.update(e3, { acknowledged: true }), this.events.emit(Lt("session_approve", s3), {})) : isJsonRpcError(t3) && (await this.client.session.delete(e3, U2("USER_DISCONNECTED")), this.events.emit(Lt("session_approve", s3), { error: t3.error }));
    }, this.onSessionUpdateRequest = async (e3, t3) => {
      const { params: s3, id: i6 } = t3;
      try {
        const r5 = `${e3}_session_update`, n3 = yo.get(r5);
        if (n3 && this.isRequestOutOfSync(n3, i6)) {
          this.client.logger.info(`Discarding out of sync request - ${i6}`), this.sendError({ id: i6, topic: e3, error: U2("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(I5({ topic: e3 }, s3));
        try {
          yo.set(r5, i6), await this.client.session.update(e3, { namespaces: s3.namespaces }), await this.sendResult({ id: i6, topic: e3, result: true, throwOnFailedPublish: true });
        } catch (a4) {
          throw yo.delete(r5), a4;
        }
        this.client.events.emit("session_update", { id: i6, topic: e3, params: s3 });
      } catch (r5) {
        await this.sendError({ id: i6, topic: e3, error: r5 }), this.client.logger.error(r5);
      }
    }, this.isRequestOutOfSync = (e3, t3) => parseInt(t3.toString().slice(0, -3)) <= parseInt(e3.toString().slice(0, -3)), this.onSessionUpdateResponse = (e3, t3) => {
      const { id: s3 } = t3, i6 = Lt("session_update", s3);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(t3) ? this.events.emit(Lt("session_update", s3), {}) : isJsonRpcError(t3) && this.events.emit(Lt("session_update", s3), { error: t3.error });
    }, this.onSessionExtendRequest = async (e3, t3) => {
      const { id: s3 } = t3;
      try {
        this.isValidExtend({ topic: e3 }), await this.setExpiry(e3, Mt(z5)), await this.sendResult({ id: s3, topic: e3, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_extend", { id: s3, topic: e3 });
      } catch (i6) {
        await this.sendError({ id: s3, topic: e3, error: i6 }), this.client.logger.error(i6);
      }
    }, this.onSessionExtendResponse = (e3, t3) => {
      const { id: s3 } = t3, i6 = Lt("session_extend", s3);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(t3) ? this.events.emit(Lt("session_extend", s3), {}) : isJsonRpcError(t3) && this.events.emit(Lt("session_extend", s3), { error: t3.error });
    }, this.onSessionPingRequest = async (e3, t3) => {
      const { id: s3 } = t3;
      try {
        this.isValidPing({ topic: e3 }), await this.sendResult({ id: s3, topic: e3, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s3, topic: e3 });
      } catch (i6) {
        await this.sendError({ id: s3, topic: e3, error: i6 }), this.client.logger.error(i6);
      }
    }, this.onSessionPingResponse = (e3, t3) => {
      const { id: s3 } = t3, i6 = Lt("session_ping", s3);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      setTimeout(() => {
        isJsonRpcResult(t3) ? this.events.emit(Lt("session_ping", s3), {}) : isJsonRpcError(t3) && this.events.emit(Lt("session_ping", s3), { error: t3.error });
      }, 500);
    }, this.onSessionDeleteRequest = async (e3, t3) => {
      const { id: s3 } = t3;
      try {
        this.isValidDisconnect({ topic: e3, reason: t3.params }), Promise.all([new Promise((i6) => {
          this.client.core.relayer.once(v4.publish, async () => {
            i6(await this.deleteSession({ topic: e3, id: s3 }));
          });
        }), this.sendResult({ id: s3, topic: e3, result: true, throwOnFailedPublish: true }), this.cleanupPendingSentRequestsForTopic({ topic: e3, error: U2("USER_DISCONNECTED") })]).catch((i6) => this.client.logger.error(i6));
      } catch (i6) {
        this.client.logger.error(i6);
      }
    }, this.onSessionRequest = async (e3) => {
      var t3, s3, i6;
      const { topic: r5, payload: n3, attestation: a4, encryptedId: c5, transportType: h5 } = e3, { id: p4, params: d4 } = n3;
      try {
        await this.isValidRequest(I5({ topic: r5 }, d4));
        const l3 = this.client.session.get(r5), w5 = await this.getVerifyContext({ attestationId: a4, hash: yr(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", d4, p4))), encryptedId: c5, metadata: l3.peer.metadata, transportType: h5 }), m3 = { id: p4, topic: r5, params: d4, verifyContext: w5 };
        await this.setPendingSessionRequest(m3), h5 === M4.link_mode && (t3 = l3.peer.metadata.redirect) != null && t3.universal && this.client.core.addLinkModeSupportedApp((s3 = l3.peer.metadata.redirect) == null ? void 0 : s3.universal), (i6 = this.client.signConfig) != null && i6.disableRequestQueue ? this.emitSessionRequest(m3) : (this.addSessionRequestToSessionRequestQueue(m3), this.processSessionRequestQueue());
      } catch (l3) {
        await this.sendError({ id: p4, topic: r5, error: l3 }), this.client.logger.error(l3);
      }
    }, this.onSessionRequestResponse = (e3, t3) => {
      const { id: s3 } = t3, i6 = Lt("session_request", s3);
      if (this.events.listenerCount(i6) === 0) throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(t3) ? this.events.emit(Lt("session_request", s3), { result: t3.result }) : isJsonRpcError(t3) && this.events.emit(Lt("session_request", s3), { error: t3.error });
    }, this.onSessionEventRequest = async (e3, t3) => {
      const { id: s3, params: i6 } = t3;
      try {
        const r5 = `${e3}_session_event_${i6.event.name}`, n3 = yo.get(r5);
        if (n3 && this.isRequestOutOfSync(n3, s3)) {
          this.client.logger.info(`Discarding out of sync request - ${s3}`);
          return;
        }
        this.isValidEmit(I5({ topic: e3 }, i6)), this.client.events.emit("session_event", { id: s3, topic: e3, params: i6 }), yo.set(r5, s3);
      } catch (r5) {
        await this.sendError({ id: s3, topic: e3, error: r5 }), this.client.logger.error(r5);
      }
    }, this.onSessionAuthenticateResponse = (e3, t3) => {
      const { id: s3 } = t3;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e3, payload: t3 }), isJsonRpcResult(t3) ? this.events.emit(Lt("session_request", s3), { result: t3.result }) : isJsonRpcError(t3) && this.events.emit(Lt("session_request", s3), { error: t3.error });
    }, this.onSessionAuthenticateRequest = async (e3) => {
      var t3;
      const { topic: s3, payload: i6, attestation: r5, encryptedId: n3, transportType: a4 } = e3;
      try {
        const { requester: c5, authPayload: h5, expiryTimestamp: p4 } = i6.params, d4 = await this.getVerifyContext({ attestationId: r5, hash: yr(JSON.stringify(i6)), encryptedId: n3, metadata: c5.metadata, transportType: a4 }), l3 = { requester: c5, pairingTopic: s3, id: i6.id, authPayload: h5, verifyContext: d4, expiryTimestamp: p4 };
        await this.setAuthRequest(i6.id, { request: l3, pairingTopic: s3, transportType: a4 }), a4 === M4.link_mode && (t3 = c5.metadata.redirect) != null && t3.universal && this.client.core.addLinkModeSupportedApp(c5.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s3, params: i6.params, id: i6.id, verifyContext: d4 });
      } catch (c5) {
        this.client.logger.error(c5);
        const h5 = i6.params.requester.publicKey, p4 = await this.client.core.crypto.generateKeyPair(), d4 = this.getAppLinkIfEnabled(i6.params.requester.metadata, a4), l3 = { type: D3, receiverPublicKey: h5, senderPublicKey: p4 };
        await this.sendError({ id: i6.id, topic: s3, error: c5, encodeOpts: l3, rpcOpts: v5.wc_sessionAuthenticate.autoReject, appLink: d4 });
      }
    }, this.addSessionRequestToSessionRequestQueue = (e3) => {
      this.sessionRequestQueue.queue.push(e3);
    }, this.cleanupAfterResponse = (e3) => {
      this.deletePendingSessionRequest(e3.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = x5.idle, this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay));
    }, this.cleanupPendingSentRequestsForTopic = ({ topic: e3, error: t3 }) => {
      const s3 = this.client.core.history.pending;
      s3.length > 0 && s3.filter((i6) => i6.topic === e3 && i6.request.method === "wc_sessionRequest").forEach((i6) => {
        const r5 = i6.request.id, n3 = Lt("session_request", r5);
        if (this.events.listenerCount(n3) === 0) throw new Error(`emitting ${n3} without any listeners`);
        this.events.emit(Lt("session_request", i6.request.id), { error: t3 });
      });
    }, this.processSessionRequestQueue = () => {
      if (this.sessionRequestQueue.state === x5.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const e3 = this.sessionRequestQueue.queue[0];
      if (!e3) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = x5.active, this.emitSessionRequest(e3);
      } catch (t3) {
        this.client.logger.error(t3);
      }
    }, this.emitSessionRequest = (e3) => {
      this.client.events.emit("session_request", e3);
    }, this.onPairingCreated = (e3) => {
      if (e3.methods && this.expectedPairingMethodMap.set(e3.topic, e3.methods), e3.active) return;
      const t3 = this.client.proposal.getAll().find((s3) => s3.pairingTopic === e3.topic);
      t3 && this.onSessionProposeRequest({ topic: e3.topic, payload: formatJsonRpcRequest("wc_sessionPropose", { requiredNamespaces: t3.requiredNamespaces, optionalNamespaces: t3.optionalNamespaces, relays: t3.relays, proposer: t3.proposer, sessionProperties: t3.sessionProperties }, t3.id) });
    }, this.isValidConnect = async (e3) => {
      if (!to(e3)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e3)}`);
        throw new Error(a4);
      }
      const { pairingTopic: t3, requiredNamespaces: s3, optionalNamespaces: i6, sessionProperties: r5, relays: n3 } = e3;
      if (I3(t3) || await this.isValidPairingTopic(t3), !eo(n3, true)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `connect() relays: ${n3}`);
        throw new Error(a4);
      }
      !I3(s3) && Z2(s3) !== 0 && this.validateNamespaces(s3, "requiredNamespaces"), !I3(i6) && Z2(i6) !== 0 && this.validateNamespaces(i6, "optionalNamespaces"), I3(r5) || this.validateSessionProps(r5, "sessionProperties");
    }, this.validateNamespaces = (e3, t3) => {
      const s3 = Xr(e3, "connect()", t3);
      if (s3) throw new Error(s3.message);
    }, this.isValidApprove = async (e3) => {
      if (!to(e3)) throw new Error(S2("MISSING_OR_INVALID", `approve() params: ${e3}`).message);
      const { id: t3, namespaces: s3, relayProtocol: i6, sessionProperties: r5 } = e3;
      this.checkRecentlyDeleted(t3), await this.isValidProposalId(t3);
      const n3 = this.client.proposal.get(t3), a4 = Wn(s3, "approve()");
      if (a4) throw new Error(a4.message);
      const c5 = zn(n3.requiredNamespaces, s3, "approve()");
      if (c5) throw new Error(c5.message);
      if (!b2(i6, true)) {
        const { message: h5 } = S2("MISSING_OR_INVALID", `approve() relayProtocol: ${i6}`);
        throw new Error(h5);
      }
      I3(r5) || this.validateSessionProps(r5, "sessionProperties");
    }, this.isValidReject = async (e3) => {
      if (!to(e3)) {
        const { message: i6 } = S2("MISSING_OR_INVALID", `reject() params: ${e3}`);
        throw new Error(i6);
      }
      const { id: t3, reason: s3 } = e3;
      if (this.checkRecentlyDeleted(t3), await this.isValidProposalId(t3), !ro(s3)) {
        const { message: i6 } = S2("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s3)}`);
        throw new Error(i6);
      }
    }, this.isValidSessionSettleRequest = (e3) => {
      if (!to(e3)) {
        const { message: c5 } = S2("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e3}`);
        throw new Error(c5);
      }
      const { relay: t3, controller: s3, namespaces: i6, expiry: r5 } = e3;
      if (!Jn(t3)) {
        const { message: c5 } = S2("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(c5);
      }
      const n3 = Zr(s3, "onSessionSettleRequest()");
      if (n3) throw new Error(n3.message);
      const a4 = Wn(i6, "onSessionSettleRequest()");
      if (a4) throw new Error(a4.message);
      if (Kt(r5)) {
        const { message: c5 } = S2("EXPIRED", "onSessionSettleRequest()");
        throw new Error(c5);
      }
    }, this.isValidUpdate = async (e3) => {
      if (!to(e3)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `update() params: ${e3}`);
        throw new Error(a4);
      }
      const { topic: t3, namespaces: s3 } = e3;
      this.checkRecentlyDeleted(t3), await this.isValidSessionTopic(t3);
      const i6 = this.client.session.get(t3), r5 = Wn(s3, "update()");
      if (r5) throw new Error(r5.message);
      const n3 = zn(i6.requiredNamespaces, s3, "update()");
      if (n3) throw new Error(n3.message);
    }, this.isValidExtend = async (e3) => {
      if (!to(e3)) {
        const { message: s3 } = S2("MISSING_OR_INVALID", `extend() params: ${e3}`);
        throw new Error(s3);
      }
      const { topic: t3 } = e3;
      this.checkRecentlyDeleted(t3), await this.isValidSessionTopic(t3);
    }, this.isValidRequest = async (e3) => {
      if (!to(e3)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `request() params: ${e3}`);
        throw new Error(a4);
      }
      const { topic: t3, request: s3, chainId: i6, expiry: r5 } = e3;
      this.checkRecentlyDeleted(t3), await this.isValidSessionTopic(t3);
      const { namespaces: n3 } = this.client.session.get(t3);
      if (!co(n3, i6)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `request() chainId: ${i6}`);
        throw new Error(a4);
      }
      if (!oo(s3)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `request() ${JSON.stringify(s3)}`);
        throw new Error(a4);
      }
      if (!ao(n3, i6, s3.method)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `request() method: ${s3.method}`);
        throw new Error(a4);
      }
      if (r5 && !po(r5, me3)) {
        const { message: a4 } = S2("MISSING_OR_INVALID", `request() expiry: ${r5}. Expiry must be a number (in seconds) between ${me3.min} and ${me3.max}`);
        throw new Error(a4);
      }
    }, this.isValidRespond = async (e3) => {
      var t3;
      if (!to(e3)) {
        const { message: r5 } = S2("MISSING_OR_INVALID", `respond() params: ${e3}`);
        throw new Error(r5);
      }
      const { topic: s3, response: i6 } = e3;
      try {
        await this.isValidSessionTopic(s3);
      } catch (r5) {
        throw (t3 = e3 == null ? void 0 : e3.response) != null && t3.id && this.cleanupAfterResponse(e3), r5;
      }
      if (!so(i6)) {
        const { message: r5 } = S2("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i6)}`);
        throw new Error(r5);
      }
    }, this.isValidPing = async (e3) => {
      if (!to(e3)) {
        const { message: s3 } = S2("MISSING_OR_INVALID", `ping() params: ${e3}`);
        throw new Error(s3);
      }
      const { topic: t3 } = e3;
      await this.isValidSessionOrPairingTopic(t3);
    }, this.isValidEmit = async (e3) => {
      if (!to(e3)) {
        const { message: n3 } = S2("MISSING_OR_INVALID", `emit() params: ${e3}`);
        throw new Error(n3);
      }
      const { topic: t3, event: s3, chainId: i6 } = e3;
      await this.isValidSessionTopic(t3);
      const { namespaces: r5 } = this.client.session.get(t3);
      if (!co(r5, i6)) {
        const { message: n3 } = S2("MISSING_OR_INVALID", `emit() chainId: ${i6}`);
        throw new Error(n3);
      }
      if (!io(s3)) {
        const { message: n3 } = S2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s3)}`);
        throw new Error(n3);
      }
      if (!uo(r5, i6, s3.name)) {
        const { message: n3 } = S2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s3)}`);
        throw new Error(n3);
      }
    }, this.isValidDisconnect = async (e3) => {
      if (!to(e3)) {
        const { message: s3 } = S2("MISSING_OR_INVALID", `disconnect() params: ${e3}`);
        throw new Error(s3);
      }
      const { topic: t3 } = e3;
      await this.isValidSessionOrPairingTopic(t3);
    }, this.isValidAuthenticate = (e3) => {
      const { chains: t3, uri: s3, domain: i6, nonce: r5 } = e3;
      if (!Array.isArray(t3) || t3.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!b2(s3, false)) throw new Error("uri is required parameter");
      if (!b2(i6, false)) throw new Error("domain is required parameter");
      if (!b2(r5, false)) throw new Error("nonce is required parameter");
      if ([...new Set(t3.map((a4) => re(a4).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n3 } = re(t3[0]);
      if (n3 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }, this.getVerifyContext = async (e3) => {
      const { attestationId: t3, hash: s3, encryptedId: i6, metadata: r5, transportType: n3 } = e3, a4 = { verified: { verifyUrl: r5.verifyUrl || J2, validation: "UNKNOWN", origin: r5.url || "" } };
      try {
        if (n3 === M4.link_mode) {
          const h5 = this.getAppLinkIfEnabled(r5, n3);
          return a4.verified.validation = h5 && new URL(h5).origin === new URL(r5.url).origin ? "VALID" : "INVALID", a4;
        }
        const c5 = await this.client.core.verify.resolve({ attestationId: t3, hash: s3, encryptedId: i6, verifyUrl: r5.verifyUrl });
        c5 && (a4.verified.origin = c5.origin, a4.verified.isScam = c5.isScam, a4.verified.validation = c5.origin === new URL(r5.url).origin ? "VALID" : "INVALID");
      } catch (c5) {
        this.client.logger.warn(c5);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a4)}`), a4;
    }, this.validateSessionProps = (e3, t3) => {
      Object.values(e3).forEach((s3) => {
        if (!b2(s3, false)) {
          const { message: i6 } = S2("MISSING_OR_INVALID", `${t3} must be in Record<string, string> format. Received: ${JSON.stringify(s3)}`);
          throw new Error(i6);
        }
      });
    }, this.getPendingAuthRequest = (e3) => {
      const t3 = this.client.auth.requests.get(e3);
      return typeof t3 == "object" ? t3 : void 0;
    }, this.addToRecentlyDeleted = (e3, t3) => {
      if (this.recentlyDeletedMap.set(e3, t3), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s3 = 0;
        const i6 = this.recentlyDeletedLimit / 2;
        for (const r5 of this.recentlyDeletedMap.keys()) {
          if (s3++ >= i6) break;
          this.recentlyDeletedMap.delete(r5);
        }
      }
    }, this.checkRecentlyDeleted = (e3) => {
      const t3 = this.recentlyDeletedMap.get(e3);
      if (t3) {
        const { message: s3 } = S2("MISSING_OR_INVALID", `Record was recently deleted - ${t3}: ${e3}`);
        throw new Error(s3);
      }
    }, this.isLinkModeEnabled = (e3, t3) => {
      var s3, i6, r5, n3, a4, c5, h5, p4, d4;
      return !e3 || t3 !== M4.link_mode ? false : ((i6 = (s3 = this.client.metadata) == null ? void 0 : s3.redirect) == null ? void 0 : i6.linkMode) === true && ((n3 = (r5 = this.client.metadata) == null ? void 0 : r5.redirect) == null ? void 0 : n3.universal) !== void 0 && ((c5 = (a4 = this.client.metadata) == null ? void 0 : a4.redirect) == null ? void 0 : c5.universal) !== "" && ((h5 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : h5.universal) !== void 0 && ((p4 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : p4.universal) !== "" && ((d4 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : d4.linkMode) === true && this.client.core.linkModeSupportedApps.includes(e3.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }, this.getAppLinkIfEnabled = (e3, t3) => {
      var s3;
      return this.isLinkModeEnabled(e3, t3) ? (s3 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : s3.universal : void 0;
    }, this.handleLinkModeMessage = ({ url: e3 }) => {
      if (!e3 || !e3.includes("wc_ev") || !e3.includes("topic")) return;
      const t3 = Bt(e3, "topic") || "", s3 = decodeURIComponent(Bt(e3, "wc_ev") || ""), i6 = this.client.session.keys.includes(t3);
      i6 && this.client.session.update(t3, { transportType: M4.link_mode }), this.client.core.dispatchEnvelope({ topic: t3, message: s3, sessionExists: i6 });
    }, this.registerLinkModeListeners = async () => {
      var e3;
      if (Wt() || _4() && (e3 = this.client.metadata.redirect) != null && e3.linkMode) {
        const t3 = global == null ? void 0 : global.Linking;
        if (typeof t3 < "u") {
          t3.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s3 = await t3.getInitialURL();
          s3 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s3 });
          }, 50);
        }
      }
    };
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o4 } = S2("NOT_INITIALIZED", this.name);
      throw new Error(o4);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(v4.message, (o4) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(o4) : this.onRelayMessage(o4);
    });
  }
  async onRelayMessage(o4) {
    const { topic: e3, message: t3, attestation: s3, transportType: i6 } = o4, { publicKey: r5 } = this.client.auth.authKeys.keys.includes(ae3) ? this.client.auth.authKeys.get(ae3) : { responseTopic: void 0, publicKey: void 0 }, n3 = await this.client.core.crypto.decode(e3, t3, { receiverPublicKey: r5, encoding: i6 === M4.link_mode ? lr : ge });
    try {
      isJsonRpcRequest(n3) ? (this.client.core.history.set(e3, n3), this.onRelayEventRequest({ topic: e3, payload: n3, attestation: s3, transportType: i6, encryptedId: yr(t3) })) : isJsonRpcResponse(n3) ? (await this.client.core.history.resolve(n3), await this.onRelayEventResponse({ topic: e3, payload: n3, transportType: i6 }), this.client.core.history.delete(e3, n3.id)) : this.onRelayEventUnknownPayload({ topic: e3, payload: n3, transportType: i6 });
    } catch (a4) {
      this.client.logger.error(a4);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(S3.expired, async (o4) => {
      const { topic: e3, id: t3 } = Vt(o4.target);
      if (t3 && this.client.pendingRequest.keys.includes(t3)) return await this.deletePendingSessionRequest(t3, S2("EXPIRED"), true);
      if (t3 && this.client.auth.requests.keys.includes(t3)) return await this.deletePendingAuthRequest(t3, S2("EXPIRED"), true);
      e3 ? this.client.session.keys.includes(e3) && (await this.deleteSession({ topic: e3, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: e3 })) : t3 && (await this.deleteProposal(t3, true), this.client.events.emit("proposal_expire", { id: t3 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(V3.create, (o4) => this.onPairingCreated(o4)), this.client.core.pairing.events.on(V3.delete, (o4) => {
      this.addToRecentlyDeleted(o4.topic, "pairing");
    });
  }
  isValidPairingTopic(o4) {
    if (!b2(o4, false)) {
      const { message: e3 } = S2("MISSING_OR_INVALID", `pairing topic should be a string: ${o4}`);
      throw new Error(e3);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o4)) {
      const { message: e3 } = S2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o4}`);
      throw new Error(e3);
    }
    if (Kt(this.client.core.pairing.pairings.get(o4).expiry)) {
      const { message: e3 } = S2("EXPIRED", `pairing topic: ${o4}`);
      throw new Error(e3);
    }
  }
  async isValidSessionTopic(o4) {
    if (!b2(o4, false)) {
      const { message: e3 } = S2("MISSING_OR_INVALID", `session topic should be a string: ${o4}`);
      throw new Error(e3);
    }
    if (this.checkRecentlyDeleted(o4), !this.client.session.keys.includes(o4)) {
      const { message: e3 } = S2("NO_MATCHING_KEY", `session topic doesn't exist: ${o4}`);
      throw new Error(e3);
    }
    if (Kt(this.client.session.get(o4).expiry)) {
      await this.deleteSession({ topic: o4 });
      const { message: e3 } = S2("EXPIRED", `session topic: ${o4}`);
      throw new Error(e3);
    }
    if (!this.client.core.crypto.keychain.has(o4)) {
      const { message: e3 } = S2("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o4}`);
      throw await this.deleteSession({ topic: o4 }), new Error(e3);
    }
  }
  async isValidSessionOrPairingTopic(o4) {
    if (this.checkRecentlyDeleted(o4), this.client.session.keys.includes(o4)) await this.isValidSessionTopic(o4);
    else if (this.client.core.pairing.pairings.keys.includes(o4)) this.isValidPairingTopic(o4);
    else if (b2(o4, false)) {
      const { message: e3 } = S2("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o4}`);
      throw new Error(e3);
    } else {
      const { message: e3 } = S2("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o4}`);
      throw new Error(e3);
    }
  }
  async isValidProposalId(o4) {
    if (!no(o4)) {
      const { message: e3 } = S2("MISSING_OR_INVALID", `proposal id should be a number: ${o4}`);
      throw new Error(e3);
    }
    if (!this.client.proposal.keys.includes(o4)) {
      const { message: e3 } = S2("NO_MATCHING_KEY", `proposal id doesn't exist: ${o4}`);
      throw new Error(e3);
    }
    if (Kt(this.client.proposal.get(o4).expiryTimestamp)) {
      await this.deleteProposal(o4);
      const { message: e3 } = S2("EXPIRED", `proposal id: ${o4}`);
      throw new Error(e3);
    }
  }
};
var Ss2 = class extends ni {
  constructor(o4, e3) {
    super(o4, e3, st3, ye3), this.core = o4, this.logger = e3;
  }
};
var yt2 = class extends ni {
  constructor(o4, e3) {
    super(o4, e3, rt2, ye3), this.core = o4, this.logger = e3;
  }
};
var Is2 = class extends ni {
  constructor(o4, e3) {
    super(o4, e3, ot2, ye3, (t3) => t3.id), this.core = o4, this.logger = e3;
  }
};
var fs = class extends ni {
  constructor(o4, e3) {
    super(o4, e3, pt2, oe3, () => ae3), this.core = o4, this.logger = e3;
  }
};
var vs2 = class extends ni {
  constructor(o4, e3) {
    super(o4, e3, ht2, oe3), this.core = o4, this.logger = e3;
  }
};
var qs2 = class extends ni {
  constructor(o4, e3) {
    super(o4, e3, dt2, oe3, (t3) => t3.id), this.core = o4, this.logger = e3;
  }
};
var Ts2 = class {
  constructor(o4, e3) {
    this.core = o4, this.logger = e3, this.authKeys = new fs(this.core, this.logger), this.pairingTopics = new vs2(this.core, this.logger), this.requests = new qs2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var _e3 = class __e extends S4 {
  constructor(o4) {
    super(o4), this.protocol = be3, this.version = Ce3, this.name = we3.name, this.events = new import_events6.EventEmitter(), this.on = (t3, s3) => this.events.on(t3, s3), this.once = (t3, s3) => this.events.once(t3, s3), this.off = (t3, s3) => this.events.off(t3, s3), this.removeListener = (t3, s3) => this.events.removeListener(t3, s3), this.removeAllListeners = (t3) => this.events.removeAllListeners(t3), this.connect = async (t3) => {
      try {
        return await this.engine.connect(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.pair = async (t3) => {
      try {
        return await this.engine.pair(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.approve = async (t3) => {
      try {
        return await this.engine.approve(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.reject = async (t3) => {
      try {
        return await this.engine.reject(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.update = async (t3) => {
      try {
        return await this.engine.update(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.extend = async (t3) => {
      try {
        return await this.engine.extend(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.request = async (t3) => {
      try {
        return await this.engine.request(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.respond = async (t3) => {
      try {
        return await this.engine.respond(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.ping = async (t3) => {
      try {
        return await this.engine.ping(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.emit = async (t3) => {
      try {
        return await this.engine.emit(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.disconnect = async (t3) => {
      try {
        return await this.engine.disconnect(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.find = (t3) => {
      try {
        return this.engine.find(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.getPendingSessionRequests = () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (t3) {
        throw this.logger.error(t3.message), t3;
      }
    }, this.authenticate = async (t3, s3) => {
      try {
        return await this.engine.authenticate(t3, s3);
      } catch (i6) {
        throw this.logger.error(i6.message), i6;
      }
    }, this.formatAuthMessage = (t3) => {
      try {
        return this.engine.formatAuthMessage(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.approveSessionAuthenticate = async (t3) => {
      try {
        return await this.engine.approveSessionAuthenticate(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.rejectSessionAuthenticate = async (t3) => {
      try {
        return await this.engine.rejectSessionAuthenticate(t3);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }, this.name = (o4 == null ? void 0 : o4.name) || we3.name, this.metadata = (o4 == null ? void 0 : o4.metadata) || Nt(), this.signConfig = o4 == null ? void 0 : o4.signConfig;
    const e3 = typeof (o4 == null ? void 0 : o4.logger) < "u" && typeof (o4 == null ? void 0 : o4.logger) != "string" ? o4.logger : (0, import_pino.default)(k({ level: (o4 == null ? void 0 : o4.logger) || we3.logger }));
    this.core = (o4 == null ? void 0 : o4.core) || new bn2(o4), this.logger = E(e3, this.name), this.session = new yt2(this.core, this.logger), this.proposal = new Ss2(this.core, this.logger), this.pendingRequest = new Is2(this.core, this.logger), this.engine = new Rs2(this), this.auth = new Ts2(this.core, this.logger);
  }
  static async init(o4) {
    const e3 = new __e(o4);
    return await e3.initialize(), e3;
  }
  get context() {
    return y(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), this.engine.processRelayMessageCache();
    } catch (o4) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o4.message), o4;
    }
  }
};

// node_modules/@jnwng/walletconnect-solana/lib/esm/adapter.js
var import_bs58 = __toESM(require_bs58(), 1);

// node_modules/@jnwng/walletconnect-solana/lib/esm/errors.js
var import_dist178 = __toESM(require_dist(), 1);
var import_dist179 = __toESM(require_dist2(), 1);
var import_dist180 = __toESM(require_dist3(), 1);
var ClientNotInitializedError = class _ClientNotInitializedError extends Error {
  constructor() {
    super();
    Object.setPrototypeOf(this, _ClientNotInitializedError.prototype);
  }
};
var QRCodeModalError = class _QRCodeModalError extends Error {
  constructor() {
    super();
    Object.setPrototypeOf(this, _QRCodeModalError.prototype);
  }
};

// node_modules/@jnwng/walletconnect-solana/lib/esm/adapter.js
var WalletConnectChainID;
(function(WalletConnectChainID2) {
  WalletConnectChainID2["Mainnet"] = "solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ";
  WalletConnectChainID2["Devnet"] = "solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K";
})(WalletConnectChainID || (WalletConnectChainID = {}));
var WalletConnectRPCMethods;
(function(WalletConnectRPCMethods2) {
  WalletConnectRPCMethods2["signTransaction"] = "solana_signTransaction";
  WalletConnectRPCMethods2["signMessage"] = "solana_signMessage";
})(WalletConnectRPCMethods || (WalletConnectRPCMethods = {}));
var getConnectParams = (chainId) => ({
  requiredNamespaces: {
    solana: {
      chains: [chainId],
      methods: [WalletConnectRPCMethods.signTransaction, WalletConnectRPCMethods.signMessage],
      events: []
    }
  }
});
var isVersionedTransaction = (transaction) => "version" in transaction;
var WalletConnectWallet = class {
  constructor(config) {
    this._options = config.options;
    this._network = config.network;
  }
  async connect() {
    const client = this._client ?? await _e3.init(this._options);
    const sessions = client.find(getConnectParams(this._network)).filter((s3) => s3.acknowledged);
    if (sessions.length) {
      this._session = sessions[sessions.length - 1];
      this._client = client;
      return {
        publicKey: this.publicKey
      };
    } else {
      const { uri, approval } = await client.connect(getConnectParams(this._network));
      return new Promise((resolve, reject) => {
        if (uri) {
          import_qrcode_modal.default.open(uri, () => {
            reject(new QRCodeModalError());
          });
        }
        approval().then((session) => {
          this._session = session;
          this._client = client;
          resolve({ publicKey: this.publicKey });
        }).catch(reject).finally(() => {
          import_qrcode_modal.default.close();
        });
      });
    }
  }
  async disconnect() {
    if (this._client && this._session) {
      await this._client.disconnect({
        topic: this._session.topic,
        reason: U2("USER_DISCONNECTED")
      });
      this._session = void 0;
    } else {
      throw new ClientNotInitializedError();
    }
  }
  get client() {
    if (this._client) {
      return Object.assign({}, this._client, { off: this._client.removeListener });
    } else {
      throw new ClientNotInitializedError();
    }
  }
  get publicKey() {
    if (this._client && this._session) {
      const { address } = oe(this._session.namespaces.solana.accounts[0]);
      return new PublicKey(address);
    } else {
      throw new ClientNotInitializedError();
    }
  }
  async signTransaction(transaction) {
    if (this._client && this._session) {
      let rawTransaction;
      let legacyTransaction;
      if (isVersionedTransaction(transaction)) {
        rawTransaction = Buffer.from(transaction.serialize()).toString("base64");
        if (transaction.version === "legacy") {
          legacyTransaction = Transaction.from(transaction.serialize());
        }
      } else {
        rawTransaction = transaction.serialize({
          requireAllSignatures: false,
          verifySignatures: false
        }).toString("base64");
        legacyTransaction = transaction;
      }
      const { signature: signature2 } = await this._client.request({
        chainId: this._network,
        topic: this._session.topic,
        request: {
          method: WalletConnectRPCMethods.signTransaction,
          params: {
            // Passing ...legacyTransaction is deprecated.
            // All new clients should rely on the `transaction` parameter.
            // The future versions will stop passing ...legacyTransaction.
            ...legacyTransaction,
            // New base64-encoded serialized transaction request parameter
            transaction: rawTransaction
          }
        }
      });
      transaction.addSignature(this.publicKey, Buffer.from(import_bs58.default.decode(signature2)));
      return transaction;
    } else {
      throw new ClientNotInitializedError();
    }
  }
  async signMessage(message) {
    if (this._client && this._session) {
      const { signature: signature2 } = await this._client.request({
        // The network does not change the output of message signing, but this is a required parameter for SignClient
        chainId: this._network,
        topic: this._session.topic,
        request: {
          method: WalletConnectRPCMethods.signMessage,
          params: { pubkey: this.publicKey.toString(), message: import_bs58.default.encode(message) }
        }
      });
      return import_bs58.default.decode(signature2);
    } else {
      throw new ClientNotInitializedError();
    }
  }
};
export {
  ClientNotInitializedError,
  QRCodeModalError,
  WalletConnectChainID,
  _e3 as WalletConnectClient,
  WalletConnectRPCMethods,
  WalletConnectWallet
};
/*! Bundled license information:

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)
*/
//# sourceMappingURL=esm-ZXGSZFBB.js.map
